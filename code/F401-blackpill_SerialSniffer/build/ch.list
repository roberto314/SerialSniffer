
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002d9 	.word	0x080002d9
 8000008:	080002db 	.word	0x080002db
 800000c:	080002db 	.word	0x080002db
 8000010:	080002db 	.word	0x080002db
 8000014:	080002db 	.word	0x080002db
 8000018:	080002db 	.word	0x080002db
 800001c:	080002db 	.word	0x080002db
 8000020:	080002db 	.word	0x080002db
 8000024:	080002db 	.word	0x080002db
 8000028:	080002db 	.word	0x080002db
 800002c:	08004441 	.word	0x08004441
 8000030:	080002db 	.word	0x080002db
 8000034:	080002db 	.word	0x080002db
 8000038:	080002db 	.word	0x080002db
 800003c:	080002db 	.word	0x080002db
 8000040:	080002db 	.word	0x080002db
 8000044:	080002db 	.word	0x080002db
 8000048:	080002db 	.word	0x080002db
 800004c:	080002db 	.word	0x080002db
 8000050:	080002db 	.word	0x080002db
 8000054:	080002db 	.word	0x080002db
 8000058:	080002db 	.word	0x080002db
 800005c:	080002db 	.word	0x080002db
 8000060:	080002db 	.word	0x080002db
 8000064:	080002db 	.word	0x080002db
 8000068:	080002db 	.word	0x080002db
 800006c:	080002db 	.word	0x080002db
 8000070:	080002db 	.word	0x080002db
 8000074:	080002db 	.word	0x080002db
 8000078:	080002db 	.word	0x080002db
 800007c:	080002db 	.word	0x080002db
 8000080:	080002db 	.word	0x080002db
 8000084:	080002db 	.word	0x080002db
 8000088:	080002db 	.word	0x080002db
 800008c:	080002db 	.word	0x080002db
 8000090:	080002db 	.word	0x080002db
 8000094:	080002db 	.word	0x080002db
 8000098:	080002db 	.word	0x080002db
 800009c:	080002db 	.word	0x080002db
 80000a0:	080002db 	.word	0x080002db
 80000a4:	08005301 	.word	0x08005301
 80000a8:	080002db 	.word	0x080002db
 80000ac:	08005321 	.word	0x08005321
 80000b0:	080052e1 	.word	0x080052e1
 80000b4:	080002db 	.word	0x080002db
 80000b8:	080002db 	.word	0x080002db
 80000bc:	080002db 	.word	0x080002db
 80000c0:	080002db 	.word	0x080002db
 80000c4:	080002db 	.word	0x080002db
 80000c8:	080002db 	.word	0x080002db
 80000cc:	080002db 	.word	0x080002db
 80000d0:	080002db 	.word	0x080002db
 80000d4:	080052c1 	.word	0x080052c1
 80000d8:	080052a1 	.word	0x080052a1
 80000dc:	080002db 	.word	0x080002db
 80000e0:	080002db 	.word	0x080002db
 80000e4:	080002db 	.word	0x080002db
 80000e8:	080002db 	.word	0x080002db
 80000ec:	080002db 	.word	0x080002db
 80000f0:	080002db 	.word	0x080002db
 80000f4:	080002db 	.word	0x080002db
 80000f8:	080002db 	.word	0x080002db
 80000fc:	080002db 	.word	0x080002db
 8000100:	080002db 	.word	0x080002db
 8000104:	080002db 	.word	0x080002db
 8000108:	08005331 	.word	0x08005331
 800010c:	080002db 	.word	0x080002db
 8000110:	080002db 	.word	0x080002db
 8000114:	080002db 	.word	0x080002db
 8000118:	080002db 	.word	0x080002db
 800011c:	080002db 	.word	0x080002db
 8000120:	080002db 	.word	0x080002db
 8000124:	080002db 	.word	0x080002db
 8000128:	080002db 	.word	0x080002db
 800012c:	080002db 	.word	0x080002db
 8000130:	080002db 	.word	0x080002db
 8000134:	080002db 	.word	0x080002db
 8000138:	080002db 	.word	0x080002db
 800013c:	080002db 	.word	0x080002db
 8000140:	080002db 	.word	0x080002db
 8000144:	080002db 	.word	0x080002db
 8000148:	080002db 	.word	0x080002db
 800014c:	080053e1 	.word	0x080053e1
 8000150:	080002db 	.word	0x080002db
 8000154:	080002db 	.word	0x080002db
 8000158:	080002db 	.word	0x080002db
 800015c:	08005281 	.word	0x08005281
 8000160:	080002db 	.word	0x080002db
 8000164:	080002db 	.word	0x080002db
 8000168:	080002db 	.word	0x080002db
 800016c:	080002db 	.word	0x080002db
 8000170:	080002db 	.word	0x080002db
 8000174:	080002db 	.word	0x080002db
 8000178:	080002db 	.word	0x080002db
 800017c:	080002db 	.word	0x080002db
 8000180:	080002db 	.word	0x080002db
 8000184:	080002db 	.word	0x080002db
 8000188:	080002db 	.word	0x080002db
 800018c:	080002db 	.word	0x080002db
 8000190:	080002db 	.word	0x080002db
 8000194:	080002db 	.word	0x080002db
 8000198:	080002db 	.word	0x080002db
 800019c:	080002db 	.word	0x080002db
 80001a0:	080002db 	.word	0x080002db
 80001a4:	080002db 	.word	0x080002db
 80001a8:	080002db 	.word	0x080002db
 80001ac:	080002db 	.word	0x080002db
 80001b0:	080002db 	.word	0x080002db
 80001b4:	080002db 	.word	0x080002db
 80001b8:	080002db 	.word	0x080002db
 80001bc:	080002db 	.word	0x080002db
 80001c0:	080002db 	.word	0x080002db
 80001c4:	080002db 	.word	0x080002db
 80001c8:	080002db 	.word	0x080002db
 80001cc:	080002db 	.word	0x080002db
 80001d0:	080002db 	.word	0x080002db
 80001d4:	080002db 	.word	0x080002db
 80001d8:	080002db 	.word	0x080002db
 80001dc:	080002db 	.word	0x080002db

Disassembly of section .text:

08000200 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000202:	4827      	ldr	r0, [pc, #156]	; (80002a0 <endfiniloop+0x4>)
                msr     MSP, r0
 8000204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000208:	4826      	ldr	r0, [pc, #152]	; (80002a4 <endfiniloop+0x8>)
                msr     PSP, r0
 800020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800020e:	4826      	ldr	r0, [pc, #152]	; (80002a8 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000210:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000214:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000218:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800021a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800021c:	f380 8814 	msr	CONTROL, r0
                isb
 8000220:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000224:	f005 fb3c 	bl	80058a0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000228:	f004 ff32 	bl	8005090 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000230:	491e      	ldr	r1, [pc, #120]	; (80002ac <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000232:	4a1b      	ldr	r2, [pc, #108]	; (80002a0 <endfiniloop+0x4>)

08000234 <msloop>:
msloop:
                cmp     r1, r2
 8000234:	4291      	cmp	r1, r2
                itt     lo
 8000236:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000238:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800023c:	e7fa      	bcc.n	8000234 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800023e:	491c      	ldr	r1, [pc, #112]	; (80002b0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000240:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <endfiniloop+0x8>)

08000242 <psloop>:
psloop:
                cmp     r1, r2
 8000242:	4291      	cmp	r1, r2
                itt     lo
 8000244:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000246:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800024a:	e7fa      	bcc.n	8000242 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800024c:	4919      	ldr	r1, [pc, #100]	; (80002b4 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800024e:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <endfiniloop+0x20>)

08000252 <dloop>:
dloop:
                cmp     r2, r3
 8000252:	429a      	cmp	r2, r3
                ittt    lo
 8000254:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000256:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800025a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800025e:	e7f8      	bcc.n	8000252 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000260:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000262:	4917      	ldr	r1, [pc, #92]	; (80002c0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000264:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <endfiniloop+0x28>)

08000266 <bloop>:
bloop:
                cmp     r1, r2
 8000266:	4291      	cmp	r1, r2
                itt     lo
 8000268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800026e:	e7fa      	bcc.n	8000266 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000270:	f005 face 	bl	8005810 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000274:	f005 fb0c 	bl	8005890 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000278:	4c13      	ldr	r4, [pc, #76]	; (80002c8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800027a:	4d14      	ldr	r5, [pc, #80]	; (80002cc <endfiniloop+0x30>)

0800027c <initloop>:
initloop:
                cmp     r4, r5
 800027c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800027e:	da03      	bge.n	8000288 <endinitloop>
                ldr     r1, [r4], #4
 8000280:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000284:	4788      	blx	r1
                b       initloop
 8000286:	e7f9      	b.n	800027c <initloop>

08000288 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000288:	f004 fa92 	bl	80047b0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800028c:	4c10      	ldr	r4, [pc, #64]	; (80002d0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800028e:	4d11      	ldr	r5, [pc, #68]	; (80002d4 <endfiniloop+0x38>)

08000290 <finiloop>:
finiloop:
                cmp     r4, r5
 8000290:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000292:	da03      	bge.n	800029c <endfiniloop>
                ldr     r1, [r4], #4
 8000294:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000298:	4788      	blx	r1
                b       finiloop
 800029a:	e7f9      	b.n	8000290 <finiloop>

0800029c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800029c:	f005 baf0 	b.w	8005880 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002a0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002a4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002a8:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 80002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002b0:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 80002b4:	080066f8 	.word	0x080066f8
                ldr     r2, =__data_base__
 80002b8:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 80002bc:	20000c68 	.word	0x20000c68
                ldr     r1, =__bss_base__
 80002c0:	20000c68 	.word	0x20000c68
                ldr     r2, =__bss_end__
 80002c4:	200021e0 	.word	0x200021e0
                ldr     r4, =__init_array_base__
 80002c8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002cc:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002d0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002d4:	080001e0 	.word	0x080001e0

080002d8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002d8:	e792      	b.n	8000200 <_crt0_entry>

080002da <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002da:	f000 f800 	bl	80002de <_unhandled_exception>

080002de <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002de:	e7fe      	b.n	80002de <_unhandled_exception>

080002e0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002e4:	f8c1 d014 	str.w	sp, [r1, #20]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002e8:	6943      	ldr	r3, [r0, #20]
                mov     sp, r3
 80002ea:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002f0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002f0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002f2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002f6:	4628      	mov	r0, r5
                blx     r4
 80002f8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002fa:	2000      	movs	r0, #0
                bl      chThdExit
 80002fc:	f004 f8b0 	bl	8004460 <chThdExit>

08000300 <_zombies>:
_zombies:       b       _zombies
 8000300:	e7fe      	b.n	8000300 <_zombies>

08000302 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000302:	f004 f8b5 	bl	8004470 <chSchDoReschedule>

08000306 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000306:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000308:	e7fe      	b.n	8000308 <_port_exit_from_isr+0x2>
	...

0800030c <memcpy>:
 800030c:	4684      	mov	ip, r0
 800030e:	ea41 0300 	orr.w	r3, r1, r0
 8000312:	f013 0303 	ands.w	r3, r3, #3
 8000316:	d16d      	bne.n	80003f4 <memcpy+0xe8>
 8000318:	3a40      	subs	r2, #64	; 0x40
 800031a:	d341      	bcc.n	80003a0 <memcpy+0x94>
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	3a40      	subs	r2, #64	; 0x40
 800039e:	d2bd      	bcs.n	800031c <memcpy+0x10>
 80003a0:	3230      	adds	r2, #48	; 0x30
 80003a2:	d311      	bcc.n	80003c8 <memcpy+0xbc>
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	3a10      	subs	r2, #16
 80003c6:	d2ed      	bcs.n	80003a4 <memcpy+0x98>
 80003c8:	320c      	adds	r2, #12
 80003ca:	d305      	bcc.n	80003d8 <memcpy+0xcc>
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	3a04      	subs	r2, #4
 80003d6:	d2f9      	bcs.n	80003cc <memcpy+0xc0>
 80003d8:	3204      	adds	r2, #4
 80003da:	d008      	beq.n	80003ee <memcpy+0xe2>
 80003dc:	07d2      	lsls	r2, r2, #31
 80003de:	bf1c      	itt	ne
 80003e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003e4:	f800 3b01 	strbne.w	r3, [r0], #1
 80003e8:	d301      	bcc.n	80003ee <memcpy+0xe2>
 80003ea:	880b      	ldrh	r3, [r1, #0]
 80003ec:	8003      	strh	r3, [r0, #0]
 80003ee:	4660      	mov	r0, ip
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	2a08      	cmp	r2, #8
 80003f6:	d313      	bcc.n	8000420 <memcpy+0x114>
 80003f8:	078b      	lsls	r3, r1, #30
 80003fa:	d08d      	beq.n	8000318 <memcpy+0xc>
 80003fc:	f010 0303 	ands.w	r3, r0, #3
 8000400:	d08a      	beq.n	8000318 <memcpy+0xc>
 8000402:	f1c3 0304 	rsb	r3, r3, #4
 8000406:	1ad2      	subs	r2, r2, r3
 8000408:	07db      	lsls	r3, r3, #31
 800040a:	bf1c      	itt	ne
 800040c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000410:	f800 3b01 	strbne.w	r3, [r0], #1
 8000414:	d380      	bcc.n	8000318 <memcpy+0xc>
 8000416:	f831 3b02 	ldrh.w	r3, [r1], #2
 800041a:	f820 3b02 	strh.w	r3, [r0], #2
 800041e:	e77b      	b.n	8000318 <memcpy+0xc>
 8000420:	3a04      	subs	r2, #4
 8000422:	d3d9      	bcc.n	80003d8 <memcpy+0xcc>
 8000424:	3a01      	subs	r2, #1
 8000426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800042a:	f800 3b01 	strb.w	r3, [r0], #1
 800042e:	d2f9      	bcs.n	8000424 <memcpy+0x118>
 8000430:	780b      	ldrb	r3, [r1, #0]
 8000432:	7003      	strb	r3, [r0, #0]
 8000434:	784b      	ldrb	r3, [r1, #1]
 8000436:	7043      	strb	r3, [r0, #1]
 8000438:	788b      	ldrb	r3, [r1, #2]
 800043a:	7083      	strb	r3, [r0, #2]
 800043c:	4660      	mov	r0, ip
 800043e:	4770      	bx	lr
 8000440:	eba2 0003 	sub.w	r0, r2, r3
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop

08000448 <strcmp>:
 8000448:	7802      	ldrb	r2, [r0, #0]
 800044a:	780b      	ldrb	r3, [r1, #0]
 800044c:	2a01      	cmp	r2, #1
 800044e:	bf28      	it	cs
 8000450:	429a      	cmpcs	r2, r3
 8000452:	d1f5      	bne.n	8000440 <memcpy+0x134>
 8000454:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000458:	ea40 0401 	orr.w	r4, r0, r1
 800045c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000460:	f06f 0c00 	mvn.w	ip, #0
 8000464:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000468:	b312      	cbz	r2, 80004b0 <strcmp+0x68>
 800046a:	ea80 0401 	eor.w	r4, r0, r1
 800046e:	f014 0f07 	tst.w	r4, #7
 8000472:	d16a      	bne.n	800054a <strcmp+0x102>
 8000474:	f000 0407 	and.w	r4, r0, #7
 8000478:	f020 0007 	bic.w	r0, r0, #7
 800047c:	f004 0503 	and.w	r5, r4, #3
 8000480:	f021 0107 	bic.w	r1, r1, #7
 8000484:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000488:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800048c:	f014 0f04 	tst.w	r4, #4
 8000490:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000494:	fa0c f405 	lsl.w	r4, ip, r5
 8000498:	ea62 0204 	orn	r2, r2, r4
 800049c:	ea66 0604 	orn	r6, r6, r4
 80004a0:	d00a      	beq.n	80004b8 <strcmp+0x70>
 80004a2:	ea63 0304 	orn	r3, r3, r4
 80004a6:	4662      	mov	r2, ip
 80004a8:	ea67 0704 	orn	r7, r7, r4
 80004ac:	4666      	mov	r6, ip
 80004ae:	e003      	b.n	80004b8 <strcmp+0x70>
 80004b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80004b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80004b8:	fa82 f54c 	uadd8	r5, r2, ip
 80004bc:	ea82 0406 	eor.w	r4, r2, r6
 80004c0:	faa4 f48c 	sel	r4, r4, ip
 80004c4:	bb6c      	cbnz	r4, 8000522 <strcmp+0xda>
 80004c6:	fa83 f54c 	uadd8	r5, r3, ip
 80004ca:	ea83 0507 	eor.w	r5, r3, r7
 80004ce:	faa5 f58c 	sel	r5, r5, ip
 80004d2:	b995      	cbnz	r5, 80004fa <strcmp+0xb2>
 80004d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80004d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80004dc:	fa82 f54c 	uadd8	r5, r2, ip
 80004e0:	ea82 0406 	eor.w	r4, r2, r6
 80004e4:	faa4 f48c 	sel	r4, r4, ip
 80004e8:	fa83 f54c 	uadd8	r5, r3, ip
 80004ec:	ea83 0507 	eor.w	r5, r3, r7
 80004f0:	faa5 f58c 	sel	r5, r5, ip
 80004f4:	4325      	orrs	r5, r4
 80004f6:	d0db      	beq.n	80004b0 <strcmp+0x68>
 80004f8:	b99c      	cbnz	r4, 8000522 <strcmp+0xda>
 80004fa:	ba2d      	rev	r5, r5
 80004fc:	fab5 f485 	clz	r4, r5
 8000500:	f024 0407 	bic.w	r4, r4, #7
 8000504:	fa27 f104 	lsr.w	r1, r7, r4
 8000508:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800050c:	fa23 f304 	lsr.w	r3, r3, r4
 8000510:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000514:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000518:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800051c:	eba0 0001 	sub.w	r0, r0, r1
 8000520:	4770      	bx	lr
 8000522:	ba24      	rev	r4, r4
 8000524:	fab4 f484 	clz	r4, r4
 8000528:	f024 0407 	bic.w	r4, r4, #7
 800052c:	fa26 f104 	lsr.w	r1, r6, r4
 8000530:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000534:	fa22 f204 	lsr.w	r2, r2, r4
 8000538:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800053c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000540:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000544:	eba0 0001 	sub.w	r0, r0, r1
 8000548:	4770      	bx	lr
 800054a:	f014 0f03 	tst.w	r4, #3
 800054e:	d13c      	bne.n	80005ca <strcmp+0x182>
 8000550:	f010 0403 	ands.w	r4, r0, #3
 8000554:	d128      	bne.n	80005a8 <strcmp+0x160>
 8000556:	f850 2b08 	ldr.w	r2, [r0], #8
 800055a:	f851 3b08 	ldr.w	r3, [r1], #8
 800055e:	fa82 f54c 	uadd8	r5, r2, ip
 8000562:	ea82 0503 	eor.w	r5, r2, r3
 8000566:	faa5 f58c 	sel	r5, r5, ip
 800056a:	b95d      	cbnz	r5, 8000584 <strcmp+0x13c>
 800056c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000574:	fa82 f54c 	uadd8	r5, r2, ip
 8000578:	ea82 0503 	eor.w	r5, r2, r3
 800057c:	faa5 f58c 	sel	r5, r5, ip
 8000580:	2d00      	cmp	r5, #0
 8000582:	d0e8      	beq.n	8000556 <strcmp+0x10e>
 8000584:	ba2d      	rev	r5, r5
 8000586:	fab5 f485 	clz	r4, r5
 800058a:	f024 0407 	bic.w	r4, r4, #7
 800058e:	fa23 f104 	lsr.w	r1, r3, r4
 8000592:	fa22 f204 	lsr.w	r2, r2, r4
 8000596:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800059a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800059e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80005a2:	eba0 0001 	sub.w	r0, r0, r1
 80005a6:	4770      	bx	lr
 80005a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80005ac:	f020 0003 	bic.w	r0, r0, #3
 80005b0:	f850 2b08 	ldr.w	r2, [r0], #8
 80005b4:	f021 0103 	bic.w	r1, r1, #3
 80005b8:	f851 3b08 	ldr.w	r3, [r1], #8
 80005bc:	fa0c f404 	lsl.w	r4, ip, r4
 80005c0:	ea62 0204 	orn	r2, r2, r4
 80005c4:	ea63 0304 	orn	r3, r3, r4
 80005c8:	e7c9      	b.n	800055e <strcmp+0x116>
 80005ca:	f010 0403 	ands.w	r4, r0, #3
 80005ce:	d01a      	beq.n	8000606 <strcmp+0x1be>
 80005d0:	eba1 0104 	sub.w	r1, r1, r4
 80005d4:	f020 0003 	bic.w	r0, r0, #3
 80005d8:	07e4      	lsls	r4, r4, #31
 80005da:	f850 2b04 	ldr.w	r2, [r0], #4
 80005de:	d006      	beq.n	80005ee <strcmp+0x1a6>
 80005e0:	d20f      	bcs.n	8000602 <strcmp+0x1ba>
 80005e2:	788b      	ldrb	r3, [r1, #2]
 80005e4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80005e8:	1ae4      	subs	r4, r4, r3
 80005ea:	d106      	bne.n	80005fa <strcmp+0x1b2>
 80005ec:	b12b      	cbz	r3, 80005fa <strcmp+0x1b2>
 80005ee:	78cb      	ldrb	r3, [r1, #3]
 80005f0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80005f4:	1ae4      	subs	r4, r4, r3
 80005f6:	d100      	bne.n	80005fa <strcmp+0x1b2>
 80005f8:	b91b      	cbnz	r3, 8000602 <strcmp+0x1ba>
 80005fa:	4620      	mov	r0, r4
 80005fc:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000600:	4770      	bx	lr
 8000602:	f101 0104 	add.w	r1, r1, #4
 8000606:	f850 2b04 	ldr.w	r2, [r0], #4
 800060a:	07cc      	lsls	r4, r1, #31
 800060c:	f021 0103 	bic.w	r1, r1, #3
 8000610:	f851 3b04 	ldr.w	r3, [r1], #4
 8000614:	d848      	bhi.n	80006a8 <strcmp+0x260>
 8000616:	d224      	bcs.n	8000662 <strcmp+0x21a>
 8000618:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800061c:	fa82 f54c 	uadd8	r5, r2, ip
 8000620:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000624:	faa5 f58c 	sel	r5, r5, ip
 8000628:	d10a      	bne.n	8000640 <strcmp+0x1f8>
 800062a:	b965      	cbnz	r5, 8000646 <strcmp+0x1fe>
 800062c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000630:	ea84 0402 	eor.w	r4, r4, r2
 8000634:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000638:	d10e      	bne.n	8000658 <strcmp+0x210>
 800063a:	f850 2b04 	ldr.w	r2, [r0], #4
 800063e:	e7eb      	b.n	8000618 <strcmp+0x1d0>
 8000640:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000644:	e055      	b.n	80006f2 <strcmp+0x2aa>
 8000646:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800064a:	d14d      	bne.n	80006e8 <strcmp+0x2a0>
 800064c:	7808      	ldrb	r0, [r1, #0]
 800064e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000652:	f1c0 0000 	rsb	r0, r0, #0
 8000656:	4770      	bx	lr
 8000658:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800065c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000660:	e047      	b.n	80006f2 <strcmp+0x2aa>
 8000662:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000666:	fa82 f54c 	uadd8	r5, r2, ip
 800066a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800066e:	faa5 f58c 	sel	r5, r5, ip
 8000672:	d10a      	bne.n	800068a <strcmp+0x242>
 8000674:	b965      	cbnz	r5, 8000690 <strcmp+0x248>
 8000676:	f851 3b04 	ldr.w	r3, [r1], #4
 800067a:	ea84 0402 	eor.w	r4, r4, r2
 800067e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000682:	d10c      	bne.n	800069e <strcmp+0x256>
 8000684:	f850 2b04 	ldr.w	r2, [r0], #4
 8000688:	e7eb      	b.n	8000662 <strcmp+0x21a>
 800068a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800068e:	e030      	b.n	80006f2 <strcmp+0x2aa>
 8000690:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000694:	d128      	bne.n	80006e8 <strcmp+0x2a0>
 8000696:	880b      	ldrh	r3, [r1, #0]
 8000698:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800069c:	e029      	b.n	80006f2 <strcmp+0x2aa>
 800069e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80006a2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 80006a6:	e024      	b.n	80006f2 <strcmp+0x2aa>
 80006a8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80006ac:	fa82 f54c 	uadd8	r5, r2, ip
 80006b0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 80006b4:	faa5 f58c 	sel	r5, r5, ip
 80006b8:	d10a      	bne.n	80006d0 <strcmp+0x288>
 80006ba:	b965      	cbnz	r5, 80006d6 <strcmp+0x28e>
 80006bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c0:	ea84 0402 	eor.w	r4, r4, r2
 80006c4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 80006c8:	d109      	bne.n	80006de <strcmp+0x296>
 80006ca:	f850 2b04 	ldr.w	r2, [r0], #4
 80006ce:	e7eb      	b.n	80006a8 <strcmp+0x260>
 80006d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80006d4:	e00d      	b.n	80006f2 <strcmp+0x2aa>
 80006d6:	f015 0fff 	tst.w	r5, #255	; 0xff
 80006da:	d105      	bne.n	80006e8 <strcmp+0x2a0>
 80006dc:	680b      	ldr	r3, [r1, #0]
 80006de:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80006e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006e6:	e004      	b.n	80006f2 <strcmp+0x2aa>
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006f0:	4770      	bx	lr
 80006f2:	ba12      	rev	r2, r2
 80006f4:	ba1b      	rev	r3, r3
 80006f6:	fa82 f44c 	uadd8	r4, r2, ip
 80006fa:	ea82 0403 	eor.w	r4, r2, r3
 80006fe:	faa4 f58c 	sel	r5, r4, ip
 8000702:	fab5 f485 	clz	r4, r5
 8000706:	fa02 f204 	lsl.w	r2, r2, r4
 800070a:	fa03 f304 	lsl.w	r3, r3, r4
 800070e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8000712:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000716:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800071a:	4770      	bx	lr
	...

08000740 <strlen>:
 8000740:	f890 f000 	pld	[r0]
 8000744:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000748:	f020 0107 	bic.w	r1, r0, #7
 800074c:	f06f 0c00 	mvn.w	ip, #0
 8000750:	f010 0407 	ands.w	r4, r0, #7
 8000754:	f891 f020 	pld	[r1, #32]
 8000758:	f040 8049 	bne.w	80007ee <strlen+0xae>
 800075c:	f04f 0400 	mov.w	r4, #0
 8000760:	f06f 0007 	mvn.w	r0, #7
 8000764:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000768:	f891 f040 	pld	[r1, #64]	; 0x40
 800076c:	f100 0008 	add.w	r0, r0, #8
 8000770:	fa82 f24c 	uadd8	r2, r2, ip
 8000774:	faa4 f28c 	sel	r2, r4, ip
 8000778:	fa83 f34c 	uadd8	r3, r3, ip
 800077c:	faa2 f38c 	sel	r3, r2, ip
 8000780:	bb4b      	cbnz	r3, 80007d6 <strlen+0x96>
 8000782:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000786:	fa82 f24c 	uadd8	r2, r2, ip
 800078a:	f100 0008 	add.w	r0, r0, #8
 800078e:	faa4 f28c 	sel	r2, r4, ip
 8000792:	fa83 f34c 	uadd8	r3, r3, ip
 8000796:	faa2 f38c 	sel	r3, r2, ip
 800079a:	b9e3      	cbnz	r3, 80007d6 <strlen+0x96>
 800079c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80007a0:	fa82 f24c 	uadd8	r2, r2, ip
 80007a4:	f100 0008 	add.w	r0, r0, #8
 80007a8:	faa4 f28c 	sel	r2, r4, ip
 80007ac:	fa83 f34c 	uadd8	r3, r3, ip
 80007b0:	faa2 f38c 	sel	r3, r2, ip
 80007b4:	b97b      	cbnz	r3, 80007d6 <strlen+0x96>
 80007b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80007ba:	f101 0120 	add.w	r1, r1, #32
 80007be:	fa82 f24c 	uadd8	r2, r2, ip
 80007c2:	f100 0008 	add.w	r0, r0, #8
 80007c6:	faa4 f28c 	sel	r2, r4, ip
 80007ca:	fa83 f34c 	uadd8	r3, r3, ip
 80007ce:	faa2 f38c 	sel	r3, r2, ip
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0c6      	beq.n	8000764 <strlen+0x24>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	bf04      	itt	eq
 80007da:	3004      	addeq	r0, #4
 80007dc:	461a      	moveq	r2, r3
 80007de:	ba12      	rev	r2, r2
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80007e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80007ec:	4770      	bx	lr
 80007ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80007f2:	f004 0503 	and.w	r5, r4, #3
 80007f6:	f1c4 0000 	rsb	r0, r4, #0
 80007fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80007fe:	f014 0f04 	tst.w	r4, #4
 8000802:	f891 f040 	pld	[r1, #64]	; 0x40
 8000806:	fa0c f505 	lsl.w	r5, ip, r5
 800080a:	ea62 0205 	orn	r2, r2, r5
 800080e:	bf1c      	itt	ne
 8000810:	ea63 0305 	ornne	r3, r3, r5
 8000814:	4662      	movne	r2, ip
 8000816:	f04f 0400 	mov.w	r4, #0
 800081a:	e7a9      	b.n	8000770 <strlen+0x30>

0800081c <__aeabi_drsub>:
 800081c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000820:	e002      	b.n	8000828 <__adddf3>
 8000822:	bf00      	nop

08000824 <__aeabi_dsub>:
 8000824:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000828 <__adddf3>:
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800082e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000832:	ea94 0f05 	teq	r4, r5
 8000836:	bf08      	it	eq
 8000838:	ea90 0f02 	teqeq	r0, r2
 800083c:	bf1f      	itttt	ne
 800083e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000842:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000846:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800084a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800084e:	f000 80e2 	beq.w	8000a16 <__adddf3+0x1ee>
 8000852:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000856:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800085a:	bfb8      	it	lt
 800085c:	426d      	neglt	r5, r5
 800085e:	dd0c      	ble.n	800087a <__adddf3+0x52>
 8000860:	442c      	add	r4, r5
 8000862:	ea80 0202 	eor.w	r2, r0, r2
 8000866:	ea81 0303 	eor.w	r3, r1, r3
 800086a:	ea82 0000 	eor.w	r0, r2, r0
 800086e:	ea83 0101 	eor.w	r1, r3, r1
 8000872:	ea80 0202 	eor.w	r2, r0, r2
 8000876:	ea81 0303 	eor.w	r3, r1, r3
 800087a:	2d36      	cmp	r5, #54	; 0x36
 800087c:	bf88      	it	hi
 800087e:	bd30      	pophi	{r4, r5, pc}
 8000880:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000884:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000888:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800088c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000890:	d002      	beq.n	8000898 <__adddf3+0x70>
 8000892:	4240      	negs	r0, r0
 8000894:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000898:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800089c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80008a4:	d002      	beq.n	80008ac <__adddf3+0x84>
 80008a6:	4252      	negs	r2, r2
 80008a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008ac:	ea94 0f05 	teq	r4, r5
 80008b0:	f000 80a7 	beq.w	8000a02 <__adddf3+0x1da>
 80008b4:	f1a4 0401 	sub.w	r4, r4, #1
 80008b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80008bc:	db0d      	blt.n	80008da <__adddf3+0xb2>
 80008be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80008c2:	fa22 f205 	lsr.w	r2, r2, r5
 80008c6:	1880      	adds	r0, r0, r2
 80008c8:	f141 0100 	adc.w	r1, r1, #0
 80008cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80008d0:	1880      	adds	r0, r0, r2
 80008d2:	fa43 f305 	asr.w	r3, r3, r5
 80008d6:	4159      	adcs	r1, r3
 80008d8:	e00e      	b.n	80008f8 <__adddf3+0xd0>
 80008da:	f1a5 0520 	sub.w	r5, r5, #32
 80008de:	f10e 0e20 	add.w	lr, lr, #32
 80008e2:	2a01      	cmp	r2, #1
 80008e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80008e8:	bf28      	it	cs
 80008ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80008ee:	fa43 f305 	asr.w	r3, r3, r5
 80008f2:	18c0      	adds	r0, r0, r3
 80008f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80008f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008fc:	d507      	bpl.n	800090e <__adddf3+0xe6>
 80008fe:	f04f 0e00 	mov.w	lr, #0
 8000902:	f1dc 0c00 	rsbs	ip, ip, #0
 8000906:	eb7e 0000 	sbcs.w	r0, lr, r0
 800090a:	eb6e 0101 	sbc.w	r1, lr, r1
 800090e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000912:	d31b      	bcc.n	800094c <__adddf3+0x124>
 8000914:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000918:	d30c      	bcc.n	8000934 <__adddf3+0x10c>
 800091a:	0849      	lsrs	r1, r1, #1
 800091c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000920:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000924:	f104 0401 	add.w	r4, r4, #1
 8000928:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800092c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000930:	f080 809a 	bcs.w	8000a68 <__adddf3+0x240>
 8000934:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000938:	bf08      	it	eq
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	ea41 0105 	orr.w	r1, r1, r5
 800094a:	bd30      	pop	{r4, r5, pc}
 800094c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000950:	4140      	adcs	r0, r0
 8000952:	eb41 0101 	adc.w	r1, r1, r1
 8000956:	3c01      	subs	r4, #1
 8000958:	bf28      	it	cs
 800095a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800095e:	d2e9      	bcs.n	8000934 <__adddf3+0x10c>
 8000960:	f091 0f00 	teq	r1, #0
 8000964:	bf04      	itt	eq
 8000966:	4601      	moveq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	fab1 f381 	clz	r3, r1
 800096e:	bf08      	it	eq
 8000970:	3320      	addeq	r3, #32
 8000972:	f1a3 030b 	sub.w	r3, r3, #11
 8000976:	f1b3 0220 	subs.w	r2, r3, #32
 800097a:	da0c      	bge.n	8000996 <__adddf3+0x16e>
 800097c:	320c      	adds	r2, #12
 800097e:	dd08      	ble.n	8000992 <__adddf3+0x16a>
 8000980:	f102 0c14 	add.w	ip, r2, #20
 8000984:	f1c2 020c 	rsb	r2, r2, #12
 8000988:	fa01 f00c 	lsl.w	r0, r1, ip
 800098c:	fa21 f102 	lsr.w	r1, r1, r2
 8000990:	e00c      	b.n	80009ac <__adddf3+0x184>
 8000992:	f102 0214 	add.w	r2, r2, #20
 8000996:	bfd8      	it	le
 8000998:	f1c2 0c20 	rsble	ip, r2, #32
 800099c:	fa01 f102 	lsl.w	r1, r1, r2
 80009a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80009a4:	bfdc      	itt	le
 80009a6:	ea41 010c 	orrle.w	r1, r1, ip
 80009aa:	4090      	lslle	r0, r2
 80009ac:	1ae4      	subs	r4, r4, r3
 80009ae:	bfa2      	ittt	ge
 80009b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80009b4:	4329      	orrge	r1, r5
 80009b6:	bd30      	popge	{r4, r5, pc}
 80009b8:	ea6f 0404 	mvn.w	r4, r4
 80009bc:	3c1f      	subs	r4, #31
 80009be:	da1c      	bge.n	80009fa <__adddf3+0x1d2>
 80009c0:	340c      	adds	r4, #12
 80009c2:	dc0e      	bgt.n	80009e2 <__adddf3+0x1ba>
 80009c4:	f104 0414 	add.w	r4, r4, #20
 80009c8:	f1c4 0220 	rsb	r2, r4, #32
 80009cc:	fa20 f004 	lsr.w	r0, r0, r4
 80009d0:	fa01 f302 	lsl.w	r3, r1, r2
 80009d4:	ea40 0003 	orr.w	r0, r0, r3
 80009d8:	fa21 f304 	lsr.w	r3, r1, r4
 80009dc:	ea45 0103 	orr.w	r1, r5, r3
 80009e0:	bd30      	pop	{r4, r5, pc}
 80009e2:	f1c4 040c 	rsb	r4, r4, #12
 80009e6:	f1c4 0220 	rsb	r2, r4, #32
 80009ea:	fa20 f002 	lsr.w	r0, r0, r2
 80009ee:	fa01 f304 	lsl.w	r3, r1, r4
 80009f2:	ea40 0003 	orr.w	r0, r0, r3
 80009f6:	4629      	mov	r1, r5
 80009f8:	bd30      	pop	{r4, r5, pc}
 80009fa:	fa21 f004 	lsr.w	r0, r1, r4
 80009fe:	4629      	mov	r1, r5
 8000a00:	bd30      	pop	{r4, r5, pc}
 8000a02:	f094 0f00 	teq	r4, #0
 8000a06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000a0a:	bf06      	itte	eq
 8000a0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000a10:	3401      	addeq	r4, #1
 8000a12:	3d01      	subne	r5, #1
 8000a14:	e74e      	b.n	80008b4 <__adddf3+0x8c>
 8000a16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a1a:	bf18      	it	ne
 8000a1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000a20:	d029      	beq.n	8000a76 <__adddf3+0x24e>
 8000a22:	ea94 0f05 	teq	r4, r5
 8000a26:	bf08      	it	eq
 8000a28:	ea90 0f02 	teqeq	r0, r2
 8000a2c:	d005      	beq.n	8000a3a <__adddf3+0x212>
 8000a2e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000a32:	bf04      	itt	eq
 8000a34:	4619      	moveq	r1, r3
 8000a36:	4610      	moveq	r0, r2
 8000a38:	bd30      	pop	{r4, r5, pc}
 8000a3a:	ea91 0f03 	teq	r1, r3
 8000a3e:	bf1e      	ittt	ne
 8000a40:	2100      	movne	r1, #0
 8000a42:	2000      	movne	r0, #0
 8000a44:	bd30      	popne	{r4, r5, pc}
 8000a46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000a4a:	d105      	bne.n	8000a58 <__adddf3+0x230>
 8000a4c:	0040      	lsls	r0, r0, #1
 8000a4e:	4149      	adcs	r1, r1
 8000a50:	bf28      	it	cs
 8000a52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000a56:	bd30      	pop	{r4, r5, pc}
 8000a58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000a5c:	bf3c      	itt	cc
 8000a5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000a62:	bd30      	popcc	{r4, r5, pc}
 8000a64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000a68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000a6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	bd30      	pop	{r4, r5, pc}
 8000a76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a7a:	bf1a      	itte	ne
 8000a7c:	4619      	movne	r1, r3
 8000a7e:	4610      	movne	r0, r2
 8000a80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000a84:	bf1c      	itt	ne
 8000a86:	460b      	movne	r3, r1
 8000a88:	4602      	movne	r2, r0
 8000a8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a8e:	bf06      	itte	eq
 8000a90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000a94:	ea91 0f03 	teqeq	r1, r3
 8000a98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000a9c:	bd30      	pop	{r4, r5, pc}
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_ui2d>:
 8000aa0:	f090 0f00 	teq	r0, #0
 8000aa4:	bf04      	itt	eq
 8000aa6:	2100      	moveq	r1, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	b530      	push	{r4, r5, lr}
 8000aac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000ab0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000ab4:	f04f 0500 	mov.w	r5, #0
 8000ab8:	f04f 0100 	mov.w	r1, #0
 8000abc:	e750      	b.n	8000960 <__adddf3+0x138>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_i2d>:
 8000ac0:	f090 0f00 	teq	r0, #0
 8000ac4:	bf04      	itt	eq
 8000ac6:	2100      	moveq	r1, #0
 8000ac8:	4770      	bxeq	lr
 8000aca:	b530      	push	{r4, r5, lr}
 8000acc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000ad0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000ad4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000ad8:	bf48      	it	mi
 8000ada:	4240      	negmi	r0, r0
 8000adc:	f04f 0100 	mov.w	r1, #0
 8000ae0:	e73e      	b.n	8000960 <__adddf3+0x138>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_f2d>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000aea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000af2:	bf1f      	itttt	ne
 8000af4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000af8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000afc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000b00:	4770      	bxne	lr
 8000b02:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000b06:	bf08      	it	eq
 8000b08:	4770      	bxeq	lr
 8000b0a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000b0e:	bf04      	itt	eq
 8000b10:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000b14:	4770      	bxeq	lr
 8000b16:	b530      	push	{r4, r5, lr}
 8000b18:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000b1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000b20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000b24:	e71c      	b.n	8000960 <__adddf3+0x138>
 8000b26:	bf00      	nop

08000b28 <__aeabi_ul2d>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	b530      	push	{r4, r5, lr}
 8000b32:	f04f 0500 	mov.w	r5, #0
 8000b36:	e00a      	b.n	8000b4e <__aeabi_l2d+0x16>

08000b38 <__aeabi_l2d>:
 8000b38:	ea50 0201 	orrs.w	r2, r0, r1
 8000b3c:	bf08      	it	eq
 8000b3e:	4770      	bxeq	lr
 8000b40:	b530      	push	{r4, r5, lr}
 8000b42:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000b46:	d502      	bpl.n	8000b4e <__aeabi_l2d+0x16>
 8000b48:	4240      	negs	r0, r0
 8000b4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000b52:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000b56:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000b5a:	f43f aed8 	beq.w	800090e <__adddf3+0xe6>
 8000b5e:	f04f 0203 	mov.w	r2, #3
 8000b62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b66:	bf18      	it	ne
 8000b68:	3203      	addne	r2, #3
 8000b6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b6e:	bf18      	it	ne
 8000b70:	3203      	addne	r2, #3
 8000b72:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b82:	fa01 fe03 	lsl.w	lr, r1, r3
 8000b86:	ea40 000e 	orr.w	r0, r0, lr
 8000b8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000b8e:	4414      	add	r4, r2
 8000b90:	e6bd      	b.n	800090e <__adddf3+0xe6>
 8000b92:	bf00      	nop

08000b94 <__aeabi_dmul>:
 8000b94:	b570      	push	{r4, r5, r6, lr}
 8000b96:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000b9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000ba2:	bf1d      	ittte	ne
 8000ba4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ba8:	ea94 0f0c 	teqne	r4, ip
 8000bac:	ea95 0f0c 	teqne	r5, ip
 8000bb0:	f000 f8de 	bleq	8000d70 <__aeabi_dmul+0x1dc>
 8000bb4:	442c      	add	r4, r5
 8000bb6:	ea81 0603 	eor.w	r6, r1, r3
 8000bba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000bbe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000bc2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000bc6:	bf18      	it	ne
 8000bc8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000bcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bd4:	d038      	beq.n	8000c48 <__aeabi_dmul+0xb4>
 8000bd6:	fba0 ce02 	umull	ip, lr, r0, r2
 8000bda:	f04f 0500 	mov.w	r5, #0
 8000bde:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000be2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000be6:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000bea:	f04f 0600 	mov.w	r6, #0
 8000bee:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000bf2:	f09c 0f00 	teq	ip, #0
 8000bf6:	bf18      	it	ne
 8000bf8:	f04e 0e01 	orrne.w	lr, lr, #1
 8000bfc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000c00:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000c04:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000c08:	d204      	bcs.n	8000c14 <__aeabi_dmul+0x80>
 8000c0a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000c0e:	416d      	adcs	r5, r5
 8000c10:	eb46 0606 	adc.w	r6, r6, r6
 8000c14:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000c18:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000c1c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000c20:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000c24:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000c28:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000c2c:	bf88      	it	hi
 8000c2e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000c32:	d81e      	bhi.n	8000c72 <__aeabi_dmul+0xde>
 8000c34:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000c38:	bf08      	it	eq
 8000c3a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000c3e:	f150 0000 	adcs.w	r0, r0, #0
 8000c42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c46:	bd70      	pop	{r4, r5, r6, pc}
 8000c48:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000c4c:	ea46 0101 	orr.w	r1, r6, r1
 8000c50:	ea40 0002 	orr.w	r0, r0, r2
 8000c54:	ea81 0103 	eor.w	r1, r1, r3
 8000c58:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000c5c:	bfc2      	ittt	gt
 8000c5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c66:	bd70      	popgt	{r4, r5, r6, pc}
 8000c68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6c:	f04f 0e00 	mov.w	lr, #0
 8000c70:	3c01      	subs	r4, #1
 8000c72:	f300 80ab 	bgt.w	8000dcc <__aeabi_dmul+0x238>
 8000c76:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000c7a:	bfde      	ittt	le
 8000c7c:	2000      	movle	r0, #0
 8000c7e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000c82:	bd70      	pople	{r4, r5, r6, pc}
 8000c84:	f1c4 0400 	rsb	r4, r4, #0
 8000c88:	3c20      	subs	r4, #32
 8000c8a:	da35      	bge.n	8000cf8 <__aeabi_dmul+0x164>
 8000c8c:	340c      	adds	r4, #12
 8000c8e:	dc1b      	bgt.n	8000cc8 <__aeabi_dmul+0x134>
 8000c90:	f104 0414 	add.w	r4, r4, #20
 8000c94:	f1c4 0520 	rsb	r5, r4, #32
 8000c98:	fa00 f305 	lsl.w	r3, r0, r5
 8000c9c:	fa20 f004 	lsr.w	r0, r0, r4
 8000ca0:	fa01 f205 	lsl.w	r2, r1, r5
 8000ca4:	ea40 0002 	orr.w	r0, r0, r2
 8000ca8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000cac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000cb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000cb4:	fa21 f604 	lsr.w	r6, r1, r4
 8000cb8:	eb42 0106 	adc.w	r1, r2, r6
 8000cbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000cc0:	bf08      	it	eq
 8000cc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000cc6:	bd70      	pop	{r4, r5, r6, pc}
 8000cc8:	f1c4 040c 	rsb	r4, r4, #12
 8000ccc:	f1c4 0520 	rsb	r5, r4, #32
 8000cd0:	fa00 f304 	lsl.w	r3, r0, r4
 8000cd4:	fa20 f005 	lsr.w	r0, r0, r5
 8000cd8:	fa01 f204 	lsl.w	r2, r1, r4
 8000cdc:	ea40 0002 	orr.w	r0, r0, r2
 8000ce0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ce4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000ce8:	f141 0100 	adc.w	r1, r1, #0
 8000cec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000cf0:	bf08      	it	eq
 8000cf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000cf6:	bd70      	pop	{r4, r5, r6, pc}
 8000cf8:	f1c4 0520 	rsb	r5, r4, #32
 8000cfc:	fa00 f205 	lsl.w	r2, r0, r5
 8000d00:	ea4e 0e02 	orr.w	lr, lr, r2
 8000d04:	fa20 f304 	lsr.w	r3, r0, r4
 8000d08:	fa01 f205 	lsl.w	r2, r1, r5
 8000d0c:	ea43 0302 	orr.w	r3, r3, r2
 8000d10:	fa21 f004 	lsr.w	r0, r1, r4
 8000d14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000d18:	fa21 f204 	lsr.w	r2, r1, r4
 8000d1c:	ea20 0002 	bic.w	r0, r0, r2
 8000d20:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000d24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000d28:	bf08      	it	eq
 8000d2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}
 8000d30:	f094 0f00 	teq	r4, #0
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_dmul+0x1c2>
 8000d36:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000d3a:	0040      	lsls	r0, r0, #1
 8000d3c:	eb41 0101 	adc.w	r1, r1, r1
 8000d40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000d44:	bf08      	it	eq
 8000d46:	3c01      	subeq	r4, #1
 8000d48:	d0f7      	beq.n	8000d3a <__aeabi_dmul+0x1a6>
 8000d4a:	ea41 0106 	orr.w	r1, r1, r6
 8000d4e:	f095 0f00 	teq	r5, #0
 8000d52:	bf18      	it	ne
 8000d54:	4770      	bxne	lr
 8000d56:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000d5a:	0052      	lsls	r2, r2, #1
 8000d5c:	eb43 0303 	adc.w	r3, r3, r3
 8000d60:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000d64:	bf08      	it	eq
 8000d66:	3d01      	subeq	r5, #1
 8000d68:	d0f7      	beq.n	8000d5a <__aeabi_dmul+0x1c6>
 8000d6a:	ea43 0306 	orr.w	r3, r3, r6
 8000d6e:	4770      	bx	lr
 8000d70:	ea94 0f0c 	teq	r4, ip
 8000d74:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000d78:	bf18      	it	ne
 8000d7a:	ea95 0f0c 	teqne	r5, ip
 8000d7e:	d00c      	beq.n	8000d9a <__aeabi_dmul+0x206>
 8000d80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d84:	bf18      	it	ne
 8000d86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d8a:	d1d1      	bne.n	8000d30 <__aeabi_dmul+0x19c>
 8000d8c:	ea81 0103 	eor.w	r1, r1, r3
 8000d90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000d94:	f04f 0000 	mov.w	r0, #0
 8000d98:	bd70      	pop	{r4, r5, r6, pc}
 8000d9a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d9e:	bf06      	itte	eq
 8000da0:	4610      	moveq	r0, r2
 8000da2:	4619      	moveq	r1, r3
 8000da4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000da8:	d019      	beq.n	8000dde <__aeabi_dmul+0x24a>
 8000daa:	ea94 0f0c 	teq	r4, ip
 8000dae:	d102      	bne.n	8000db6 <__aeabi_dmul+0x222>
 8000db0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000db4:	d113      	bne.n	8000dde <__aeabi_dmul+0x24a>
 8000db6:	ea95 0f0c 	teq	r5, ip
 8000dba:	d105      	bne.n	8000dc8 <__aeabi_dmul+0x234>
 8000dbc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000dc0:	bf1c      	itt	ne
 8000dc2:	4610      	movne	r0, r2
 8000dc4:	4619      	movne	r1, r3
 8000dc6:	d10a      	bne.n	8000dde <__aeabi_dmul+0x24a>
 8000dc8:	ea81 0103 	eor.w	r1, r1, r3
 8000dcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000dd0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000dd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000dd8:	f04f 0000 	mov.w	r0, #0
 8000ddc:	bd70      	pop	{r4, r5, r6, pc}
 8000dde:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000de2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000de6:	bd70      	pop	{r4, r5, r6, pc}

08000de8 <__aeabi_ddiv>:
 8000de8:	b570      	push	{r4, r5, r6, lr}
 8000dea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000df2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000df6:	bf1d      	ittte	ne
 8000df8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000dfc:	ea94 0f0c 	teqne	r4, ip
 8000e00:	ea95 0f0c 	teqne	r5, ip
 8000e04:	f000 f8a7 	bleq	8000f56 <__aeabi_ddiv+0x16e>
 8000e08:	eba4 0405 	sub.w	r4, r4, r5
 8000e0c:	ea81 0e03 	eor.w	lr, r1, r3
 8000e10:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000e14:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000e18:	f000 8088 	beq.w	8000f2c <__aeabi_ddiv+0x144>
 8000e1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000e20:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000e24:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000e28:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000e2c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000e30:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000e34:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000e38:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000e3c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000e40:	429d      	cmp	r5, r3
 8000e42:	bf08      	it	eq
 8000e44:	4296      	cmpeq	r6, r2
 8000e46:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000e4a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000e4e:	d202      	bcs.n	8000e56 <__aeabi_ddiv+0x6e>
 8000e50:	085b      	lsrs	r3, r3, #1
 8000e52:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e56:	1ab6      	subs	r6, r6, r2
 8000e58:	eb65 0503 	sbc.w	r5, r5, r3
 8000e5c:	085b      	lsrs	r3, r3, #1
 8000e5e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e62:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000e66:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000e6a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e72:	bf22      	ittt	cs
 8000e74:	1ab6      	subcs	r6, r6, r2
 8000e76:	4675      	movcs	r5, lr
 8000e78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e7c:	085b      	lsrs	r3, r3, #1
 8000e7e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e82:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e86:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e8a:	bf22      	ittt	cs
 8000e8c:	1ab6      	subcs	r6, r6, r2
 8000e8e:	4675      	movcs	r5, lr
 8000e90:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e94:	085b      	lsrs	r3, r3, #1
 8000e96:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e9a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e9e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ea2:	bf22      	ittt	cs
 8000ea4:	1ab6      	subcs	r6, r6, r2
 8000ea6:	4675      	movcs	r5, lr
 8000ea8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eac:	085b      	lsrs	r3, r3, #1
 8000eae:	ea4f 0232 	mov.w	r2, r2, rrx
 8000eb2:	ebb6 0e02 	subs.w	lr, r6, r2
 8000eb6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000eba:	bf22      	ittt	cs
 8000ebc:	1ab6      	subcs	r6, r6, r2
 8000ebe:	4675      	movcs	r5, lr
 8000ec0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec4:	ea55 0e06 	orrs.w	lr, r5, r6
 8000ec8:	d018      	beq.n	8000efc <__aeabi_ddiv+0x114>
 8000eca:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000ece:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000ed2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000ed6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000eda:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000ede:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000ee2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000ee6:	d1c0      	bne.n	8000e6a <__aeabi_ddiv+0x82>
 8000ee8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000eec:	d10b      	bne.n	8000f06 <__aeabi_ddiv+0x11e>
 8000eee:	ea41 0100 	orr.w	r1, r1, r0
 8000ef2:	f04f 0000 	mov.w	r0, #0
 8000ef6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000efa:	e7b6      	b.n	8000e6a <__aeabi_ddiv+0x82>
 8000efc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000f00:	bf04      	itt	eq
 8000f02:	4301      	orreq	r1, r0
 8000f04:	2000      	moveq	r0, #0
 8000f06:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000f0a:	bf88      	it	hi
 8000f0c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000f10:	f63f aeaf 	bhi.w	8000c72 <__aeabi_dmul+0xde>
 8000f14:	ebb5 0c03 	subs.w	ip, r5, r3
 8000f18:	bf04      	itt	eq
 8000f1a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000f1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000f22:	f150 0000 	adcs.w	r0, r0, #0
 8000f26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000f2a:	bd70      	pop	{r4, r5, r6, pc}
 8000f2c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000f30:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000f34:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000f38:	bfc2      	ittt	gt
 8000f3a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000f3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000f42:	bd70      	popgt	{r4, r5, r6, pc}
 8000f44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000f48:	f04f 0e00 	mov.w	lr, #0
 8000f4c:	3c01      	subs	r4, #1
 8000f4e:	e690      	b.n	8000c72 <__aeabi_dmul+0xde>
 8000f50:	ea45 0e06 	orr.w	lr, r5, r6
 8000f54:	e68d      	b.n	8000c72 <__aeabi_dmul+0xde>
 8000f56:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000f5a:	ea94 0f0c 	teq	r4, ip
 8000f5e:	bf08      	it	eq
 8000f60:	ea95 0f0c 	teqeq	r5, ip
 8000f64:	f43f af3b 	beq.w	8000dde <__aeabi_dmul+0x24a>
 8000f68:	ea94 0f0c 	teq	r4, ip
 8000f6c:	d10a      	bne.n	8000f84 <__aeabi_ddiv+0x19c>
 8000f6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000f72:	f47f af34 	bne.w	8000dde <__aeabi_dmul+0x24a>
 8000f76:	ea95 0f0c 	teq	r5, ip
 8000f7a:	f47f af25 	bne.w	8000dc8 <__aeabi_dmul+0x234>
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	e72c      	b.n	8000dde <__aeabi_dmul+0x24a>
 8000f84:	ea95 0f0c 	teq	r5, ip
 8000f88:	d106      	bne.n	8000f98 <__aeabi_ddiv+0x1b0>
 8000f8a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000f8e:	f43f aefd 	beq.w	8000d8c <__aeabi_dmul+0x1f8>
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	e722      	b.n	8000dde <__aeabi_dmul+0x24a>
 8000f98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000f9c:	bf18      	it	ne
 8000f9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000fa2:	f47f aec5 	bne.w	8000d30 <__aeabi_dmul+0x19c>
 8000fa6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000faa:	f47f af0d 	bne.w	8000dc8 <__aeabi_dmul+0x234>
 8000fae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000fb2:	f47f aeeb 	bne.w	8000d8c <__aeabi_dmul+0x1f8>
 8000fb6:	e712      	b.n	8000dde <__aeabi_dmul+0x24a>

08000fb8 <__aeabi_d2uiz>:
 8000fb8:	004a      	lsls	r2, r1, #1
 8000fba:	d211      	bcs.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fc0:	d211      	bcs.n	8000fe6 <__aeabi_d2uiz+0x2e>
 8000fc2:	d50d      	bpl.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fcc:	d40e      	bmi.n	8000fec <__aeabi_d2uiz+0x34>
 8000fce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fda:	fa23 f002 	lsr.w	r0, r3, r2
 8000fde:	4770      	bx	lr
 8000fe0:	f04f 0000 	mov.w	r0, #0
 8000fe4:	4770      	bx	lr
 8000fe6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fea:	d102      	bne.n	8000ff2 <__aeabi_d2uiz+0x3a>
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff0:	4770      	bx	lr
 8000ff2:	f04f 0000 	mov.w	r0, #0
 8000ff6:	4770      	bx	lr

08000ff8 <__aeabi_uldivmod>:
 8000ff8:	b953      	cbnz	r3, 8001010 <__aeabi_uldivmod+0x18>
 8000ffa:	b94a      	cbnz	r2, 8001010 <__aeabi_uldivmod+0x18>
 8000ffc:	2900      	cmp	r1, #0
 8000ffe:	bf08      	it	eq
 8001000:	2800      	cmpeq	r0, #0
 8001002:	bf1c      	itt	ne
 8001004:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001008:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800100c:	f000 b96c 	b.w	80012e8 <__aeabi_idiv0>
 8001010:	f1ad 0c08 	sub.w	ip, sp, #8
 8001014:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001018:	f000 f806 	bl	8001028 <__udivmoddi4>
 800101c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001020:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001024:	b004      	add	sp, #16
 8001026:	4770      	bx	lr

08001028 <__udivmoddi4>:
 8001028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800102c:	9e08      	ldr	r6, [sp, #32]
 800102e:	460d      	mov	r5, r1
 8001030:	4604      	mov	r4, r0
 8001032:	468e      	mov	lr, r1
 8001034:	2b00      	cmp	r3, #0
 8001036:	f040 8082 	bne.w	800113e <__udivmoddi4+0x116>
 800103a:	428a      	cmp	r2, r1
 800103c:	4617      	mov	r7, r2
 800103e:	d946      	bls.n	80010ce <__udivmoddi4+0xa6>
 8001040:	fab2 f282 	clz	r2, r2
 8001044:	b14a      	cbz	r2, 800105a <__udivmoddi4+0x32>
 8001046:	f1c2 0120 	rsb	r1, r2, #32
 800104a:	fa05 f302 	lsl.w	r3, r5, r2
 800104e:	fa20 f101 	lsr.w	r1, r0, r1
 8001052:	4097      	lsls	r7, r2
 8001054:	ea41 0e03 	orr.w	lr, r1, r3
 8001058:	4094      	lsls	r4, r2
 800105a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800105e:	0c23      	lsrs	r3, r4, #16
 8001060:	fbbe fcf8 	udiv	ip, lr, r8
 8001064:	b2b9      	uxth	r1, r7
 8001066:	fb08 ee1c 	mls	lr, r8, ip, lr
 800106a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800106e:	fb0c f001 	mul.w	r0, ip, r1
 8001072:	4298      	cmp	r0, r3
 8001074:	d90a      	bls.n	800108c <__udivmoddi4+0x64>
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800107c:	f080 8116 	bcs.w	80012ac <__udivmoddi4+0x284>
 8001080:	4298      	cmp	r0, r3
 8001082:	f240 8113 	bls.w	80012ac <__udivmoddi4+0x284>
 8001086:	f1ac 0c02 	sub.w	ip, ip, #2
 800108a:	443b      	add	r3, r7
 800108c:	1a1b      	subs	r3, r3, r0
 800108e:	b2a4      	uxth	r4, r4
 8001090:	fbb3 f0f8 	udiv	r0, r3, r8
 8001094:	fb08 3310 	mls	r3, r8, r0, r3
 8001098:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800109c:	fb00 f101 	mul.w	r1, r0, r1
 80010a0:	42a1      	cmp	r1, r4
 80010a2:	d909      	bls.n	80010b8 <__udivmoddi4+0x90>
 80010a4:	193c      	adds	r4, r7, r4
 80010a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80010aa:	f080 8101 	bcs.w	80012b0 <__udivmoddi4+0x288>
 80010ae:	42a1      	cmp	r1, r4
 80010b0:	f240 80fe 	bls.w	80012b0 <__udivmoddi4+0x288>
 80010b4:	3802      	subs	r0, #2
 80010b6:	443c      	add	r4, r7
 80010b8:	1a64      	subs	r4, r4, r1
 80010ba:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010be:	2100      	movs	r1, #0
 80010c0:	b11e      	cbz	r6, 80010ca <__udivmoddi4+0xa2>
 80010c2:	40d4      	lsrs	r4, r2
 80010c4:	2300      	movs	r3, #0
 80010c6:	e9c6 4300 	strd	r4, r3, [r6]
 80010ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ce:	b902      	cbnz	r2, 80010d2 <__udivmoddi4+0xaa>
 80010d0:	deff      	udf	#255	; 0xff
 80010d2:	fab2 f282 	clz	r2, r2
 80010d6:	2a00      	cmp	r2, #0
 80010d8:	d14f      	bne.n	800117a <__udivmoddi4+0x152>
 80010da:	1bcb      	subs	r3, r1, r7
 80010dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010e0:	fa1f f887 	uxth.w	r8, r7
 80010e4:	2101      	movs	r1, #1
 80010e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80010ea:	0c25      	lsrs	r5, r4, #16
 80010ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80010f0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80010f4:	fb08 f30c 	mul.w	r3, r8, ip
 80010f8:	42ab      	cmp	r3, r5
 80010fa:	d907      	bls.n	800110c <__udivmoddi4+0xe4>
 80010fc:	197d      	adds	r5, r7, r5
 80010fe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8001102:	d202      	bcs.n	800110a <__udivmoddi4+0xe2>
 8001104:	42ab      	cmp	r3, r5
 8001106:	f200 80e7 	bhi.w	80012d8 <__udivmoddi4+0x2b0>
 800110a:	4684      	mov	ip, r0
 800110c:	1aed      	subs	r5, r5, r3
 800110e:	b2a3      	uxth	r3, r4
 8001110:	fbb5 f0fe 	udiv	r0, r5, lr
 8001114:	fb0e 5510 	mls	r5, lr, r0, r5
 8001118:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800111c:	fb08 f800 	mul.w	r8, r8, r0
 8001120:	45a0      	cmp	r8, r4
 8001122:	d907      	bls.n	8001134 <__udivmoddi4+0x10c>
 8001124:	193c      	adds	r4, r7, r4
 8001126:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800112a:	d202      	bcs.n	8001132 <__udivmoddi4+0x10a>
 800112c:	45a0      	cmp	r8, r4
 800112e:	f200 80d7 	bhi.w	80012e0 <__udivmoddi4+0x2b8>
 8001132:	4618      	mov	r0, r3
 8001134:	eba4 0408 	sub.w	r4, r4, r8
 8001138:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800113c:	e7c0      	b.n	80010c0 <__udivmoddi4+0x98>
 800113e:	428b      	cmp	r3, r1
 8001140:	d908      	bls.n	8001154 <__udivmoddi4+0x12c>
 8001142:	2e00      	cmp	r6, #0
 8001144:	f000 80af 	beq.w	80012a6 <__udivmoddi4+0x27e>
 8001148:	2100      	movs	r1, #0
 800114a:	e9c6 0500 	strd	r0, r5, [r6]
 800114e:	4608      	mov	r0, r1
 8001150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001154:	fab3 f183 	clz	r1, r3
 8001158:	2900      	cmp	r1, #0
 800115a:	d14b      	bne.n	80011f4 <__udivmoddi4+0x1cc>
 800115c:	42ab      	cmp	r3, r5
 800115e:	d302      	bcc.n	8001166 <__udivmoddi4+0x13e>
 8001160:	4282      	cmp	r2, r0
 8001162:	f200 80b7 	bhi.w	80012d4 <__udivmoddi4+0x2ac>
 8001166:	1a84      	subs	r4, r0, r2
 8001168:	eb65 0303 	sbc.w	r3, r5, r3
 800116c:	2001      	movs	r0, #1
 800116e:	469e      	mov	lr, r3
 8001170:	2e00      	cmp	r6, #0
 8001172:	d0aa      	beq.n	80010ca <__udivmoddi4+0xa2>
 8001174:	e9c6 4e00 	strd	r4, lr, [r6]
 8001178:	e7a7      	b.n	80010ca <__udivmoddi4+0xa2>
 800117a:	f1c2 0c20 	rsb	ip, r2, #32
 800117e:	fa01 f302 	lsl.w	r3, r1, r2
 8001182:	4097      	lsls	r7, r2
 8001184:	fa20 f00c 	lsr.w	r0, r0, ip
 8001188:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800118c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8001190:	4318      	orrs	r0, r3
 8001192:	fbbc f1fe 	udiv	r1, ip, lr
 8001196:	0c05      	lsrs	r5, r0, #16
 8001198:	fb0e cc11 	mls	ip, lr, r1, ip
 800119c:	fa1f f887 	uxth.w	r8, r7
 80011a0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80011a4:	fb01 f308 	mul.w	r3, r1, r8
 80011a8:	42ab      	cmp	r3, r5
 80011aa:	fa04 f402 	lsl.w	r4, r4, r2
 80011ae:	d909      	bls.n	80011c4 <__udivmoddi4+0x19c>
 80011b0:	197d      	adds	r5, r7, r5
 80011b2:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 80011b6:	f080 808b 	bcs.w	80012d0 <__udivmoddi4+0x2a8>
 80011ba:	42ab      	cmp	r3, r5
 80011bc:	f240 8088 	bls.w	80012d0 <__udivmoddi4+0x2a8>
 80011c0:	3902      	subs	r1, #2
 80011c2:	443d      	add	r5, r7
 80011c4:	1aeb      	subs	r3, r5, r3
 80011c6:	b285      	uxth	r5, r0
 80011c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80011cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80011d0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80011d4:	fb00 f308 	mul.w	r3, r0, r8
 80011d8:	42ab      	cmp	r3, r5
 80011da:	d907      	bls.n	80011ec <__udivmoddi4+0x1c4>
 80011dc:	197d      	adds	r5, r7, r5
 80011de:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80011e2:	d271      	bcs.n	80012c8 <__udivmoddi4+0x2a0>
 80011e4:	42ab      	cmp	r3, r5
 80011e6:	d96f      	bls.n	80012c8 <__udivmoddi4+0x2a0>
 80011e8:	3802      	subs	r0, #2
 80011ea:	443d      	add	r5, r7
 80011ec:	1aeb      	subs	r3, r5, r3
 80011ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80011f2:	e778      	b.n	80010e6 <__udivmoddi4+0xbe>
 80011f4:	f1c1 0c20 	rsb	ip, r1, #32
 80011f8:	408b      	lsls	r3, r1
 80011fa:	fa22 f70c 	lsr.w	r7, r2, ip
 80011fe:	431f      	orrs	r7, r3
 8001200:	fa20 f40c 	lsr.w	r4, r0, ip
 8001204:	fa05 f301 	lsl.w	r3, r5, r1
 8001208:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800120c:	fa25 f50c 	lsr.w	r5, r5, ip
 8001210:	431c      	orrs	r4, r3
 8001212:	0c23      	lsrs	r3, r4, #16
 8001214:	fbb5 f9fe 	udiv	r9, r5, lr
 8001218:	fa1f f887 	uxth.w	r8, r7
 800121c:	fb0e 5519 	mls	r5, lr, r9, r5
 8001220:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8001224:	fb09 fa08 	mul.w	sl, r9, r8
 8001228:	45aa      	cmp	sl, r5
 800122a:	fa02 f201 	lsl.w	r2, r2, r1
 800122e:	fa00 f301 	lsl.w	r3, r0, r1
 8001232:	d908      	bls.n	8001246 <__udivmoddi4+0x21e>
 8001234:	197d      	adds	r5, r7, r5
 8001236:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800123a:	d247      	bcs.n	80012cc <__udivmoddi4+0x2a4>
 800123c:	45aa      	cmp	sl, r5
 800123e:	d945      	bls.n	80012cc <__udivmoddi4+0x2a4>
 8001240:	f1a9 0902 	sub.w	r9, r9, #2
 8001244:	443d      	add	r5, r7
 8001246:	eba5 050a 	sub.w	r5, r5, sl
 800124a:	b2a4      	uxth	r4, r4
 800124c:	fbb5 f0fe 	udiv	r0, r5, lr
 8001250:	fb0e 5510 	mls	r5, lr, r0, r5
 8001254:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001258:	fb00 f808 	mul.w	r8, r0, r8
 800125c:	45a0      	cmp	r8, r4
 800125e:	d907      	bls.n	8001270 <__udivmoddi4+0x248>
 8001260:	193c      	adds	r4, r7, r4
 8001262:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001266:	d22d      	bcs.n	80012c4 <__udivmoddi4+0x29c>
 8001268:	45a0      	cmp	r8, r4
 800126a:	d92b      	bls.n	80012c4 <__udivmoddi4+0x29c>
 800126c:	3802      	subs	r0, #2
 800126e:	443c      	add	r4, r7
 8001270:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001274:	eba4 0408 	sub.w	r4, r4, r8
 8001278:	fba0 8902 	umull	r8, r9, r0, r2
 800127c:	454c      	cmp	r4, r9
 800127e:	46c6      	mov	lr, r8
 8001280:	464d      	mov	r5, r9
 8001282:	d319      	bcc.n	80012b8 <__udivmoddi4+0x290>
 8001284:	d016      	beq.n	80012b4 <__udivmoddi4+0x28c>
 8001286:	b15e      	cbz	r6, 80012a0 <__udivmoddi4+0x278>
 8001288:	ebb3 020e 	subs.w	r2, r3, lr
 800128c:	eb64 0405 	sbc.w	r4, r4, r5
 8001290:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001294:	40ca      	lsrs	r2, r1
 8001296:	ea4c 0202 	orr.w	r2, ip, r2
 800129a:	40cc      	lsrs	r4, r1
 800129c:	e9c6 2400 	strd	r2, r4, [r6]
 80012a0:	2100      	movs	r1, #0
 80012a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a6:	4631      	mov	r1, r6
 80012a8:	4630      	mov	r0, r6
 80012aa:	e70e      	b.n	80010ca <__udivmoddi4+0xa2>
 80012ac:	46ac      	mov	ip, r5
 80012ae:	e6ed      	b.n	800108c <__udivmoddi4+0x64>
 80012b0:	4618      	mov	r0, r3
 80012b2:	e701      	b.n	80010b8 <__udivmoddi4+0x90>
 80012b4:	4543      	cmp	r3, r8
 80012b6:	d2e6      	bcs.n	8001286 <__udivmoddi4+0x25e>
 80012b8:	ebb8 0e02 	subs.w	lr, r8, r2
 80012bc:	eb69 0507 	sbc.w	r5, r9, r7
 80012c0:	3801      	subs	r0, #1
 80012c2:	e7e0      	b.n	8001286 <__udivmoddi4+0x25e>
 80012c4:	4628      	mov	r0, r5
 80012c6:	e7d3      	b.n	8001270 <__udivmoddi4+0x248>
 80012c8:	4660      	mov	r0, ip
 80012ca:	e78f      	b.n	80011ec <__udivmoddi4+0x1c4>
 80012cc:	4681      	mov	r9, r0
 80012ce:	e7ba      	b.n	8001246 <__udivmoddi4+0x21e>
 80012d0:	4661      	mov	r1, ip
 80012d2:	e777      	b.n	80011c4 <__udivmoddi4+0x19c>
 80012d4:	4608      	mov	r0, r1
 80012d6:	e74b      	b.n	8001170 <__udivmoddi4+0x148>
 80012d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80012dc:	443d      	add	r5, r7
 80012de:	e715      	b.n	800110c <__udivmoddi4+0xe4>
 80012e0:	3802      	subs	r0, #2
 80012e2:	443c      	add	r4, r7
 80012e4:	e726      	b.n	8001134 <__udivmoddi4+0x10c>
 80012e6:	bf00      	nop

080012e8 <__aeabi_idiv0>:
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	0000      	movs	r0, r0
	...

080012f0 <sdObjectInit.constprop.0>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 80012f0:	b4f0      	push	{r4, r5, r6, r7}

  sdp->vmt = &vmt;
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a13      	ldr	r2, [pc, #76]	; (8001344 <sdObjectInit.constprop.0+0x54>)
 80012f6:	f843 2b04 	str.w	r2, [r3], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80012fa:	2201      	movs	r2, #1
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80012fc:	2500      	movs	r5, #0
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80012fe:	f44f 7780 	mov.w	r7, #256	; 0x100
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8001302:	f500 7615 	add.w	r6, r0, #596	; 0x254
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8001306:	f100 040c 	add.w	r4, r0, #12
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 800130a:	6043      	str	r3, [r0, #4]
  oqp->q_notify  = onfy;
 800130c:	64c1      	str	r1, [r0, #76]	; 0x4c
  iqp->q_top     = bp + size;
 800130e:	f500 73aa 	add.w	r3, r0, #340	; 0x154
  sdp->state = SD_STOP;
 8001312:	7202      	strb	r2, [r0, #8]
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8001314:	f100 0130 	add.w	r1, r0, #48	; 0x30
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8001318:	f100 0254 	add.w	r2, r0, #84	; 0x54
  iqp->q_counter = 0;
 800131c:	6145      	str	r5, [r0, #20]
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
  tqp->prev = (thread_t *)tqp;
 800131e:	e9c0 4403 	strd	r4, r4, [r0, #12]
  iqp->q_notify  = infy;
 8001322:	6285      	str	r5, [r0, #40]	; 0x28
  oqp->q_counter = size;
 8001324:	6387      	str	r7, [r0, #56]	; 0x38
  oqp->q_top     = bp + size;
 8001326:	6406      	str	r6, [r0, #64]	; 0x40
  iqp->q_wrptr   = bp;
 8001328:	e9c0 2208 	strd	r2, r2, [r0, #32]
}
 800132c:	bcf0      	pop	{r4, r5, r6, r7}
  oqp->q_wrptr   = bp;
 800132e:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 8001332:	e9c0 110c 	strd	r1, r1, [r0, #48]	; 0x30
  iqp->q_link    = link;
 8001336:	62c0      	str	r0, [r0, #44]	; 0x2c
  oqp->q_link    = link;
 8001338:	6500      	str	r0, [r0, #80]	; 0x50
  iqp->q_buffer  = bp;
 800133a:	6182      	str	r2, [r0, #24]
  iqp->q_top     = bp + size;
 800133c:	61c3      	str	r3, [r0, #28]
  oqp->q_buffer  = bp;
 800133e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	08006598 	.word	0x08006598
	...

08001350 <icu_lld_enable_notifications.constprop.0>:
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_enable_notifications(ICUDriver *icup) {
  uint32_t dier = icup->tim->DIER;
 8001350:	490e      	ldr	r1, [pc, #56]	; (800138c <icu_lld_enable_notifications.constprop.0+0x3c>)
 8001352:	68ca      	ldr	r2, [r1, #12]
 8001354:	68d3      	ldr	r3, [r2, #12]

  /* If interrupts were already enabled then the operation is skipped.
     This is done in order to avoid clearing the SR and risk losing
     pending interrupts.*/
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
 8001356:	f013 00ff 	ands.w	r0, r3, #255	; 0xff
 800135a:	d10c      	bne.n	8001376 <icu_lld_enable_notifications.constprop.0+0x26>
    /* Previously triggered IRQs are ignored, status cleared.*/
    icup->tim->SR = 0;

    if (icup->config->channel == ICU_CHANNEL_1) {
 800135c:	6849      	ldr	r1, [r1, #4]
    icup->tim->SR = 0;
 800135e:	6110      	str	r0, [r2, #16]
    if (icup->config->channel == ICU_CHANNEL_1) {
 8001360:	7d08      	ldrb	r0, [r1, #20]
 8001362:	b948      	cbnz	r0, 8001378 <icu_lld_enable_notifications.constprop.0+0x28>
      /* Enabling periodic callback on CC1.*/
      dier |= STM32_TIM_DIER_CC1IE;

      /* Optionally enabling width callback on CC2.*/
      if (icup->config->width_cb != NULL)
 8001364:	6888      	ldr	r0, [r1, #8]
 8001366:	b168      	cbz	r0, 8001384 <icu_lld_enable_notifications.constprop.0+0x34>
      /* Enabling periodic callback on CC2.*/
      dier |= STM32_TIM_DIER_CC2IE;

      /* Optionally enabling width callback on CC1.*/
      if (icup->config->width_cb != NULL)
        dier |= STM32_TIM_DIER_CC1IE;
 8001368:	f043 0306 	orr.w	r3, r3, #6
    }

    /* If an overflow callback is defined then also the overflow callback
       is enabled.*/
    if (icup->config->overflow_cb != NULL)
 800136c:	6909      	ldr	r1, [r1, #16]
 800136e:	b109      	cbz	r1, 8001374 <icu_lld_enable_notifications.constprop.0+0x24>
      dier |= STM32_TIM_DIER_UIE;
 8001370:	f043 0301 	orr.w	r3, r3, #1

    /* One single atomic write.*/
    icup->tim->DIER = dier;
 8001374:	60d3      	str	r3, [r2, #12]
  }
}
 8001376:	4770      	bx	lr
      if (icup->config->width_cb != NULL)
 8001378:	6888      	ldr	r0, [r1, #8]
 800137a:	2800      	cmp	r0, #0
 800137c:	d1f4      	bne.n	8001368 <icu_lld_enable_notifications.constprop.0+0x18>
      dier |= STM32_TIM_DIER_CC2IE;
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	e7f3      	b.n	800136c <icu_lld_enable_notifications.constprop.0+0x1c>
      dier |= STM32_TIM_DIER_CC1IE;
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	e7f0      	b.n	800136c <icu_lld_enable_notifications.constprop.0+0x1c>
 800138a:	bf00      	nop
 800138c:	20000c80 	.word	0x20000c80

08001390 <sdStart.constprop.0>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8001390:	b430      	push	{r4, r5}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001392:	2320      	movs	r3, #32
 8001394:	f383 8811 	msr	BASEPRI, r3
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8001398:	7a02      	ldrb	r2, [r0, #8]
 800139a:	2a01      	cmp	r2, #1
 800139c:	d045      	beq.n	800142a <sdStart.constprop.0+0x9a>
  USART_TypeDef *u = sdp->usart;
 800139e:	f8d0 3254 	ldr.w	r3, [r0, #596]	; 0x254
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80013a2:	4a42      	ldr	r2, [pc, #264]	; (80014ac <sdStart.constprop.0+0x11c>)
    fck = STM32_PCLK2 / config->speed;
 80013a4:	4942      	ldr	r1, [pc, #264]	; (80014b0 <sdStart.constprop.0+0x120>)
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d02f      	beq.n	800140a <sdStart.constprop.0+0x7a>
 80013aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d02b      	beq.n	800140a <sdStart.constprop.0+0x7a>
  if (config->cr1 & USART_CR1_OVER8)
 80013b2:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
    fck = STM32_PCLK1 / config->speed;
 80013b6:	680c      	ldr	r4, [r1, #0]
 80013b8:	4a3e      	ldr	r2, [pc, #248]	; (80014b4 <sdStart.constprop.0+0x124>)
 80013ba:	fbb2 f2f4 	udiv	r2, r2, r4
  if (config->cr1 & USART_CR1_OVER8)
 80013be:	2d00      	cmp	r5, #0
 80013c0:	888c      	ldrh	r4, [r1, #4]
 80013c2:	db2b      	blt.n	800141c <sdStart.constprop.0+0x8c>
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80013c4:	88cd      	ldrh	r5, [r1, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80013c6:	8909      	ldrh	r1, [r1, #8]
  u->BRR = fck;
 80013c8:	609a      	str	r2, [r3, #8]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80013ca:	f444 5204 	orr.w	r2, r4, #8448	; 0x2100
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 80013ce:	f404 54a0 	and.w	r4, r4, #5120	; 0x1400
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80013d2:	f041 0101 	orr.w	r1, r1, #1
    sdp->rxmask = 0xFF;
 80013d6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80013da:	f045 0540 	orr.w	r5, r5, #64	; 0x40
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80013de:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  u->SR = 0;
 80013e2:	f04f 0400 	mov.w	r4, #0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80013e6:	611d      	str	r5, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80013e8:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80013ea:	60da      	str	r2, [r3, #12]
    sdp->rxmask = 0xFF;
 80013ec:	bf08      	it	eq
 80013ee:	217f      	moveq	r1, #127	; 0x7f
  u->SR = 0;
 80013f0:	601c      	str	r4, [r3, #0]
    sdp->rxmask = 0xFF;
 80013f2:	bf18      	it	ne
 80013f4:	21ff      	movne	r1, #255	; 0xff

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 80013f6:	2202      	movs	r2, #2
  (void)u->SR;  /* SR reset step 1.*/
 80013f8:	681d      	ldr	r5, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f880 1258 	strb.w	r1, [r0, #600]	; 0x258
 8001400:	7202      	strb	r2, [r0, #8]
 8001402:	f384 8811 	msr	BASEPRI, r4
  osalSysUnlock();
}
 8001406:	bc30      	pop	{r4, r5}
 8001408:	4770      	bx	lr
  if (config->cr1 & USART_CR1_OVER8)
 800140a:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
    fck = STM32_PCLK2 / config->speed;
 800140e:	680c      	ldr	r4, [r1, #0]
 8001410:	4a29      	ldr	r2, [pc, #164]	; (80014b8 <sdStart.constprop.0+0x128>)
 8001412:	fbb2 f2f4 	udiv	r2, r2, r4
  if (config->cr1 & USART_CR1_OVER8)
 8001416:	2d00      	cmp	r5, #0
 8001418:	888c      	ldrh	r4, [r1, #4]
 800141a:	dad3      	bge.n	80013c4 <sdStart.constprop.0+0x34>
    fck = ((fck & ~7) * 2) | (fck & 7);
 800141c:	f022 0507 	bic.w	r5, r2, #7
 8001420:	f002 0207 	and.w	r2, r2, #7
 8001424:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8001428:	e7cc      	b.n	80013c4 <sdStart.constprop.0+0x34>
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
 800142a:	4a24      	ldr	r2, [pc, #144]	; (80014bc <sdStart.constprop.0+0x12c>)
 800142c:	4290      	cmp	r0, r2
 800142e:	d02b      	beq.n	8001488 <sdStart.constprop.0+0xf8>
      rccEnableUSART1(true);
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <sdStart.constprop.0+0x130>)
 8001432:	4298      	cmp	r0, r3
 8001434:	d015      	beq.n	8001462 <sdStart.constprop.0+0xd2>
      rccEnableUART5(true);
      nvicEnableVector(STM32_UART5_NUMBER, STM32_SERIAL_UART5_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART6
    if (&SD6 == sdp) {
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <sdStart.constprop.0+0x134>)
 8001438:	4298      	cmp	r0, r3
 800143a:	d1b0      	bne.n	800139e <sdStart.constprop.0+0xe>
      rccEnableUSART6(true);
 800143c:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <sdStart.constprop.0+0x138>)

#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800143e:	4a23      	ldr	r2, [pc, #140]	; (80014cc <sdStart.constprop.0+0x13c>)
 8001440:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001442:	f041 0120 	orr.w	r1, r1, #32
 8001446:	6459      	str	r1, [r3, #68]	; 0x44
 8001448:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800144a:	f041 0120 	orr.w	r1, r1, #32
 800144e:	6659      	str	r1, [r3, #100]	; 0x64
 8001450:	24c0      	movs	r4, #192	; 0xc0
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001452:	2180      	movs	r1, #128	; 0x80
 8001454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8001456:	f882 4347 	strb.w	r4, [r2, #839]	; 0x347
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800145a:	f8c2 1188 	str.w	r1, [r2, #392]	; 0x188
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800145e:	6091      	str	r1, [r2, #8]
 8001460:	e79d      	b.n	800139e <sdStart.constprop.0+0xe>
      rccEnableUSART2(true);
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <sdStart.constprop.0+0x138>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8001464:	4a19      	ldr	r2, [pc, #100]	; (80014cc <sdStart.constprop.0+0x13c>)
 8001466:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001468:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800146c:	6419      	str	r1, [r3, #64]	; 0x40
 800146e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001470:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001474:	6619      	str	r1, [r3, #96]	; 0x60
 8001476:	24c0      	movs	r4, #192	; 0xc0
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001478:	2140      	movs	r1, #64	; 0x40
 800147a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800147c:	f882 4326 	strb.w	r4, [r2, #806]	; 0x326
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001480:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001484:	6051      	str	r1, [r2, #4]
 8001486:	e78a      	b.n	800139e <sdStart.constprop.0+0xe>
      rccEnableUSART1(true);
 8001488:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <sdStart.constprop.0+0x138>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800148a:	4910      	ldr	r1, [pc, #64]	; (80014cc <sdStart.constprop.0+0x13c>)
 800148c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800148e:	f044 0410 	orr.w	r4, r4, #16
 8001492:	6454      	str	r4, [r2, #68]	; 0x44
 8001494:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8001496:	f044 0410 	orr.w	r4, r4, #16
 800149a:	6654      	str	r4, [r2, #100]	; 0x64
 800149c:	24c0      	movs	r4, #192	; 0xc0
 800149e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80014a0:	f881 4325 	strb.w	r4, [r1, #805]	; 0x325
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80014a4:	f8c1 3184 	str.w	r3, [r1, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80014a8:	604b      	str	r3, [r1, #4]
 80014aa:	e778      	b.n	800139e <sdStart.constprop.0+0xe>
 80014ac:	40011000 	.word	0x40011000
 80014b0:	20000828 	.word	0x20000828
 80014b4:	0280de80 	.word	0x0280de80
 80014b8:	0501bd00 	.word	0x0501bd00
 80014bc:	20000c98 	.word	0x20000c98
 80014c0:	20000ef4 	.word	0x20000ef4
 80014c4:	20001150 	.word	0x20001150
 80014c8:	40023800 	.word	0x40023800
 80014cc:	e000e100 	.word	0xe000e100

080014d0 <otg_txfifo_handler.constprop.0>:
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80014d0:	4a22      	ldr	r2, [pc, #136]	; (800155c <otg_txfifo_handler.constprop.0+0x8c>)
 80014d2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
 80014d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80014da:	68d9      	ldr	r1, [r3, #12]
 80014dc:	f8d2 9054 	ldr.w	r9, [r2, #84]	; 0x54
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
 80014e0:	4680      	mov	r8, r0
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80014e2:	6948      	ldr	r0, [r1, #20]
 80014e4:	e9d0 3700 	ldrd	r3, r7, [r0]
 80014e8:	42bb      	cmp	r3, r7
 80014ea:	d928      	bls.n	800153e <otg_txfifo_handler.constprop.0+0x6e>
      return false;

#if STM32_USB_OTGFIFO_FILL_BASEPRI
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 80014ec:	f108 0401 	add.w	r4, r8, #1
    if (n > usbp->epc[ep]->in_maxsize)
 80014f0:	f8b1 e010 	ldrh.w	lr, [r1, #16]
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 80014f4:	eb09 3404 	add.w	r4, r9, r4, lsl #12
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80014f8:	eb09 1c48 	add.w	ip, r9, r8, lsl #5
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 80014fc:	1bde      	subs	r6, r3, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80014fe:	f8dc 2918 	ldr.w	r2, [ip, #2328]	; 0x918
 8001502:	4576      	cmp	r6, lr
 8001504:	bf28      	it	cs
 8001506:	4676      	movcs	r6, lr
 8001508:	b293      	uxth	r3, r2
 800150a:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 800150e:	d821      	bhi.n	8001554 <otg_txfifo_handler.constprop.0+0x84>
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8001510:	6885      	ldr	r5, [r0, #8]
    if (n <= 4) {
 8001512:	2e04      	cmp	r6, #4
    *fifop = *((uint32_t *)buf);
 8001514:	682b      	ldr	r3, [r5, #0]
 8001516:	6023      	str	r3, [r4, #0]
    if (n <= 4) {
 8001518:	d90a      	bls.n	8001530 <otg_txfifo_handler.constprop.0+0x60>
 800151a:	1f71      	subs	r1, r6, #5
 800151c:	f021 0103 	bic.w	r1, r1, #3
 8001520:	3104      	adds	r1, #4
 8001522:	4429      	add	r1, r5
 8001524:	462b      	mov	r3, r5
    *fifop = *((uint32_t *)buf);
 8001526:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800152a:	6022      	str	r2, [r4, #0]
    if (n <= 4) {
 800152c:	4299      	cmp	r1, r3
 800152e:	d1fa      	bne.n	8001526 <otg_txfifo_handler.constprop.0+0x56>
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8001530:	6803      	ldr	r3, [r0, #0]
                               usbp->epc[ep]->in_state->txbuf,
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
    usbp->epc[ep]->in_state->txcnt += n;
 8001532:	4437      	add	r7, r6
    usbp->epc[ep]->in_state->txbuf += n;
 8001534:	4435      	add	r5, r6
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8001536:	42bb      	cmp	r3, r7
    usbp->epc[ep]->in_state->txcnt += n;
 8001538:	e9c0 7501 	strd	r7, r5, [r0, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 800153c:	d8de      	bhi.n	80014fc <otg_txfifo_handler.constprop.0+0x2c>
      usbp->otg->DIEPEMPMSK &= ~DIEPEMPMSK_INEPTXFEM(ep);
 800153e:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
 8001542:	2001      	movs	r0, #1
 8001544:	fa00 f808 	lsl.w	r8, r0, r8
 8001548:	ea23 0308 	bic.w	r3, r3, r8
 800154c:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
  }
}
 8001550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
 8001554:	2000      	movs	r0, #0
}
 8001556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800155a:	bf00      	nop
 800155c:	2000183c 	.word	0x2000183c

08001560 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8001560:	b430      	push	{r4, r5}
 8001562:	2320      	movs	r3, #32
 8001564:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8001568:	4c0b      	ldr	r4, [pc, #44]	; (8001598 <chCoreAllocFromTop+0x38>)
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800156a:	e9d4 3500 	ldrd	r3, r5, [r4]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 800156e:	4249      	negs	r1, r1
 8001570:	1a28      	subs	r0, r5, r0
 8001572:	4008      	ands	r0, r1
  prev = p - offset;
 8001574:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8001576:	429a      	cmp	r2, r3
 8001578:	d307      	bcc.n	800158a <chCoreAllocFromTop+0x2a>
 800157a:	4295      	cmp	r5, r2
 800157c:	d305      	bcc.n	800158a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 800157e:	6062      	str	r2, [r4, #4]
 8001580:	2300      	movs	r3, #0
 8001582:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8001586:	bc30      	pop	{r4, r5}
 8001588:	4770      	bx	lr
    return NULL;
 800158a:	2000      	movs	r0, #0
 800158c:	2300      	movs	r3, #0
 800158e:	f383 8811 	msr	BASEPRI, r3
}
 8001592:	bc30      	pop	{r4, r5}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20001a30 	.word	0x20001a30
 800159c:	00000000 	.word	0x00000000

080015a0 <notify1>:
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80015a0:	4a02      	ldr	r2, [pc, #8]	; (80015ac <notify1+0xc>)
 80015a2:	68d3      	ldr	r3, [r2, #12]
 80015a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015a8:	60d3      	str	r3, [r2, #12]
}
 80015aa:	4770      	bx	lr
 80015ac:	40011000 	.word	0x40011000

080015b0 <notify2>:
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80015b0:	4a02      	ldr	r2, [pc, #8]	; (80015bc <notify2+0xc>)
 80015b2:	68d3      	ldr	r3, [r2, #12]
 80015b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015b8:	60d3      	str	r3, [r2, #12]
}
 80015ba:	4770      	bx	lr
 80015bc:	40004400 	.word	0x40004400

080015c0 <notify6>:
  USART6->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80015c0:	4a02      	ldr	r2, [pc, #8]	; (80015cc <notify6+0xc>)
 80015c2:	68d3      	ldr	r3, [r2, #12]
 80015c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015c8:	60d3      	str	r3, [r2, #12]
}
 80015ca:	4770      	bx	lr
 80015cc:	40011400 	.word	0x40011400

080015d0 <icuperiodcb1>:
  //  smallest_pulse = last_width1;
}

static void icuperiodcb1(ICUDriver *icup) { // This gets called every rising edge.

  last_period1 = icuGetPeriodX(icup);
 80015d0:	6942      	ldr	r2, [r0, #20]
  palTogglePad(GPIOC, 15);
 80015d2:	4909      	ldr	r1, [pc, #36]	; (80015f8 <icuperiodcb1+0x28>)
  sp_temp = last_period1 - last_width1;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <icuperiodcb1+0x2c>)
  if (sp_temp < smallest_pulse)
 80015d6:	480a      	ldr	r0, [pc, #40]	; (8001600 <icuperiodcb1+0x30>)
static void icuperiodcb1(ICUDriver *icup) { // This gets called every rising edge.
 80015d8:	b410      	push	{r4}
  last_period1 = icuGetPeriodX(icup);
 80015da:	6814      	ldr	r4, [r2, #0]
  palTogglePad(GPIOC, 15);
 80015dc:	694a      	ldr	r2, [r1, #20]
 80015de:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
 80015e2:	614a      	str	r2, [r1, #20]
  sp_temp = last_period1 - last_width1;
 80015e4:	681b      	ldr	r3, [r3, #0]
  if (sp_temp < smallest_pulse)
 80015e6:	6802      	ldr	r2, [r0, #0]
  sp_temp = last_period1 - last_width1;
 80015e8:	f1c3 0301 	rsb	r3, r3, #1
 80015ec:	4423      	add	r3, r4
  if (sp_temp < smallest_pulse)
 80015ee:	4293      	cmp	r3, r2
    smallest_pulse = sp_temp;
  //if ((last_period1 - last_width1) < smallest_pulse)
  //  smallest_pulse = (last_period1 - last_width1);
}
 80015f0:	bc10      	pop	{r4}
    smallest_pulse = sp_temp;
 80015f2:	bf38      	it	cc
 80015f4:	6003      	strcc	r3, [r0, #0]
}
 80015f6:	4770      	bx	lr
 80015f8:	40020800 	.word	0x40020800
 80015fc:	20001cb4 	.word	0x20001cb4
 8001600:	20000834 	.word	0x20000834
	...

08001610 <icuwidthcb1>:
  last_width1 = icuGetWidthX(icup);
 8001610:	6903      	ldr	r3, [r0, #16]
 8001612:	4905      	ldr	r1, [pc, #20]	; (8001628 <icuwidthcb1+0x18>)
 8001614:	681b      	ldr	r3, [r3, #0]
  palTogglePad(GPIOC, 14);
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <icuwidthcb1+0x1c>)
  last_width1 = icuGetWidthX(icup);
 8001618:	3301      	adds	r3, #1
 800161a:	600b      	str	r3, [r1, #0]
  palTogglePad(GPIOC, 14);
 800161c:	6953      	ldr	r3, [r2, #20]
 800161e:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8001622:	6153      	str	r3, [r2, #20]
}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20001cb4 	.word	0x20001cb4
 800162c:	40020800 	.word	0x40020800

08001630 <requests_hook>:
 * Handling messages not implemented in the default handler nor in the
 * SerialUSB handler.
 */
static bool requests_hook(USBDriver *usbp) {

  if (((usbp->setup[0] & USB_RTYPE_RECIPIENT_MASK) == USB_RTYPE_RECIPIENT_INTERFACE) &&
 8001630:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
static bool requests_hook(USBDriver *usbp) {
 8001634:	4603      	mov	r3, r0
  if (((usbp->setup[0] & USB_RTYPE_RECIPIENT_MASK) == USB_RTYPE_RECIPIENT_INTERFACE) &&
 8001636:	f002 001f 	and.w	r0, r2, #31
 800163a:	2801      	cmp	r0, #1
 800163c:	d103      	bne.n	8001646 <requests_hook+0x16>
 800163e:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8001642:	290b      	cmp	r1, #11
 8001644:	d01b      	beq.n	800167e <requests_hook+0x4e>
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8001646:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800164a:	2a20      	cmp	r2, #32
 800164c:	d001      	beq.n	8001652 <requests_hook+0x22>
      return true;
    default:
      return false;
    }
  }
  return false;
 800164e:	2000      	movs	r0, #0
      (usbp->setup[1] == USB_REQ_SET_INTERFACE)) {
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  }
  return sduRequestsHook(usbp);
}
 8001650:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8001652:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8001656:	2a21      	cmp	r2, #33	; 0x21
 8001658:	d809      	bhi.n	800166e <requests_hook+0x3e>
 800165a:	2a1f      	cmp	r2, #31
 800165c:	d9f7      	bls.n	800164e <requests_hook+0x1e>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <requests_hook+0x58>)
 8001660:	639a      	str	r2, [r3, #56]	; 0x38
 8001662:	2107      	movs	r1, #7
 8001664:	2200      	movs	r2, #0
 8001666:	e9c3 120f 	strd	r1, r2, [r3, #60]	; 0x3c
      return true;
 800166a:	2001      	movs	r0, #1
 800166c:	4770      	bx	lr
    switch (usbp->setup[1]) {
 800166e:	2a22      	cmp	r2, #34	; 0x22
 8001670:	d1ed      	bne.n	800164e <requests_hook+0x1e>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001672:	2200      	movs	r2, #0
 8001674:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8001678:	641a      	str	r2, [r3, #64]	; 0x40
      return true;
 800167a:	2001      	movs	r0, #1
 800167c:	4770      	bx	lr
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800167e:	2200      	movs	r2, #0
 8001680:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
    return true;
 8001686:	4770      	bx	lr
 8001688:	20000820 	.word	0x20000820
 800168c:	00000000 	.word	0x00000000

08001690 <get_descriptor>:
  switch (dtype) {
 8001690:	2902      	cmp	r1, #2
 8001692:	d006      	beq.n	80016a2 <get_descriptor+0x12>
 8001694:	2903      	cmp	r1, #3
 8001696:	d006      	beq.n	80016a6 <get_descriptor+0x16>
 8001698:	2901      	cmp	r1, #1
    return &vcom_device_descriptor;
 800169a:	4807      	ldr	r0, [pc, #28]	; (80016b8 <get_descriptor+0x28>)
 800169c:	bf18      	it	ne
 800169e:	2000      	movne	r0, #0
 80016a0:	4770      	bx	lr
  switch (dtype) {
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <get_descriptor+0x2c>)
 80016a4:	4770      	bx	lr
    if (dindex < 4)
 80016a6:	2a03      	cmp	r2, #3
 80016a8:	d803      	bhi.n	80016b2 <get_descriptor+0x22>
      return &vcom_strings[dindex];
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <get_descriptor+0x30>)
 80016ac:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 80016b0:	4770      	bx	lr
  return NULL;
 80016b2:	2000      	movs	r0, #0
}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	080064f0 	.word	0x080064f0
 80016bc:	0800649c 	.word	0x0800649c
 80016c0:	08006578 	.word	0x08006578
	...

080016d0 <_port_irq_epilogue>:
 80016d0:	2320      	movs	r3, #32
 80016d2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <_port_irq_epilogue+0x3c>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80016de:	d102      	bne.n	80016e6 <_port_irq_epilogue+0x16>
 80016e0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 80016e4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80016e6:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 80016ea:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80016ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016f0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80016f2:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80016f6:	4a06      	ldr	r2, [pc, #24]	; (8001710 <_port_irq_epilogue+0x40>)
 80016f8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 80016fa:	6952      	ldr	r2, [r2, #20]
    if (chSchIsPreemptionRequired()) {
 80016fc:	6889      	ldr	r1, [r1, #8]
 80016fe:	6892      	ldr	r2, [r2, #8]
 8001700:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8001702:	bf8c      	ite	hi
 8001704:	4a03      	ldrhi	r2, [pc, #12]	; (8001714 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8001706:	4a04      	ldrls	r2, [pc, #16]	; (8001718 <_port_irq_epilogue+0x48>)
 8001708:	619a      	str	r2, [r3, #24]
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00
 8001710:	2000189c 	.word	0x2000189c
 8001714:	08000303 	.word	0x08000303
 8001718:	08000306 	.word	0x08000306
 800171c:	00000000 	.word	0x00000000

08001720 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8001720:	4a08      	ldr	r2, [pc, #32]	; (8001744 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8001722:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8001724:	e9d2 3400 	ldrd	r3, r4, [r2]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8001728:	4249      	negs	r1, r1
 800172a:	1a20      	subs	r0, r4, r0
 800172c:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800172e:	4298      	cmp	r0, r3
 8001730:	d304      	bcc.n	800173c <chCoreAllocAlignedI+0x1c>
 8001732:	4284      	cmp	r4, r0
 8001734:	d302      	bcc.n	800173c <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8001736:	bc10      	pop	{r4}
  ch_memcore.topmem = prev;
 8001738:	6050      	str	r0, [r2, #4]
 800173a:	4770      	bx	lr
    return NULL;
 800173c:	2000      	movs	r0, #0
 800173e:	bc10      	pop	{r4}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20001a30 	.word	0x20001a30
	...

08001750 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001750:	4a0e      	ldr	r2, [pc, #56]	; (800178c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <chTMStopMeasurementX+0x40>)
 8001754:	6852      	ldr	r2, [r2, #4]
 8001756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  tmp->last = (now - tmp->last) - offset;
 8001758:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800175a:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 800175c:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 800175e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 8001762:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8001764:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 8001766:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 8001768:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 800176a:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 800176c:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 800176e:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 8001770:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8001772:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8001776:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8001778:	bf88      	it	hi
 800177a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 800177c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 800177e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 8001782:	bf38      	it	cc
 8001784:	6003      	strcc	r3, [r0, #0]
}
 8001786:	bc30      	pop	{r4, r5}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e0001000 	.word	0xe0001000
 8001790:	2000189c 	.word	0x2000189c
	...

080017a0 <chTMStartMeasurementX>:
 80017a0:	4b01      	ldr	r3, [pc, #4]	; (80017a8 <chTMStartMeasurementX+0x8>)
 80017a2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 80017a4:	6083      	str	r3, [r0, #8]
}
 80017a6:	4770      	bx	lr
 80017a8:	e0001000 	.word	0xe0001000
 80017ac:	00000000 	.word	0x00000000

080017b0 <chThdCreateSuspendedI>:
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 80017b0:	6883      	ldr	r3, [r0, #8]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 80017b2:	6841      	ldr	r1, [r0, #4]
  REG_INSERT(tp);
 80017b4:	4a1a      	ldr	r2, [pc, #104]	; (8001820 <chThdCreateSuspendedI+0x70>)
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 80017b6:	b4f0      	push	{r4, r5, r6, r7}
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80017b8:	e9d0 7504 	ldrd	r7, r5, [r0, #16]
  tp->state     = CH_STATE_WTSTART;
 80017bc:	2602      	movs	r6, #2
  tp->wabase = tdp->wbase;
 80017be:	f843 1c2c 	str.w	r1, [r3, #-44]
  tp->refs      = (trefs_t)1;
 80017c2:	2401      	movs	r4, #1
  tp->flags     = CH_FLAG_MODE_STATIC;
 80017c4:	2100      	movs	r1, #0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80017c6:	e943 751b 	strd	r7, r5, [r3, #-108]	; 0x6c

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 80017ca:	6805      	ldr	r5, [r0, #0]
 80017cc:	68c0      	ldr	r0, [r0, #12]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80017ce:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->state     = CH_STATE_WTSTART;
 80017d2:	f803 6c28 	strb.w	r6, [r3, #-40]
  tp->refs      = (trefs_t)1;
 80017d6:	f803 4c26 	strb.w	r4, [r3, #-38]
  REG_INSERT(tp);
 80017da:	f843 2c3c 	str.w	r2, [r3, #-60]
 80017de:	6914      	ldr	r4, [r2, #16]
  tp->prio      = prio;
 80017e0:	f843 0c40 	str.w	r0, [r3, #-64]
  tp->realprio  = prio;
 80017e4:	f843 0c0c 	str.w	r0, [r3, #-12]
  tp->name      = name;
 80017e8:	f843 5c30 	str.w	r5, [r3, #-48]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80017ec:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
 80017f0:	4d0c      	ldr	r5, [pc, #48]	; (8001824 <chThdCreateSuspendedI+0x74>)
 80017f2:	f843 0c34 	str.w	r0, [r3, #-52]
  tp->epending  = (eventmask_t)0;
 80017f6:	e943 1105 	strd	r1, r1, [r3, #-20]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 80017fa:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80017fe:	f843 5c4c 	str.w	r5, [r3, #-76]
  queue_init(&tp->msgqueue);
 8001802:	f1a3 011c 	sub.w	r1, r3, #28
  list_init(&tp->waiting);
 8001806:	f1a3 0520 	sub.w	r5, r3, #32
  REG_INSERT(tp);
 800180a:	f843 4c38 	str.w	r4, [r3, #-56]
 800180e:	60e0      	str	r0, [r4, #12]
 8001810:	6110      	str	r0, [r2, #16]
  tqp->next = (thread_t *)tqp;
 8001812:	e943 5108 	strd	r5, r1, [r3, #-32]
  tqp->prev = (thread_t *)tqp;
 8001816:	f843 1c18 	str.w	r1, [r3, #-24]
}
 800181a:	bcf0      	pop	{r4, r5, r6, r7}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	2000189c 	.word	0x2000189c
 8001824:	080002f1 	.word	0x080002f1
	...

08001830 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001830:	2320      	movs	r3, #32
 8001832:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8001836:	f890 3020 	ldrb.w	r3, [r0, #32]
 800183a:	2b07      	cmp	r3, #7
 800183c:	d80d      	bhi.n	800185a <wakeup+0x2a>
 800183e:	e8df f003 	tbb	[pc, r3]
 8001842:	0c27      	.short	0x0c27
 8001844:	0408230c 	.word	0x0408230c
 8001848:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 800184a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800184c:	6893      	ldr	r3, [r2, #8]
 800184e:	3301      	adds	r3, #1
 8001850:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8001852:	e9d0 3200 	ldrd	r3, r2, [r0]
 8001856:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001858:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 800185a:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 800185c:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 800185e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  } while (cp->prio >= tp->prio);
 8001862:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <wakeup+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8001866:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8001868:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800186c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	428a      	cmp	r2, r1
 8001872:	d2fb      	bcs.n	800186c <wakeup+0x3c>
  tp->queue.prev             = cp->queue.prev;
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	2100      	movs	r1, #0
 8001878:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800187c:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800187e:	6058      	str	r0, [r3, #4]
 8001880:	f381 8811 	msr	BASEPRI, r1
}
 8001884:	bc10      	pop	{r4}
 8001886:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8001888:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
    break;
 800188e:	e7e4      	b.n	800185a <wakeup+0x2a>
 8001890:	2300      	movs	r3, #0
 8001892:	f383 8811 	msr	BASEPRI, r3
 8001896:	4770      	bx	lr
 8001898:	2000189c 	.word	0x2000189c
 800189c:	00000000 	.word	0x00000000

080018a0 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 80018a0:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 80018a2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <chSchReadyI+0x20>)
  tp->state = CH_STATE_READY;
 80018a6:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80018aa:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	428a      	cmp	r2, r1
 80018b0:	d2fb      	bcs.n	80018aa <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80018b8:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80018ba:	6058      	str	r0, [r3, #4]
}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	2000189c 	.word	0x2000189c
	...

080018d0 <chThdDequeueAllI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80018d0:	b538      	push	{r3, r4, r5, lr}
 80018d2:	4604      	mov	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 80018d4:	6800      	ldr	r0, [r0, #0]

  while (queue_notempty(tqp)) {
 80018d6:	4284      	cmp	r4, r0
 80018d8:	d00a      	beq.n	80018f0 <chThdDequeueAllI.constprop.0+0x20>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80018da:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 80018de:	6803      	ldr	r3, [r0, #0]
 80018e0:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80018e2:	605c      	str	r4, [r3, #4]
 80018e4:	6245      	str	r5, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 80018e6:	f7ff ffdb 	bl	80018a0 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80018ea:	6820      	ldr	r0, [r4, #0]
 80018ec:	42a0      	cmp	r0, r4
 80018ee:	d1f6      	bne.n	80018de <chThdDequeueAllI.constprop.0+0xe>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 80018f0:	bd38      	pop	{r3, r4, r5, pc}
 80018f2:	bf00      	nop
	...

08001900 <chThdDequeueNextI.constprop.0>:
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8001900:	4603      	mov	r3, r0
 8001902:	6800      	ldr	r0, [r0, #0]
  if (queue_notempty(tqp)) {
 8001904:	4283      	cmp	r3, r0
 8001906:	d006      	beq.n	8001916 <chThdDequeueNextI.constprop.0+0x16>
  tqp->next             = tp->queue.next;
 8001908:	6802      	ldr	r2, [r0, #0]
 800190a:	601a      	str	r2, [r3, #0]
  tp->u.rdymsg = msg;
 800190c:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800190e:	6053      	str	r3, [r2, #4]
 8001910:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001912:	f7ff bfc5 	b.w	80018a0 <chSchReadyI>
}
 8001916:	4770      	bx	lr
	...

08001920 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8001922:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001924:	42a0      	cmp	r0, r4
 8001926:	d021      	beq.n	800196c <chEvtBroadcastFlagsI+0x4c>
 8001928:	4607      	mov	r7, r0
 800192a:	460d      	mov	r5, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800192c:	2600      	movs	r6, #0
 800192e:	e004      	b.n	800193a <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8001930:	2a0b      	cmp	r2, #11
 8001932:	d01c      	beq.n	800196e <chEvtBroadcastFlagsI+0x4e>
    elp = elp->next;
 8001934:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001936:	42a7      	cmp	r7, r4
 8001938:	d018      	beq.n	800196c <chEvtBroadcastFlagsI+0x4c>
    elp->flags |= flags;
 800193a:	68e3      	ldr	r3, [r4, #12]
 800193c:	432b      	orrs	r3, r5
 800193e:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8001940:	b115      	cbz	r5, 8001948 <chEvtBroadcastFlagsI+0x28>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8001942:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8001944:	421d      	tst	r5, r3
 8001946:	d0f5      	beq.n	8001934 <chEvtBroadcastFlagsI+0x14>
  tp->epending |= events;
 8001948:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 800194c:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800194e:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8001952:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001954:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8001956:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001958:	d1ea      	bne.n	8001930 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800195a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 800195c:	4213      	tst	r3, r2
 800195e:	d0e9      	beq.n	8001934 <chEvtBroadcastFlagsI+0x14>
    tp->u.rdymsg = MSG_OK;
 8001960:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8001962:	f7ff ff9d 	bl	80018a0 <chSchReadyI>
    elp = elp->next;
 8001966:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001968:	42a7      	cmp	r7, r4
 800196a:	d1e6      	bne.n	800193a <chEvtBroadcastFlagsI+0x1a>
}
 800196c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 800196e:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8001970:	ea32 0303 	bics.w	r3, r2, r3
 8001974:	d1de      	bne.n	8001934 <chEvtBroadcastFlagsI+0x14>
 8001976:	e7f3      	b.n	8001960 <chEvtBroadcastFlagsI+0x40>
	...

08001980 <chSysPolledDelayX>:
 8001980:	4a03      	ldr	r2, [pc, #12]	; (8001990 <chSysPolledDelayX+0x10>)
 8001982:	6851      	ldr	r1, [r2, #4]
 8001984:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)(((rtcnt_t)cnt - (rtcnt_t)start) <
 8001986:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 8001988:	4298      	cmp	r0, r3
 800198a:	d8fb      	bhi.n	8001984 <chSysPolledDelayX+0x4>
  }
}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e0001000 	.word	0xe0001000
	...

080019a0 <_idle_thread>:
}
 80019a0:	e7fe      	b.n	80019a0 <_idle_thread>
 80019a2:	bf00      	nop
	...

080019b0 <serve_interrupt>:
static void serve_interrupt(SerialDriver *sdp) {
 80019b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 80019b4:	f8d0 6254 	ldr.w	r6, [r0, #596]	; 0x254
  uint16_t cr1 = u->CR1;
 80019b8:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 80019bc:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80019be:	05da      	lsls	r2, r3, #23
static void serve_interrupt(SerialDriver *sdp) {
 80019c0:	4605      	mov	r5, r0
  uint16_t sr = u->SR;
 80019c2:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 80019c4:	d475      	bmi.n	8001ab2 <serve_interrupt+0x102>
 80019c6:	2320      	movs	r3, #32
 80019c8:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80019cc:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80019d0:	d045      	beq.n	8001a5e <serve_interrupt+0xae>
  chnAddFlagsI(sdp, sts);
 80019d2:	1d2f      	adds	r7, r5, #4
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 80019d4:	f105 080c 	add.w	r8, r5, #12
 80019d8:	e008      	b.n	80019ec <serve_interrupt+0x3c>
    if (sr & USART_SR_RXNE)
 80019da:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80019dc:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 80019e0:	d41e      	bmi.n	8001a20 <serve_interrupt+0x70>
    sr = u->SR;
 80019e2:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80019e4:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 80019e8:	b29c      	uxth	r4, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80019ea:	d038      	beq.n	8001a5e <serve_interrupt+0xae>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80019ec:	0723      	lsls	r3, r4, #28
 80019ee:	d0f4      	beq.n	80019da <serve_interrupt+0x2a>
    sts |= SD_OVERRUN_ERROR;
 80019f0:	f014 0f08 	tst.w	r4, #8
 80019f4:	bf0c      	ite	eq
 80019f6:	2100      	moveq	r1, #0
 80019f8:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 80019fa:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 80019fc:	bf48      	it	mi
 80019fe:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8001a02:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 8001a04:	bf48      	it	mi
 8001a06:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8001a0a:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 8001a0c:	bf48      	it	mi
 8001a0e:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001a12:	4638      	mov	r0, r7
 8001a14:	f7ff ff84 	bl	8001920 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8001a18:	06a0      	lsls	r0, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8001a1a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8001a1e:	d5e0      	bpl.n	80019e2 <serve_interrupt+0x32>
  if (iqIsEmptyI(&sdp->iqueue))
 8001a20:	696b      	ldr	r3, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 8001a22:	f895 4258 	ldrb.w	r4, [r5, #600]	; 0x258
 8001a26:	b39b      	cbz	r3, 8001a90 <serve_interrupt+0xe0>
  if (!iqIsFullI(iqp)) {
 8001a28:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d037      	beq.n	8001aa0 <serve_interrupt+0xf0>
    iqp->q_counter++;
 8001a30:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8001a32:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8001a34:	3201      	adds	r2, #1
 8001a36:	ea04 0a0a 	and.w	sl, r4, sl
 8001a3a:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8001a3c:	6229      	str	r1, [r5, #32]
 8001a3e:	f883 a000 	strb.w	sl, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
 8001a42:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d301      	bcc.n	8001a4e <serve_interrupt+0x9e>
      iqp->q_wrptr = iqp->q_buffer;
 8001a4a:	69ab      	ldr	r3, [r5, #24]
 8001a4c:	622b      	str	r3, [r5, #32]
  chThdDequeueNextI(tqp, msg);
 8001a4e:	4640      	mov	r0, r8
 8001a50:	f7ff ff56 	bl	8001900 <chThdDequeueNextI.constprop.0>
    sr = u->SR;
 8001a54:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001a56:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8001a5a:	b29c      	uxth	r4, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001a5c:	d1c6      	bne.n	80019ec <serve_interrupt+0x3c>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8001a64:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001a68:	d001      	beq.n	8001a6e <serve_interrupt+0xbe>
 8001a6a:	0622      	lsls	r2, r4, #24
 8001a6c:	d430      	bmi.n	8001ad0 <serve_interrupt+0x120>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8001a6e:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001a72:	d00b      	beq.n	8001a8c <serve_interrupt+0xdc>
 8001a74:	0663      	lsls	r3, r4, #25
 8001a76:	d509      	bpl.n	8001a8c <serve_interrupt+0xdc>
 8001a78:	2320      	movs	r3, #32
 8001a7a:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 8001a7e:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d03f      	beq.n	8001b06 <serve_interrupt+0x156>
 8001a86:	2300      	movs	r3, #0
 8001a88:	f383 8811 	msr	BASEPRI, r3
}
 8001a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  chEvtBroadcastFlagsI(esp, flags);
 8001a90:	2104      	movs	r1, #4
 8001a92:	4638      	mov	r0, r7
 8001a94:	f7ff ff44 	bl	8001920 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 8001a98:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d1c7      	bne.n	8001a30 <serve_interrupt+0x80>
 8001aa0:	696a      	ldr	r2, [r5, #20]
 8001aa2:	2a00      	cmp	r2, #0
 8001aa4:	d0c4      	beq.n	8001a30 <serve_interrupt+0x80>
 8001aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aaa:	4638      	mov	r0, r7
 8001aac:	f7ff ff38 	bl	8001920 <chEvtBroadcastFlagsI>
 8001ab0:	e797      	b.n	80019e2 <serve_interrupt+0x32>
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	f383 8811 	msr	BASEPRI, r3
 8001ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001abc:	3004      	adds	r0, #4
 8001abe:	f7ff ff2f 	bl	8001920 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8001ac2:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8001ac6:	6033      	str	r3, [r6, #0]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f383 8811 	msr	BASEPRI, r3
 8001ace:	e77a      	b.n	80019c6 <serve_interrupt+0x16>
 8001ad0:	2320      	movs	r3, #32
 8001ad2:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8001ad6:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d020      	beq.n	8001b20 <serve_interrupt+0x170>
    uint8_t b;

    oqp->q_counter++;
 8001ade:	6baa      	ldr	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top) {
 8001ae0:	6c29      	ldr	r1, [r5, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8001ae2:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 8001ae4:	3201      	adds	r2, #1
 8001ae6:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8001ae8:	64a8      	str	r0, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8001aea:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 8001aec:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 8001aee:	d301      	bcc.n	8001af4 <serve_interrupt+0x144>
      oqp->q_rdptr = oqp->q_buffer;
 8001af0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001af2:	64ab      	str	r3, [r5, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 8001af4:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8001af8:	f7ff ff02 	bl	8001900 <chThdDequeueNextI.constprop.0>
      u->DR = b;
 8001afc:	6077      	str	r7, [r6, #4]
 8001afe:	2300      	movs	r3, #0
 8001b00:	f383 8811 	msr	BASEPRI, r3
 8001b04:	e7b3      	b.n	8001a6e <serve_interrupt+0xbe>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8001b06:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0bc      	beq.n	8001a86 <serve_interrupt+0xd6>
  chEvtBroadcastFlagsI(esp, flags);
 8001b0c:	1d28      	adds	r0, r5, #4
 8001b0e:	2110      	movs	r1, #16
 8001b10:	f7ff ff06 	bl	8001920 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001b14:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8001b18:	ea09 0303 	and.w	r3, r9, r3
 8001b1c:	60f3      	str	r3, [r6, #12]
 8001b1e:	e7b2      	b.n	8001a86 <serve_interrupt+0xd6>
  if (!oqIsEmptyI(oqp)) {
 8001b20:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001b22:	2a00      	cmp	r2, #0
 8001b24:	d0db      	beq.n	8001ade <serve_interrupt+0x12e>
 8001b26:	2108      	movs	r1, #8
 8001b28:	1d28      	adds	r0, r5, #4
 8001b2a:	f7ff fef9 	bl	8001920 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8001b2e:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8001b32:	ea09 0303 	and.w	r3, r9, r3
 8001b36:	60f3      	str	r3, [r6, #12]
 8001b38:	e7e1      	b.n	8001afe <serve_interrupt+0x14e>
 8001b3a:	bf00      	nop
 8001b3c:	0000      	movs	r0, r0
	...

08001b40 <icu_lld_serve_interrupt>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
 8001b40:	b538      	push	{r3, r4, r5, lr}
  uint32_t sr;

  sr  = icup->tim->SR;
 8001b42:	68c3      	ldr	r3, [r0, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
 8001b44:	6841      	ldr	r1, [r0, #4]
  sr  = icup->tim->SR;
 8001b46:	691a      	ldr	r2, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8001b48:	68dd      	ldr	r5, [r3, #12]
 8001b4a:	4015      	ands	r5, r2
 8001b4c:	b2ea      	uxtb	r2, r5
  icup->tim->SR = ~sr;
 8001b4e:	43d2      	mvns	r2, r2
 8001b50:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 8001b52:	7d0b      	ldrb	r3, [r1, #20]
void icu_lld_serve_interrupt(ICUDriver *icup) {
 8001b54:	4604      	mov	r4, r0
  if (icup->config->channel == ICU_CHANNEL_1) {
 8001b56:	b97b      	cbnz	r3, 8001b78 <icu_lld_serve_interrupt+0x38>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8001b58:	076b      	lsls	r3, r5, #29
 8001b5a:	d52b      	bpl.n	8001bb4 <icu_lld_serve_interrupt+0x74>
      _icu_isr_invoke_width_cb(icup);
 8001b5c:	7803      	ldrb	r3, [r0, #0]
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d025      	beq.n	8001bae <icu_lld_serve_interrupt+0x6e>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8001b62:	07a9      	lsls	r1, r5, #30
 8001b64:	d40f      	bmi.n	8001b86 <icu_lld_serve_interrupt+0x46>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 8001b66:	07ed      	lsls	r5, r5, #31
 8001b68:	d505      	bpl.n	8001b76 <icu_lld_serve_interrupt+0x36>
    _icu_isr_invoke_overflow_cb(icup);
 8001b6a:	6863      	ldr	r3, [r4, #4]
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	4798      	blx	r3
 8001b72:	2303      	movs	r3, #3
 8001b74:	7023      	strb	r3, [r4, #0]
}
 8001b76:	bd38      	pop	{r3, r4, r5, pc}
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8001b78:	07aa      	lsls	r2, r5, #30
 8001b7a:	d50a      	bpl.n	8001b92 <icu_lld_serve_interrupt+0x52>
      _icu_isr_invoke_width_cb(icup);
 8001b7c:	7803      	ldrb	r3, [r0, #0]
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d004      	beq.n	8001b8c <icu_lld_serve_interrupt+0x4c>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8001b82:	076b      	lsls	r3, r5, #29
 8001b84:	d5ef      	bpl.n	8001b66 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
 8001b86:	2304      	movs	r3, #4
 8001b88:	7023      	strb	r3, [r4, #0]
 8001b8a:	e7ec      	b.n	8001b66 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_width_cb(icup);
 8001b8c:	688b      	ldr	r3, [r1, #8]
 8001b8e:	b1d3      	cbz	r3, 8001bc6 <icu_lld_serve_interrupt+0x86>
 8001b90:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8001b92:	076b      	lsls	r3, r5, #29
 8001b94:	d5e7      	bpl.n	8001b66 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
 8001b96:	7823      	ldrb	r3, [r4, #0]
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d1f4      	bne.n	8001b86 <icu_lld_serve_interrupt+0x46>
 8001b9c:	6861      	ldr	r1, [r4, #4]
 8001b9e:	68cb      	ldr	r3, [r1, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <icu_lld_serve_interrupt+0x46>
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	4798      	blx	r3
 8001ba8:	2304      	movs	r3, #4
 8001baa:	7023      	strb	r3, [r4, #0]
 8001bac:	e7db      	b.n	8001b66 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_width_cb(icup);
 8001bae:	688b      	ldr	r3, [r1, #8]
 8001bb0:	b133      	cbz	r3, 8001bc0 <icu_lld_serve_interrupt+0x80>
 8001bb2:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8001bb4:	07a9      	lsls	r1, r5, #30
 8001bb6:	d5d6      	bpl.n	8001b66 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
 8001bb8:	7823      	ldrb	r3, [r4, #0]
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d1e3      	bne.n	8001b86 <icu_lld_serve_interrupt+0x46>
 8001bbe:	e7ed      	b.n	8001b9c <icu_lld_serve_interrupt+0x5c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8001bc0:	07a8      	lsls	r0, r5, #30
 8001bc2:	d4ec      	bmi.n	8001b9e <icu_lld_serve_interrupt+0x5e>
 8001bc4:	e7cf      	b.n	8001b66 <icu_lld_serve_interrupt+0x26>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8001bc6:	076a      	lsls	r2, r5, #29
 8001bc8:	d4e9      	bmi.n	8001b9e <icu_lld_serve_interrupt+0x5e>
 8001bca:	e7cc      	b.n	8001b66 <icu_lld_serve_interrupt+0x26>
 8001bcc:	0000      	movs	r0, r0
	...

08001bd0 <usb_lld_start_in>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001bd0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8001bd4:	b430      	push	{r4, r5}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001bd6:	68dc      	ldr	r4, [r3, #12]
 8001bd8:	6962      	ldr	r2, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 8001bda:	6813      	ldr	r3, [r2, #0]
 8001bdc:	60d3      	str	r3, [r2, #12]
  if (isp->txsize == 0) {
 8001bde:	b9f3      	cbnz	r3, 8001c1e <usb_lld_start_in+0x4e>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8001be0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001be2:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 8001be6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001bea:	f8c3 0910 	str.w	r0, [r3, #2320]	; 0x910
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d02a      	beq.n	8001c4e <usb_lld_start_in+0x7e>
 8001bf8:	b208      	sxth	r0, r1
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8001bfa:	eb02 1040 	add.w	r0, r2, r0, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8001bfe:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8001c00:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8001c04:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8001c08:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8001c0c:	f8d2 0834 	ldr.w	r0, [r2, #2100]	; 0x834
 8001c10:	fa03 f101 	lsl.w	r1, r3, r1
 8001c14:	4301      	orrs	r1, r0
}
 8001c16:	bc30      	pop	{r4, r5}
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8001c18:	f8c2 1834 	str.w	r1, [r2, #2100]	; 0x834
}
 8001c1c:	4770      	bx	lr
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8001c1e:	b919      	cbnz	r1, 8001c28 <usb_lld_start_in+0x58>
 8001c20:	2b40      	cmp	r3, #64	; 0x40
      isp->txsize = EP0_MAX_INSIZE;
 8001c22:	bf84      	itt	hi
 8001c24:	2340      	movhi	r3, #64	; 0x40
 8001c26:	6013      	strhi	r3, [r2, #0]
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8001c28:	8a25      	ldrh	r5, [r4, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8001c2a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8001c2c:	1e68      	subs	r0, r5, #1
 8001c2e:	4418      	add	r0, r3
 8001c30:	fbb0 f0f5 	udiv	r0, r0, r5
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8001c34:	eb02 1541 	add.w	r5, r2, r1, lsl #5
 8001c38:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8001c3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c40:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d1d4      	bne.n	8001bf8 <usb_lld_start_in+0x28>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8001c4e:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 8001c52:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001c56:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 8001c5a:	b208      	sxth	r0, r1
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 8001c5c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8001c60:	bf14      	ite	ne
 8001c62:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8001c66:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
 8001c6a:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8001c6e:	e7c4      	b.n	8001bfa <usb_lld_start_in+0x2a>

08001c70 <otg_epin_handler.constprop.0>:
  stm32_otg_t *otgp = usbp->otg;
 8001c70:	4a20      	ldr	r2, [pc, #128]	; (8001cf4 <otg_epin_handler.constprop.0+0x84>)
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8001c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  stm32_otg_t *otgp = usbp->otg;
 8001c74:	6d56      	ldr	r6, [r2, #84]	; 0x54
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8001c76:	eb06 1340 	add.w	r3, r6, r0, lsl #5
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8001c7a:	4604      	mov	r4, r0
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8001c7c:	f8d3 5908 	ldr.w	r5, [r3, #2312]	; 0x908
  otgp->ie[ep].DIEPINT = epint;
 8001c80:	f8c3 5908 	str.w	r5, [r3, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8001c84:	07e8      	lsls	r0, r5, #31
 8001c86:	d503      	bpl.n	8001c90 <otg_epin_handler.constprop.0+0x20>
 8001c88:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
 8001c8c:	07d9      	lsls	r1, r3, #31
 8001c8e:	d408      	bmi.n	8001ca2 <otg_epin_handler.constprop.0+0x32>
  if ((epint & DIEPINT_TXFE) &&
 8001c90:	062b      	lsls	r3, r5, #24
 8001c92:	d505      	bpl.n	8001ca0 <otg_epin_handler.constprop.0+0x30>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8001c94:	f8d6 2834 	ldr.w	r2, [r6, #2100]	; 0x834
 8001c98:	2301      	movs	r3, #1
 8001c9a:	40a3      	lsls	r3, r4
  if ((epint & DIEPINT_TXFE) &&
 8001c9c:	4213      	tst	r3, r2
 8001c9e:	d115      	bne.n	8001ccc <otg_epin_handler.constprop.0+0x5c>
}
 8001ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001ca2:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8001ca6:	68d8      	ldr	r0, [r3, #12]
 8001ca8:	6943      	ldr	r3, [r0, #20]
    if (isp->txsize < isp->totsize) {
 8001caa:	681f      	ldr	r7, [r3, #0]
 8001cac:	68d9      	ldr	r1, [r3, #12]
 8001cae:	428f      	cmp	r7, r1
 8001cb0:	d311      	bcc.n	8001cd6 <otg_epin_handler.constprop.0+0x66>
      _usb_isr_invoke_in_cb(usbp, ep);
 8001cb2:	8913      	ldrh	r3, [r2, #8]
 8001cb4:	6887      	ldr	r7, [r0, #8]
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	40a1      	lsls	r1, r4
 8001cba:	ea23 0301 	bic.w	r3, r3, r1
 8001cbe:	8113      	strh	r3, [r2, #8]
 8001cc0:	2f00      	cmp	r7, #0
 8001cc2:	d0e5      	beq.n	8001c90 <otg_epin_handler.constprop.0+0x20>
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	47b8      	blx	r7
 8001cca:	e7e1      	b.n	8001c90 <otg_epin_handler.constprop.0+0x20>
    otg_txfifo_handler(usbp, ep);
 8001ccc:	4620      	mov	r0, r4
}
 8001cce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    otg_txfifo_handler(usbp, ep);
 8001cd2:	f7ff bbfd 	b.w	80014d0 <otg_txfifo_handler.constprop.0>
      isp->txsize = isp->totsize - isp->txsize;
 8001cd6:	1bc9      	subs	r1, r1, r7
      isp->txcnt  = 0;
 8001cd8:	2700      	movs	r7, #0
 8001cda:	e9c3 1700 	strd	r1, r7, [r3]
 8001cde:	2320      	movs	r3, #32
 8001ce0:	f383 8811 	msr	BASEPRI, r3
      usb_lld_start_in(usbp, ep);
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	f7ff ff72 	bl	8001bd0 <usb_lld_start_in>
 8001cec:	f387 8811 	msr	BASEPRI, r7
 8001cf0:	e7ce      	b.n	8001c90 <otg_epin_handler.constprop.0+0x20>
 8001cf2:	bf00      	nop
 8001cf4:	2000183c 	.word	0x2000183c
	...

08001d00 <usb_lld_start_out>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8001d00:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8001d04:	b430      	push	{r4, r5}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8001d06:	68dd      	ldr	r5, [r3, #12]
 8001d08:	69ab      	ldr	r3, [r5, #24]
  osp->totsize = osp->rxsize;
 8001d0a:	681c      	ldr	r4, [r3, #0]
 8001d0c:	60dc      	str	r4, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 8001d0e:	b919      	cbnz	r1, 8001d18 <usb_lld_start_out+0x18>
 8001d10:	2c40      	cmp	r4, #64	; 0x40
      osp->rxsize = EP0_MAX_OUTSIZE;
 8001d12:	bf84      	itt	hi
 8001d14:	2440      	movhi	r4, #64	; 0x40
 8001d16:	601c      	strhi	r4, [r3, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8001d18:	8a6b      	ldrh	r3, [r5, #18]
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8001d1a:	6d40      	ldr	r0, [r0, #84]	; 0x54
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8001d1c:	682d      	ldr	r5, [r5, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8001d1e:	1e5a      	subs	r2, r3, #1
 8001d20:	4422      	add	r2, r4
 8001d22:	fbb2 f2f3 	udiv	r2, r2, r3
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	3303      	adds	r3, #3
 8001d2c:	f023 0303 	bic.w	r3, r3, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8001d30:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 8001d34:	eb00 1441 	add.w	r4, r0, r1, lsl #5
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8001d38:	f005 0203 	and.w	r2, r5, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8001d3c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8001d40:	2a01      	cmp	r2, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8001d42:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8001d46:	d00a      	beq.n	8001d5e <usb_lld_start_out+0x5e>
 8001d48:	b209      	sxth	r1, r1
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8001d4a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8001d4e:	bc30      	pop	{r4, r5}
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8001d50:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8001d54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001d58:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 8001d5c:	4770      	bx	lr
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8001d5e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8001d62:	eb00 1241 	add.w	r2, r0, r1, lsl #5
 8001d66:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 8001d6a:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8001d6e:	bf14      	ite	ne
 8001d70:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 8001d74:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8001d78:	b209      	sxth	r1, r1
 8001d7a:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8001d7e:	e7e4      	b.n	8001d4a <usb_lld_start_out+0x4a>

08001d80 <otg_epout_handler.constprop.0>:
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8001d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8001d84:	4f24      	ldr	r7, [pc, #144]	; (8001e18 <otg_epout_handler.constprop.0+0x98>)
 8001d86:	6d7e      	ldr	r6, [r7, #84]	; 0x54
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8001d88:	eb06 1340 	add.w	r3, r6, r0, lsl #5
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8001d8c:	4604      	mov	r4, r0
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8001d8e:	f8d3 5b08 	ldr.w	r5, [r3, #2824]	; 0xb08
  otgp->oe[ep].DOEPINT = epint;
 8001d92:	f8c3 5b08 	str.w	r5, [r3, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8001d96:	0728      	lsls	r0, r5, #28
 8001d98:	d503      	bpl.n	8001da2 <otg_epout_handler.constprop.0+0x22>
 8001d9a:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8001d9e:	0719      	lsls	r1, r3, #28
 8001da0:	d431      	bmi.n	8001e06 <otg_epout_handler.constprop.0+0x86>
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8001da2:	07ea      	lsls	r2, r5, #31
 8001da4:	d52d      	bpl.n	8001e02 <otg_epout_handler.constprop.0+0x82>
 8001da6:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8001daa:	07db      	lsls	r3, r3, #31
 8001dac:	d529      	bpl.n	8001e02 <otg_epout_handler.constprop.0+0x82>
    osp = usbp->epc[ep]->out_state;
 8001dae:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8001db2:	68d9      	ldr	r1, [r3, #12]
    if (ep == 0) {
 8001db4:	b95c      	cbnz	r4, 8001dce <otg_epout_handler.constprop.0+0x4e>
    osp = usbp->epc[ep]->out_state;
 8001db6:	698a      	ldr	r2, [r1, #24]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8001db8:	8a48      	ldrh	r0, [r1, #18]
 8001dba:	6855      	ldr	r5, [r2, #4]
 8001dbc:	fbb5 f3f0 	udiv	r3, r5, r0
 8001dc0:	fb00 5313 	mls	r3, r0, r3, r5
 8001dc4:	b91b      	cbnz	r3, 8001dce <otg_epout_handler.constprop.0+0x4e>
          (osp->rxsize < osp->totsize)) {
 8001dc6:	6810      	ldr	r0, [r2, #0]
 8001dc8:	68d3      	ldr	r3, [r2, #12]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8001dca:	4298      	cmp	r0, r3
 8001dcc:	d30d      	bcc.n	8001dea <otg_epout_handler.constprop.0+0x6a>
    _usb_isr_invoke_out_cb(usbp, ep);
 8001dce:	897b      	ldrh	r3, [r7, #10]
 8001dd0:	68cd      	ldr	r5, [r1, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	40a2      	lsls	r2, r4
 8001dd6:	ea23 0302 	bic.w	r3, r3, r2
 8001dda:	817b      	strh	r3, [r7, #10]
 8001ddc:	b18d      	cbz	r5, 8001e02 <otg_epout_handler.constprop.0+0x82>
 8001dde:	4621      	mov	r1, r4
 8001de0:	462b      	mov	r3, r5
 8001de2:	480d      	ldr	r0, [pc, #52]	; (8001e18 <otg_epout_handler.constprop.0+0x98>)
}
 8001de4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _usb_isr_invoke_out_cb(usbp, ep);
 8001de8:	4718      	bx	r3
        osp->rxsize = osp->totsize - osp->rxsize;
 8001dea:	1a1b      	subs	r3, r3, r0
        osp->rxcnt  = 0;
 8001dec:	e9c2 3400 	strd	r3, r4, [r2]
 8001df0:	2320      	movs	r3, #32
 8001df2:	f383 8811 	msr	BASEPRI, r3
        usb_lld_start_out(usbp, ep);
 8001df6:	4808      	ldr	r0, [pc, #32]	; (8001e18 <otg_epout_handler.constprop.0+0x98>)
 8001df8:	4621      	mov	r1, r4
 8001dfa:	f7ff ff81 	bl	8001d00 <usb_lld_start_out>
 8001dfe:	f384 8811 	msr	BASEPRI, r4
}
 8001e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _usb_isr_invoke_setup_cb(usbp, ep);
 8001e06:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	4638      	mov	r0, r7
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4798      	blx	r3
 8001e14:	e7c5      	b.n	8001da2 <otg_epout_handler.constprop.0+0x22>
 8001e16:	bf00      	nop
 8001e18:	2000183c 	.word	0x2000183c
 8001e1c:	00000000 	.word	0x00000000

08001e20 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8001e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e24:	b083      	sub	sp, #12

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8001e26:	f002 0c03 	and.w	ip, r2, #3
                           iomode_t mode) {
 8001e2a:	9201      	str	r2, [sp, #4]
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8001e2c:	4666      	mov	r6, ip
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8001e2e:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8001e32:	09d7      	lsrs	r7, r2, #7
  uint32_t bit     = 0;
 8001e34:	2400      	movs	r4, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8001e36:	f04f 090f 	mov.w	r9, #15
      m1 = 1 << bit;
 8001e3a:	f04f 0801 	mov.w	r8, #1
      m2 = 3 << (bit * 2);
 8001e3e:	f04f 0e03 	mov.w	lr, #3
 8001e42:	e012      	b.n	8001e6a <_pal_lld_setgroupmode+0x4a>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8001e44:	f8d0 b000 	ldr.w	fp, [r0]
 8001e48:	ea03 030b 	and.w	r3, r3, fp
 8001e4c:	4333      	orrs	r3, r6
        if (bit < 8)
 8001e4e:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8001e50:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8001e52:	d83d      	bhi.n	8001ed0 <_pal_lld_setgroupmode+0xb0>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001e54:	6a03      	ldr	r3, [r0, #32]
 8001e56:	ea23 0a0a 	bic.w	sl, r3, sl
 8001e5a:	ea4a 0202 	orr.w	r2, sl, r2
 8001e5e:	6202      	str	r2, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8001e60:	0849      	lsrs	r1, r1, #1
 8001e62:	d032      	beq.n	8001eca <_pal_lld_setgroupmode+0xaa>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
 8001e64:	00ad      	lsls	r5, r5, #2
    moder <<= 2;
 8001e66:	00b6      	lsls	r6, r6, #2
    bit++;
 8001e68:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 8001e6a:	07cb      	lsls	r3, r1, #31
 8001e6c:	d5f8      	bpl.n	8001e60 <_pal_lld_setgroupmode+0x40>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8001e6e:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8001e70:	fa08 f204 	lsl.w	r2, r8, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8001e74:	ea23 0302 	bic.w	r3, r3, r2
 8001e78:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001e7a:	6882      	ldr	r2, [r0, #8]
      m2 = 3 << (bit * 2);
 8001e7c:	0063      	lsls	r3, r4, #1
 8001e7e:	fa0e f303 	lsl.w	r3, lr, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001e82:	ea22 0203 	bic.w	r2, r2, r3
 8001e86:	6082      	str	r2, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001e88:	68c2      	ldr	r2, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 8001e8a:	f004 0a07 	and.w	sl, r4, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001e8e:	ea22 0203 	bic.w	r2, r2, r3
 8001e92:	432a      	orrs	r2, r5
      altrmask = altr << ((bit & 7) * 4);
 8001e94:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8001e98:	f1bc 0f02 	cmp.w	ip, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001e9c:	60c2      	str	r2, [r0, #12]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001e9e:	ea6f 0303 	mvn.w	r3, r3
      altrmask = altr << ((bit & 7) * 4);
 8001ea2:	fa07 f20a 	lsl.w	r2, r7, sl
      m4 = 15 << ((bit & 7) * 4);
 8001ea6:	fa09 fa0a 	lsl.w	sl, r9, sl
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8001eaa:	d1cb      	bne.n	8001e44 <_pal_lld_setgroupmode+0x24>
        if (bit < 8)
 8001eac:	2c07      	cmp	r4, #7
 8001eae:	d816      	bhi.n	8001ede <_pal_lld_setgroupmode+0xbe>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001eb0:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8001eb4:	ea2b 0a0a 	bic.w	sl, fp, sl
 8001eb8:	ea4a 0202 	orr.w	r2, sl, r2
 8001ebc:	6202      	str	r2, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8001ebe:	6802      	ldr	r2, [r0, #0]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	4333      	orrs	r3, r6
    if (!mask)
 8001ec4:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 8001ec6:	6003      	str	r3, [r0, #0]
    if (!mask)
 8001ec8:	d1cc      	bne.n	8001e64 <_pal_lld_setgroupmode+0x44>
  }
}
 8001eca:	b003      	add	sp, #12
 8001ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001ed0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ed2:	ea23 0a0a 	bic.w	sl, r3, sl
 8001ed6:	ea4a 0202 	orr.w	r2, sl, r2
 8001eda:	6242      	str	r2, [r0, #36]	; 0x24
 8001edc:	e7c0      	b.n	8001e60 <_pal_lld_setgroupmode+0x40>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001ede:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 8001ee2:	ea2b 0a0a 	bic.w	sl, fp, sl
 8001ee6:	ea4a 0202 	orr.w	r2, sl, r2
 8001eea:	6242      	str	r2, [r0, #36]	; 0x24
 8001eec:	e7e7      	b.n	8001ebe <_pal_lld_setgroupmode+0x9e>
 8001eee:	bf00      	nop

08001ef0 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8001ef0:	b538      	push	{r3, r4, r5, lr}
 8001ef2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8001ef6:	4604      	mov	r4, r0
 8001ef8:	2b15      	cmp	r3, #21
 8001efa:	d816      	bhi.n	8001f2a <_usb_ep0out+0x3a>
 8001efc:	e8df f003 	tbb	[pc, r3]
 8001f00:	15151516 	.word	0x15151516
 8001f04:	15161515 	.word	0x15161515
 8001f08:	16161615 	.word	0x16161615
 8001f0c:	15151515 	.word	0x15151515
 8001f10:	15151515 	.word	0x15151515
 8001f14:	2c0b      	.short	0x2c0b
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8001f16:	68c3      	ldr	r3, [r0, #12]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	b92b      	cbnz	r3, 8001f2a <_usb_ep0out+0x3a>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 8001f1e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001f20:	b103      	cbz	r3, 8001f24 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 8001f22:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8001f2a:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8001f2c:	6d43      	ldr	r3, [r0, #84]	; 0x54
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001f2e:	6841      	ldr	r1, [r0, #4]
 8001f30:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001f34:	680d      	ldr	r5, [r1, #0]
 8001f36:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001f3a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8001f3e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001f42:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001f46:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8001f4a:	b10d      	cbz	r5, 8001f50 <_usb_ep0out+0x60>
 8001f4c:	2106      	movs	r1, #6
 8001f4e:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8001f50:	2306      	movs	r3, #6
 8001f52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001f56:	bd38      	pop	{r3, r4, r5, pc}
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8001f58:	230b      	movs	r3, #11
 8001f5a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 8001f5e:	2320      	movs	r3, #32
 8001f60:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8001f64:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001f66:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8001f68:	695b      	ldr	r3, [r3, #20]
  isp->txbuf  = buf;
 8001f6a:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8001f72:	4629      	mov	r1, r5
  isp->txcnt  = 0;
 8001f74:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 8001f78:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 8001f7a:	f7ff fe29 	bl	8001bd0 <usb_lld_start_in>
 8001f7e:	f385 8811 	msr	BASEPRI, r5
}
 8001f82:	bd38      	pop	{r3, r4, r5, pc}
	...

08001f90 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8001f90:	b538      	push	{r3, r4, r5, lr}
 8001f92:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8001f96:	4604      	mov	r4, r0
 8001f98:	2b15      	cmp	r3, #21
 8001f9a:	d821      	bhi.n	8001fe0 <_usb_ep0in+0x50>
 8001f9c:	e8df f003 	tbb	[pc, r3]
 8001fa0:	2020200b 	.word	0x2020200b
 8001fa4:	200b2020 	.word	0x200b2020
 8001fa8:	48312120 	.word	0x48312120
 8001fac:	20202020 	.word	0x20202020
 8001fb0:	20202020 	.word	0x20202020
 8001fb4:	0b0b      	.short	0x0b0b
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8001fb6:	6d43      	ldr	r3, [r0, #84]	; 0x54
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001fb8:	6841      	ldr	r1, [r0, #4]
 8001fba:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001fbe:	680d      	ldr	r5, [r1, #0]
 8001fc0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001fc4:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8001fc8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001fcc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001fd0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8001fd4:	b10d      	cbz	r5, 8001fda <_usb_ep0in+0x4a>
 8001fd6:	2106      	movs	r1, #6
 8001fd8:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8001fda:	2306      	movs	r3, #6
 8001fdc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001fe0:	bd38      	pop	{r3, r4, r5, pc}
  hw |= (uint16_t)*p << 8U;
 8001fe2:	f890 204b 	ldrb.w	r2, [r0, #75]	; 0x4b
 8001fe6:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
    if ((usbp->ep0n < max) &&
 8001fea:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    max = (size_t)get_hword(&usbp->setup[6]);
 8001fec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if ((usbp->ep0n < max) &&
 8001ff0:	4299      	cmp	r1, r3
 8001ff2:	d206      	bcs.n	8002002 <_usb_ep0in+0x72>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8001ff4:	68c3      	ldr	r3, [r0, #12]
 8001ff6:	8a1b      	ldrh	r3, [r3, #16]
 8001ff8:	fbb1 f5f3 	udiv	r5, r1, r3
 8001ffc:	fb03 1515 	mls	r5, r3, r5, r1
    if ((usbp->ep0n < max) &&
 8002000:	b1ed      	cbz	r5, 800203e <_usb_ep0in+0xae>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8002002:	2314      	movs	r3, #20
 8002004:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002008:	2320      	movs	r3, #32
 800200a:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 800200e:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002010:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8002012:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 8002014:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800201c:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 800201e:	e9c3 5500 	strd	r5, r5, [r3]
  osp->rxbuf  = buf;
 8002022:	609d      	str	r5, [r3, #8]
  usb_lld_start_out(usbp, ep);
 8002024:	4629      	mov	r1, r5
 8002026:	f7ff fe6b 	bl	8001d00 <usb_lld_start_out>
 800202a:	f385 8811 	msr	BASEPRI, r5
}
 800202e:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 8002030:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002032:	b103      	cbz	r3, 8002036 <_usb_ep0in+0xa6>
      usbp->ep0endcb(usbp);
 8002034:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 8002036:	2300      	movs	r3, #0
 8002038:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800203c:	bd38      	pop	{r3, r4, r5, pc}
 800203e:	2320      	movs	r3, #32
 8002040:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8002044:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002046:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8002048:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8002050:	4629      	mov	r1, r5
  isp->txcnt  = 0;
 8002052:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 8002056:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 8002058:	f7ff fdba 	bl	8001bd0 <usb_lld_start_in>
 800205c:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 8002060:	230a      	movs	r3, #10
 8002062:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002066:	bd38      	pop	{r3, r4, r5, pc}
	...

08002070 <usbStartTransmitI>:
                       const uint8_t *buf, size_t n) {
 8002070:	b4f0      	push	{r4, r5, r6, r7}
  isp = usbp->epc[ep]->in_state;
 8002072:	eb00 0581 	add.w	r5, r0, r1, lsl #2
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002076:	8907      	ldrh	r7, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8002078:	f8d5 c00c 	ldr.w	ip, [r5, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800207c:	2501      	movs	r5, #1
  isp = usbp->epc[ep]->in_state;
 800207e:	f8dc 6014 	ldr.w	r6, [ip, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002082:	408d      	lsls	r5, r1
 8002084:	433d      	orrs	r5, r7
  isp->txcnt  = 0;
 8002086:	2700      	movs	r7, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002088:	8105      	strh	r5, [r0, #8]
  isp->txcnt  = 0;
 800208a:	e9c6 3700 	strd	r3, r7, [r6]
  isp->txbuf  = buf;
 800208e:	60b2      	str	r2, [r6, #8]
}
 8002090:	bcf0      	pop	{r4, r5, r6, r7}
  usb_lld_start_in(usbp, ep);
 8002092:	f7ff bd9d 	b.w	8001bd0 <usb_lld_start_in>
 8002096:	bf00      	nop
	...

080020a0 <usbDisableEndpointsI>:
  otg_ram_reset(usbp);
 80020a0:	6d81      	ldr	r1, [r0, #88]	; 0x58
  usbp->transmitting &= 1U;
 80020a2:	6883      	ldr	r3, [r0, #8]
void usbDisableEndpointsI(USBDriver *usbp) {
 80020a4:	b4f0      	push	{r4, r5, r6, r7}
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 80020a6:	680c      	ldr	r4, [r1, #0]
 80020a8:	65c4      	str	r4, [r0, #92]	; 0x5c
    usbp->epc[i] = NULL;
 80020aa:	2200      	movs	r2, #0
  usbp->transmitting &= 1U;
 80020ac:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80020b0:	688f      	ldr	r7, [r1, #8]
  otg_disable_ep(usbp);
 80020b2:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80020b4:	6083      	str	r3, [r0, #8]
    usbp->epc[i] = NULL;
 80020b6:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80020ba:	6182      	str	r2, [r0, #24]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80020bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80020c0:	e000      	b.n	80020c4 <usbDisableEndpointsI+0x24>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80020c2:	4632      	mov	r2, r6
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80020c4:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 80020c8:	460b      	mov	r3, r1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 80020ca:	f8d1 0900 	ldr.w	r0, [r1, #2304]	; 0x900
 80020ce:	2800      	cmp	r0, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80020d0:	f102 0601 	add.w	r6, r2, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 80020d4:	da05      	bge.n	80020e2 <usbDisableEndpointsI+0x42>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 80020d6:	f8d1 0900 	ldr.w	r0, [r1, #2304]	; 0x900
 80020da:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80020de:	f8c1 0900 	str.w	r0, [r1, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 80020e2:	f8d1 0b00 	ldr.w	r0, [r1, #2816]	; 0xb00
 80020e6:	2800      	cmp	r0, #0
 80020e8:	da05      	bge.n	80020f6 <usbDisableEndpointsI+0x56>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 80020ea:	f8d1 0b00 	ldr.w	r0, [r1, #2816]	; 0xb00
 80020ee:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80020f2:	f8c1 0b00 	str.w	r0, [r1, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80020f6:	42ba      	cmp	r2, r7
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80020f8:	f8c3 5908 	str.w	r5, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80020fc:	f8c3 5b08 	str.w	r5, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8002100:	d1df      	bne.n	80020c2 <usbDisableEndpointsI+0x22>
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8002102:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002106:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
}
 800210a:	bcf0      	pop	{r4, r5, r6, r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop

08002110 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
	...

08002120 <_ctl.lto_priv.0>:
}
 8002120:	2000      	movs	r0, #0
 8002122:	4770      	bx	lr
	...

08002130 <_ctl.lto_priv.1>:
 8002130:	2000      	movs	r0, #0
 8002132:	4770      	bx	lr
	...

08002140 <sdu_start_receive>:
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 8002140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002142:	f8d0 148c 	ldr.w	r1, [r0, #1164]	; 0x48c
 8002146:	680a      	ldr	r2, [r1, #0]
 8002148:	7813      	ldrb	r3, [r2, #0]
 800214a:	2b04      	cmp	r3, #4
 800214c:	d102      	bne.n	8002154 <sdu_start_receive+0x14>
 800214e:	7a03      	ldrb	r3, [r0, #8]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d001      	beq.n	8002158 <sdu_start_receive+0x18>
    return true;
 8002154:	2001      	movs	r0, #1
}
 8002156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8002158:	790c      	ldrb	r4, [r1, #4]
 800215a:	8955      	ldrh	r5, [r2, #10]
 800215c:	2301      	movs	r3, #1
 800215e:	fa03 f404 	lsl.w	r4, r3, r4
 8002162:	4225      	tst	r5, r4
 8002164:	d1f6      	bne.n	8002154 <sdu_start_receive+0x14>
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 8002166:	e9d0 4607 	ldrd	r4, r6, [r0, #28]
 800216a:	42b4      	cmp	r4, r6
 800216c:	d014      	beq.n	8002198 <sdu_start_receive+0x58>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800216e:	7949      	ldrb	r1, [r1, #5]
  osp = usbp->epc[ep]->out_state;
 8002170:	eb02 0381 	add.w	r3, r2, r1, lsl #2
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002174:	2001      	movs	r0, #1
  osp = usbp->epc[ep]->out_state;
 8002176:	68db      	ldr	r3, [r3, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002178:	4088      	lsls	r0, r1
  osp = usbp->epc[ep]->out_state;
 800217a:	699e      	ldr	r6, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800217c:	4305      	orrs	r5, r0
    return NULL;
  }

  return ibqp->bwrptr + sizeof (size_t);
 800217e:	1d23      	adds	r3, r4, #4
  osp->rxsize = n;
 8002180:	f44f 7780 	mov.w	r7, #256	; 0x100
  osp->rxcnt  = 0;
 8002184:	2400      	movs	r4, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002186:	8155      	strh	r5, [r2, #10]
  usb_lld_start_out(usbp, ep);
 8002188:	4610      	mov	r0, r2
  osp->rxcnt  = 0;
 800218a:	e9c6 7400 	strd	r7, r4, [r6]
  osp->rxbuf  = buf;
 800218e:	60b3      	str	r3, [r6, #8]
  usb_lld_start_out(usbp, ep);
 8002190:	f7ff fdb6 	bl	8001d00 <usb_lld_start_out>
  return false;
 8002194:	4620      	mov	r0, r4
}
 8002196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ibqIsFullI(ibqp)) {
 8002198:	6980      	ldr	r0, [r0, #24]
 800219a:	2800      	cmp	r0, #0
 800219c:	d0e7      	beq.n	800216e <sdu_start_receive+0x2e>
 800219e:	e7d9      	b.n	8002154 <sdu_start_receive+0x14>

080021a0 <ibnotify>:
  (void) sdu_start_receive(sdup);
 80021a0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80021a2:	f7ff bfcd 	b.w	8002140 <sdu_start_receive>
 80021a6:	bf00      	nop
	...

080021b0 <sduDataReceived>:
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 80021b0:	3109      	adds	r1, #9
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 80021b2:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 80021b4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  if (sdup == NULL) {
 80021b8:	b194      	cbz	r4, 80021e0 <sduDataReceived+0x30>
 80021ba:	2320      	movs	r3, #32
 80021bc:	f383 8811 	msr	BASEPRI, r3
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 80021c0:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 80021c4:	6813      	ldr	r3, [r2, #0]
 80021c6:	7952      	ldrb	r2, [r2, #5]
 80021c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	685d      	ldr	r5, [r3, #4]
  if (size > (size_t)0) {
 80021d2:	b935      	cbnz	r5, 80021e2 <sduDataReceived+0x32>
  (void) sdu_start_receive(sdup);
 80021d4:	4620      	mov	r0, r4
 80021d6:	f7ff ffb3 	bl	8002140 <sdu_start_receive>
 80021da:	2300      	movs	r3, #0
 80021dc:	f383 8811 	msr	BASEPRI, r3
}
 80021e0:	bd38      	pop	{r3, r4, r5, pc}
 80021e2:	2104      	movs	r1, #4
 80021e4:	1860      	adds	r0, r4, r1
 80021e6:	f7ff fb9b 	bl	8001920 <chEvtBroadcastFlagsI>

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 80021ea:	69e3      	ldr	r3, [r4, #28]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
 80021ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
  *((size_t *)ibqp->bwrptr) = size;
 80021ee:	601d      	str	r5, [r3, #0]
  ibqp->bwrptr += ibqp->bsize;
 80021f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  ibqp->bcounter++;
 80021f2:	69a2      	ldr	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 80021f4:	4403      	add	r3, r0
  if (ibqp->bwrptr >= ibqp->btop) {
 80021f6:	428b      	cmp	r3, r1
  ibqp->bwrptr += ibqp->bsize;
 80021f8:	61e3      	str	r3, [r4, #28]
  ibqp->bcounter++;
 80021fa:	f102 0201 	add.w	r2, r2, #1
    ibqp->bwrptr = ibqp->buffers;
 80021fe:	bf28      	it	cs
 8002200:	6b23      	ldrcs	r3, [r4, #48]	; 0x30
  ibqp->bcounter++;
 8002202:	61a2      	str	r2, [r4, #24]
    ibqPostFullBufferI(&sdup->ibqueue, size);
 8002204:	f104 000c 	add.w	r0, r4, #12
    ibqp->bwrptr = ibqp->buffers;
 8002208:	bf28      	it	cs
 800220a:	61e3      	strcs	r3, [r4, #28]
  chThdDequeueNextI(tqp, msg);
 800220c:	f7ff fb78 	bl	8001900 <chThdDequeueNextI.constprop.0>
 8002210:	e7e0      	b.n	80021d4 <sduDataReceived+0x24>
 8002212:	bf00      	nop
	...

08002220 <obqGetFullBufferI>:
 * @retval NULL         if the queue is empty.
 *
 * @iclass
 */
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {
 8002220:	4603      	mov	r3, r0

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 8002222:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
 8002226:	4282      	cmp	r2, r0
 8002228:	d003      	beq.n	8002232 <obqGetFullBufferI+0x12>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 800222a:	f850 3b04 	ldr.w	r3, [r0], #4
 800222e:	600b      	str	r3, [r1, #0]

  return obqp->brdptr + sizeof (size_t);
}
 8002230:	4770      	bx	lr
  if (obqIsEmptyI(obqp)) {
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f8      	beq.n	800222a <obqGetFullBufferI+0xa>
    return NULL;
 8002238:	2000      	movs	r0, #0
 800223a:	4770      	bx	lr
 800223c:	0000      	movs	r0, r0
	...

08002240 <obnotify>:
static void obnotify(io_buffers_queue_t *bqp) {
 8002240:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8002242:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002244:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8002248:	6813      	ldr	r3, [r2, #0]
 800224a:	7819      	ldrb	r1, [r3, #0]
 800224c:	2904      	cmp	r1, #4
static void obnotify(io_buffers_queue_t *bqp) {
 800224e:	b082      	sub	sp, #8
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002250:	d102      	bne.n	8002258 <obnotify+0x18>
 8002252:	7a21      	ldrb	r1, [r4, #8]
 8002254:	2902      	cmp	r1, #2
 8002256:	d001      	beq.n	800225c <obnotify+0x1c>
}
 8002258:	b002      	add	sp, #8
 800225a:	bd10      	pop	{r4, pc}
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800225c:	7911      	ldrb	r1, [r2, #4]
 800225e:	891a      	ldrh	r2, [r3, #8]
 8002260:	2301      	movs	r3, #1
 8002262:	408b      	lsls	r3, r1
 8002264:	4213      	tst	r3, r2
 8002266:	d1f7      	bne.n	8002258 <obnotify+0x18>
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8002268:	a901      	add	r1, sp, #4
 800226a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 800226e:	f7ff ffd7 	bl	8002220 <obqGetFullBufferI>
 8002272:	4602      	mov	r2, r0
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8002274:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	7901      	ldrb	r1, [r0, #4]
 800227c:	6800      	ldr	r0, [r0, #0]
 800227e:	f7ff fef7 	bl	8002070 <usbStartTransmitI>
 8002282:	e7e9      	b.n	8002258 <obnotify+0x18>
	...

08002290 <sof_handler>:

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8002290:	b510      	push	{r4, lr}
 8002292:	2320      	movs	r3, #32
 8002294:	b082      	sub	sp, #8
 8002296:	f383 8811 	msr	BASEPRI, r3
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800229a:	4c1e      	ldr	r4, [pc, #120]	; (8002314 <sof_handler+0x84>)
 800229c:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 80022a0:	6813      	ldr	r3, [r2, #0]
 80022a2:	7819      	ldrb	r1, [r3, #0]
 80022a4:	2904      	cmp	r1, #4
 80022a6:	d102      	bne.n	80022ae <sof_handler+0x1e>
 80022a8:	7a21      	ldrb	r1, [r4, #8]
 80022aa:	2902      	cmp	r1, #2
 80022ac:	d004      	beq.n	80022b8 <sof_handler+0x28>
 80022ae:	2300      	movs	r3, #0
 80022b0:	f383 8811 	msr	BASEPRI, r3
  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&PORTAB_SDU1);
  osalSysUnlockFromISR();
}
 80022b4:	b002      	add	sp, #8
 80022b6:	bd10      	pop	{r4, pc}
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80022b8:	7911      	ldrb	r1, [r2, #4]
 80022ba:	891a      	ldrh	r2, [r3, #8]
 80022bc:	2301      	movs	r3, #1
 80022be:	408b      	lsls	r3, r1
 80022c0:	4213      	tst	r3, r2
 80022c2:	d1f4      	bne.n	80022ae <sof_handler+0x1e>

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 80022c4:	e9d4 3215 	ldrd	r3, r2, [r4, #84]	; 0x54
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d1f0      	bne.n	80022ae <sof_handler+0x1e>
 80022cc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80022ce:	2a00      	cmp	r2, #0
 80022d0:	d0ed      	beq.n	80022ae <sof_handler+0x1e>
 80022d2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80022d4:	2a00      	cmp	r2, #0
 80022d6:	d0ea      	beq.n	80022ae <sof_handler+0x1e>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 80022d8:	3a04      	subs	r2, #4

    if (size > 0U) {
 80022da:	1ad2      	subs	r2, r2, r3
 80022dc:	d0e7      	beq.n	80022ae <sof_handler+0x1e>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 80022de:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
      if (obqp->bwrptr >= obqp->btop) {
 80022e0:	e9d4 1017 	ldrd	r1, r0, [r4, #92]	; 0x5c
      obqp->bwrptr += obqp->bsize;
 80022e4:	4403      	add	r3, r0
      if (obqp->bwrptr >= obqp->btop) {
 80022e6:	428b      	cmp	r3, r1
      obqp->bcounter--;
 80022e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
      obqp->bwrptr += obqp->bsize;
 80022ea:	6563      	str	r3, [r4, #84]	; 0x54
        obqp->bwrptr = obqp->buffers;
 80022ec:	bf24      	itt	cs
 80022ee:	6ea3      	ldrcs	r3, [r4, #104]	; 0x68
 80022f0:	6563      	strcs	r3, [r4, #84]	; 0x54
      obqp->bcounter--;
 80022f2:	3a01      	subs	r2, #1
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 80022f4:	2300      	movs	r3, #0
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80022f6:	a901      	add	r1, sp, #4
 80022f8:	4807      	ldr	r0, [pc, #28]	; (8002318 <sof_handler+0x88>)
      obqp->bcounter--;
 80022fa:	6522      	str	r2, [r4, #80]	; 0x50
      obqp->ptr = NULL;
 80022fc:	66e3      	str	r3, [r4, #108]	; 0x6c
 80022fe:	f7ff ff8f 	bl	8002220 <obqGetFullBufferI>
 8002302:	4602      	mov	r2, r0
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8002304:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
 8002308:	9b01      	ldr	r3, [sp, #4]
 800230a:	7901      	ldrb	r1, [r0, #4]
 800230c:	6800      	ldr	r0, [r0, #0]
 800230e:	f7ff feaf 	bl	8002070 <usbStartTransmitI>
 8002312:	e7cc      	b.n	80022ae <sof_handler+0x1e>
 8002314:	200013ac 	.word	0x200013ac
 8002318:	200013f0 	.word	0x200013f0
 800231c:	00000000 	.word	0x00000000

08002320 <sduDataTransmitted>:
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8002320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8002324:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8002328:	b082      	sub	sp, #8
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 800232a:	699e      	ldr	r6, [r3, #24]
  if (sdup == NULL) {
 800232c:	b1f6      	cbz	r6, 800236c <sduDataTransmitted+0x4c>
 800232e:	4604      	mov	r4, r0
 8002330:	460d      	mov	r5, r1
 8002332:	2320      	movs	r3, #32
 8002334:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8002338:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 800233c:	1d30      	adds	r0, r6, #4
 800233e:	2108      	movs	r1, #8
 8002340:	f7ff faee 	bl	8001920 <chEvtBroadcastFlagsI>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	b993      	cbnz	r3, 8002372 <sduDataTransmitted+0x52>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 800234c:	f106 0844 	add.w	r8, r6, #68	; 0x44
 8002350:	4640      	mov	r0, r8
 8002352:	a901      	add	r1, sp, #4
 8002354:	f7ff ff64 	bl	8002220 <obqGetFullBufferI>
  if (buf != NULL) {
 8002358:	4602      	mov	r2, r0
 800235a:	b320      	cbz	r0, 80023a6 <sduDataTransmitted+0x86>
    usbStartTransmitI(usbp, ep, buf, n);
 800235c:	9b01      	ldr	r3, [sp, #4]
 800235e:	4629      	mov	r1, r5
 8002360:	4620      	mov	r0, r4
 8002362:	f7ff fe85 	bl	8002070 <usbStartTransmitI>
 8002366:	2300      	movs	r3, #0
 8002368:	f383 8811 	msr	BASEPRI, r3
}
 800236c:	b002      	add	sp, #8
 800236e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (obqp->brdptr >= obqp->btop) {
 8002372:	e9d6 2017 	ldrd	r2, r0, [r6, #92]	; 0x5c
  obqp->brdptr += obqp->bsize;
 8002376:	6db3      	ldr	r3, [r6, #88]	; 0x58
  obqp->bcounter++;
 8002378:	6d31      	ldr	r1, [r6, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 800237a:	4403      	add	r3, r0
  if (obqp->brdptr >= obqp->btop) {
 800237c:	4293      	cmp	r3, r2
  obqp->brdptr += obqp->bsize;
 800237e:	65b3      	str	r3, [r6, #88]	; 0x58
  obqp->bcounter++;
 8002380:	f101 0101 	add.w	r1, r1, #1
    obqp->brdptr = obqp->buffers;
 8002384:	bf28      	it	cs
 8002386:	6eb3      	ldrcs	r3, [r6, #104]	; 0x68
  obqp->bcounter++;
 8002388:	6531      	str	r1, [r6, #80]	; 0x50
    obqReleaseEmptyBufferI(&sdup->obqueue);
 800238a:	f106 0844 	add.w	r8, r6, #68	; 0x44
    obqp->brdptr = obqp->buffers;
 800238e:	bf28      	it	cs
 8002390:	65b3      	strcs	r3, [r6, #88]	; 0x58
  chThdDequeueNextI(tqp, msg);
 8002392:	4640      	mov	r0, r8
 8002394:	f7ff fab4 	bl	8001900 <chThdDequeueNextI.constprop.0>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8002398:	4640      	mov	r0, r8
 800239a:	a901      	add	r1, sp, #4
 800239c:	f7ff ff40 	bl	8002220 <obqGetFullBufferI>
  if (buf != NULL) {
 80023a0:	4602      	mov	r2, r0
 80023a2:	2800      	cmp	r0, #0
 80023a4:	d1da      	bne.n	800235c <sduDataTransmitted+0x3c>
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	2a00      	cmp	r2, #0
 80023ae:	d0da      	beq.n	8002366 <sduDataTransmitted+0x46>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 80023b0:	8a1b      	ldrh	r3, [r3, #16]
 80023b2:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 80023b4:	4013      	ands	r3, r2
 80023b6:	d1d6      	bne.n	8002366 <sduDataTransmitted+0x46>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 80023b8:	4629      	mov	r1, r5
 80023ba:	f104 0244 	add.w	r2, r4, #68	; 0x44
 80023be:	4620      	mov	r0, r4
 80023c0:	f7ff fe56 	bl	8002070 <usbStartTransmitI>
 80023c4:	e7cf      	b.n	8002366 <sduDataTransmitted+0x46>
 80023c6:	bf00      	nop
	...

080023d0 <icu_lld_start.constprop.0>:
void icu_lld_start(ICUDriver *icup) {
 80023d0:	b470      	push	{r4, r5, r6}
  if (icup->state == ICU_STOP) {
 80023d2:	4934      	ldr	r1, [pc, #208]	; (80024a4 <icu_lld_start.constprop.0+0xd4>)
 80023d4:	780b      	ldrb	r3, [r1, #0]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d043      	beq.n	8002462 <icu_lld_start.constprop.0+0x92>
 80023da:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
 80023de:	2000      	movs	r0, #0
 80023e0:	6018      	str	r0, [r3, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 80023e2:	6358      	str	r0, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 80023e4:	6398      	str	r0, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
 80023e6:	6258      	str	r0, [r3, #36]	; 0x24
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 80023e8:	6848      	ldr	r0, [r1, #4]
  if (icup->config->arr == 0U) {
 80023ea:	e9d0 4506 	ldrd	r4, r5, [r0, #24]
  psc = (icup->clock / icup->config->frequency) - 1;
 80023ee:	6846      	ldr	r6, [r0, #4]
 80023f0:	fbb2 f2f6 	udiv	r2, r2, r6
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 80023f4:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 80023f8:	2600      	movs	r6, #0
  psc = (icup->clock / icup->config->frequency) - 1;
 80023fa:	3a01      	subs	r2, #1
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
 80023fc:	611e      	str	r6, [r3, #16]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
 80023fe:	60dc      	str	r4, [r3, #12]
  icup->tim->PSC = psc;
 8002400:	629a      	str	r2, [r3, #40]	; 0x28
  if (icup->config->arr == 0U) {
 8002402:	b9a5      	cbnz	r5, 800242e <icu_lld_start.constprop.0+0x5e>
    icup->tim->ARR = 0xFFFFFFFFU;
 8002404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002408:	62da      	str	r2, [r3, #44]	; 0x2c
  if (icup->config->channel == ICU_CHANNEL_1) {
 800240a:	7d02      	ldrb	r2, [r0, #20]
 800240c:	b99a      	cbnz	r2, 8002436 <icu_lld_start.constprop.0+0x66>
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 800240e:	2254      	movs	r2, #84	; 0x54
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
 8002410:	f240 2401 	movw	r4, #513	; 0x201
 8002414:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
 8002416:	609a      	str	r2, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8002418:	7802      	ldrb	r2, [r0, #0]
 800241a:	b1fa      	cbz	r2, 800245c <icu_lld_start.constprop.0+0x8c>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 800241c:	2213      	movs	r2, #19
 800241e:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[1];
 8002420:	f103 0238 	add.w	r2, r3, #56	; 0x38
    icup->pccrp = &icup->tim->CCR[0];
 8002424:	3334      	adds	r3, #52	; 0x34
}
 8002426:	bc70      	pop	{r4, r5, r6}
    icup->pccrp = &icup->tim->CCR[0];
 8002428:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800242c:	4770      	bx	lr
    icup->tim->ARR = icup->config->arr;
 800242e:	62dd      	str	r5, [r3, #44]	; 0x2c
  if (icup->config->channel == ICU_CHANNEL_1) {
 8002430:	7d02      	ldrb	r2, [r0, #20]
 8002432:	2a00      	cmp	r2, #0
 8002434:	d0eb      	beq.n	800240e <icu_lld_start.constprop.0+0x3e>
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 8002436:	2264      	movs	r2, #100	; 0x64
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
 8002438:	f44f 7481 	mov.w	r4, #258	; 0x102
 800243c:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
 800243e:	609a      	str	r2, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
 8002440:	7802      	ldrb	r2, [r0, #0]
 8002442:	b142      	cbz	r2, 8002456 <icu_lld_start.constprop.0+0x86>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 8002444:	2231      	movs	r2, #49	; 0x31
 8002446:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[0];
 8002448:	f103 0234 	add.w	r2, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
 800244c:	3338      	adds	r3, #56	; 0x38
}
 800244e:	bc70      	pop	{r4, r5, r6}
    icup->pccrp = &icup->tim->CCR[1];
 8002450:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8002454:	4770      	bx	lr
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
 8002456:	2213      	movs	r2, #19
 8002458:	621a      	str	r2, [r3, #32]
 800245a:	e7f5      	b.n	8002448 <icu_lld_start.constprop.0+0x78>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
 800245c:	2231      	movs	r2, #49	; 0x31
 800245e:	621a      	str	r2, [r3, #32]
 8002460:	e7de      	b.n	8002420 <icu_lld_start.constprop.0+0x50>
      rccEnableTIM2(true);
 8002462:	4811      	ldr	r0, [pc, #68]	; (80024a8 <icu_lld_start.constprop.0+0xd8>)
      icup->clock = STM32_TIMCLK1;
 8002464:	4a11      	ldr	r2, [pc, #68]	; (80024ac <icu_lld_start.constprop.0+0xdc>)
      rccEnableTIM2(true);
 8002466:	6c03      	ldr	r3, [r0, #64]	; 0x40
      icup->clock = STM32_TIMCLK1;
 8002468:	608a      	str	r2, [r1, #8]
      rccEnableTIM2(true);
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6403      	str	r3, [r0, #64]	; 0x40
 8002470:	6e05      	ldr	r5, [r0, #96]	; 0x60
 8002472:	68cb      	ldr	r3, [r1, #12]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8002474:	4c0e      	ldr	r4, [pc, #56]	; (80024b0 <icu_lld_start.constprop.0+0xe0>)
 8002476:	f045 0501 	orr.w	r5, r5, #1
 800247a:	6605      	str	r5, [r0, #96]	; 0x60
 800247c:	6e05      	ldr	r5, [r0, #96]	; 0x60
      rccResetTIM2();
 800247e:	6a05      	ldr	r5, [r0, #32]
 8002480:	f045 0501 	orr.w	r5, r5, #1
 8002484:	6205      	str	r5, [r0, #32]
 8002486:	6a05      	ldr	r5, [r0, #32]
 8002488:	f025 0501 	bic.w	r5, r5, #1
 800248c:	6205      	str	r5, [r0, #32]
 800248e:	6a00      	ldr	r0, [r0, #32]
 8002490:	2570      	movs	r5, #112	; 0x70
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002492:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8002496:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800249a:	f8c4 0180 	str.w	r0, [r4, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800249e:	6020      	str	r0, [r4, #0]
 80024a0:	e7a2      	b.n	80023e8 <icu_lld_start.constprop.0+0x18>
 80024a2:	bf00      	nop
 80024a4:	20000c80 	.word	0x20000c80
 80024a8:	40023800 	.word	0x40023800
 80024ac:	0501bd00 	.word	0x0501bd00
 80024b0:	e000e100 	.word	0xe000e100
	...

080024c0 <chSchWakeupS.constprop.0>:
  thread_t *otp = currp;
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <chSchWakeupS.constprop.0+0x54>)
 80024c2:	6959      	ldr	r1, [r3, #20]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80024c4:	b430      	push	{r4, r5}
  if (ntp->prio <= otp->prio) {
 80024c6:	688d      	ldr	r5, [r1, #8]
 80024c8:	6884      	ldr	r4, [r0, #8]
  ntp->u.rdymsg = msg;
 80024ca:	2200      	movs	r2, #0
  if (ntp->prio <= otp->prio) {
 80024cc:	42ac      	cmp	r4, r5
  ntp->u.rdymsg = msg;
 80024ce:	6242      	str	r2, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 80024d0:	d80c      	bhi.n	80024ec <chSchWakeupS.constprop.0+0x2c>
  tp->state = CH_STATE_READY;
 80024d2:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80024d6:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	4294      	cmp	r4, r2
 80024dc:	d9fb      	bls.n	80024d6 <chSchWakeupS.constprop.0+0x16>
  tp->queue.prev             = cp->queue.prev;
 80024de:	685a      	ldr	r2, [r3, #4]
}
 80024e0:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 80024e2:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80024e6:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80024e8:	6058      	str	r0, [r3, #4]
}
 80024ea:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 80024ec:	f881 2020 	strb.w	r2, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80024f0:	461a      	mov	r2, r3
    cp = cp->queue.next;
 80024f2:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio > tp->prio);
 80024f4:	6894      	ldr	r4, [r2, #8]
 80024f6:	42a5      	cmp	r5, r4
 80024f8:	d3fb      	bcc.n	80024f2 <chSchWakeupS.constprop.0+0x32>
  tp->queue.prev             = cp->queue.prev;
 80024fa:	6854      	ldr	r4, [r2, #4]
 80024fc:	604c      	str	r4, [r1, #4]
    ntp->state = CH_STATE_CURRENT;
 80024fe:	2501      	movs	r5, #1
  tp->queue.next             = cp;
 8002500:	600a      	str	r2, [r1, #0]
  tp->queue.prev->queue.next = tp;
 8002502:	6021      	str	r1, [r4, #0]
  cp->queue.prev             = tp;
 8002504:	6051      	str	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8002506:	f880 5020 	strb.w	r5, [r0, #32]
}
 800250a:	bc30      	pop	{r4, r5}
    currp = ntp;
 800250c:	6158      	str	r0, [r3, #20]
    chSysSwitch(ntp, otp);
 800250e:	f7fd bee7 	b.w	80002e0 <_port_switch>
 8002512:	bf00      	nop
 8002514:	2000189c 	.word	0x2000189c
	...

08002520 <chThdCreateStatic.constprop.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8002520:	b570      	push	{r4, r5, r6, lr}
 8002522:	4603      	mov	r3, r0
 8002524:	2220      	movs	r2, #32
 8002526:	f382 8811 	msr	BASEPRI, r2
  REG_INSERT(tp);
 800252a:	4a1a      	ldr	r2, [pc, #104]	; (8002594 <chThdCreateStatic.constprop.0+0x74>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800252c:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
 8002530:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 8002534:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
  tp->refs      = (trefs_t)1;
 8002538:	2101      	movs	r1, #1
  REG_INSERT(tp);
 800253a:	6910      	ldr	r0, [r2, #16]
  tp->refs      = (trefs_t)1;
 800253c:	f883 1122 	strb.w	r1, [r3, #290]	; 0x122
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002540:	4d15      	ldr	r5, [pc, #84]	; (8002598 <chThdCreateStatic.constprop.0+0x78>)
  tp->name      = name;
 8002542:	4e16      	ldr	r6, [pc, #88]	; (800259c <chThdCreateStatic.constprop.0+0x7c>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002544:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
  tp->prio      = prio;
 8002548:	2180      	movs	r1, #128	; 0x80
  tp->state     = CH_STATE_WTSTART;
 800254a:	2402      	movs	r4, #2
 800254c:	f8a3 4120 	strh.w	r4, [r3, #288]	; 0x120
  tp->name      = name;
 8002550:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
  tp = (thread_t *)((uint8_t *)wsp + size -
 8002554:	f503 7480 	add.w	r4, r3, #256	; 0x100
  tp->prio      = prio;
 8002558:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
  tp->realprio  = prio;
 800255c:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002560:	2500      	movs	r5, #0
  queue_init(&tp->msgqueue);
 8002562:	f503 7196 	add.w	r1, r3, #300	; 0x12c
  list_init(&tp->waiting);
 8002566:	f503 7694 	add.w	r6, r3, #296	; 0x128
  REG_INSERT(tp);
 800256a:	e9c3 2043 	strd	r2, r0, [r3, #268]	; 0x10c
  tp->epending  = (eventmask_t)0;
 800256e:	e9c3 554d 	strd	r5, r5, [r3, #308]	; 0x134
  tp->wabase = (stkalign_t *)wsp;
 8002572:	f8c3 311c 	str.w	r3, [r3, #284]	; 0x11c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002576:	f8c3 50e0 	str.w	r5, [r3, #224]	; 0xe0
  REG_INSERT(tp);
 800257a:	60c4      	str	r4, [r0, #12]
  tqp->next = (thread_t *)tqp;
 800257c:	e9c3 614a 	strd	r6, r1, [r3, #296]	; 0x128
  tqp->prev = (thread_t *)tqp;
 8002580:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
  chSchWakeupS(tp, MSG_OK);
 8002584:	4620      	mov	r0, r4
  REG_INSERT(tp);
 8002586:	6114      	str	r4, [r2, #16]
  chSchWakeupS(tp, MSG_OK);
 8002588:	f7ff ff9a 	bl	80024c0 <chSchWakeupS.constprop.0>
 800258c:	f385 8811 	msr	BASEPRI, r5
}
 8002590:	4620      	mov	r0, r4
 8002592:	bd70      	pop	{r4, r5, r6, pc}
 8002594:	2000189c 	.word	0x2000189c
 8002598:	080002f1 	.word	0x080002f1
 800259c:	08006070 	.word	0x08006070

080025a0 <chSchGoSleepS>:
  thread_t *otp = currp;
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <chSchGoSleepS+0x24>)
 80025a2:	6959      	ldr	r1, [r3, #20]
  thread_t *tp = tqp->next;
 80025a4:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 80025a6:	b410      	push	{r4}
  otp->state = newstate;
 80025a8:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 80025ac:	6810      	ldr	r0, [r2, #0]
 80025ae:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 80025b0:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80025b2:	6043      	str	r3, [r0, #4]
 80025b4:	f882 4020 	strb.w	r4, [r2, #32]
}
 80025b8:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 80025ba:	615a      	str	r2, [r3, #20]
  chSysSwitch(currp, otp);
 80025bc:	4610      	mov	r0, r2
 80025be:	f7fd be8f 	b.w	80002e0 <_port_switch>
 80025c2:	bf00      	nop
 80025c4:	2000189c 	.word	0x2000189c
	...

080025d0 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 80025d0:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 80025d2:	4b2e      	ldr	r3, [pc, #184]	; (800268c <chMtxLockS+0xbc>)
void chMtxLockS(mutex_t *mp) {
 80025d4:	4604      	mov	r4, r0

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 80025d6:	6880      	ldr	r0, [r0, #8]
  thread_t *ctp = currp;
 80025d8:	695d      	ldr	r5, [r3, #20]
  if (mp->owner != NULL) {
 80025da:	b330      	cbz	r0, 800262a <chMtxLockS+0x5a>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 80025dc:	68aa      	ldr	r2, [r5, #8]
 80025de:	6883      	ldr	r3, [r0, #8]
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d207      	bcs.n	80025f4 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 80025e4:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->prio = ctp->prio;
 80025e8:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 80025ea:	2b06      	cmp	r3, #6
 80025ec:	d035      	beq.n	800265a <chMtxLockS+0x8a>
 80025ee:	2b07      	cmp	r3, #7
 80025f0:	d020      	beq.n	8002634 <chMtxLockS+0x64>
 80025f2:	b19b      	cbz	r3, 800261c <chMtxLockS+0x4c>
  thread_t *cp = (thread_t *)tqp;
 80025f4:	4623      	mov	r3, r4
 80025f6:	e003      	b.n	8002600 <chMtxLockS+0x30>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80025f8:	6899      	ldr	r1, [r3, #8]
 80025fa:	68aa      	ldr	r2, [r5, #8]
 80025fc:	4291      	cmp	r1, r2
 80025fe:	d302      	bcc.n	8002606 <chMtxLockS+0x36>
    cp = cp->queue.next;
 8002600:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002602:	429c      	cmp	r4, r3
 8002604:	d1f8      	bne.n	80025f8 <chMtxLockS+0x28>
  tp->queue.prev             = cp->queue.prev;
 8002606:	685a      	ldr	r2, [r3, #4]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8002608:	2006      	movs	r0, #6
 800260a:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 800260e:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8002610:	605d      	str	r5, [r3, #4]
      ctp->u.wtmtxp = mp;
 8002612:	626c      	str	r4, [r5, #36]	; 0x24
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
    ctp->mtxlist = mp;
  }
}
 8002614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      chSchGoSleepS(CH_STATE_WTMTX);
 8002618:	f7ff bfc2 	b.w	80025a0 <chSchGoSleepS>
  tp->queue.prev->queue.next = tp->queue.next;
 800261c:	e9d0 3200 	ldrd	r3, r2, [r0]
 8002620:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8002622:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 8002624:	f7ff f93c 	bl	80018a0 <chSchReadyI>
          break;
 8002628:	e7e4      	b.n	80025f4 <chMtxLockS+0x24>
    mp->next = ctp->mtxlist;
 800262a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800262c:	e9c4 5302 	strd	r5, r3, [r4, #8]
    ctp->mtxlist = mp;
 8002630:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8002632:	bd70      	pop	{r4, r5, r6, pc}
  tp->queue.prev->queue.next = tp->queue.next;
 8002634:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8002638:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800263a:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800263c:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 800263e:	4633      	mov	r3, r6
 8002640:	e002      	b.n	8002648 <chMtxLockS+0x78>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002642:	6899      	ldr	r1, [r3, #8]
 8002644:	428a      	cmp	r2, r1
 8002646:	d802      	bhi.n	800264e <chMtxLockS+0x7e>
    cp = cp->queue.next;
 8002648:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800264a:	429e      	cmp	r6, r3
 800264c:	d1f9      	bne.n	8002642 <chMtxLockS+0x72>
  tp->queue.prev             = cp->queue.prev;
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8002654:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8002656:	6058      	str	r0, [r3, #4]
 8002658:	e7cc      	b.n	80025f4 <chMtxLockS+0x24>
  tp->queue.prev->queue.next = tp->queue.next;
 800265a:	e9d0 3100 	ldrd	r3, r1, [r0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 800265e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002660:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8002662:	6059      	str	r1, [r3, #4]
  thread_t *cp = (thread_t *)tqp;
 8002664:	4633      	mov	r3, r6
 8002666:	e002      	b.n	800266e <chMtxLockS+0x9e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002668:	6899      	ldr	r1, [r3, #8]
 800266a:	428a      	cmp	r2, r1
 800266c:	d802      	bhi.n	8002674 <chMtxLockS+0xa4>
    cp = cp->queue.next;
 800266e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002670:	429e      	cmp	r6, r3
 8002672:	d1f9      	bne.n	8002668 <chMtxLockS+0x98>
  tp->queue.prev             = cp->queue.prev;
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800267a:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800267c:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 800267e:	68b0      	ldr	r0, [r6, #8]
      while (tp->prio < ctp->prio) {
 8002680:	68aa      	ldr	r2, [r5, #8]
 8002682:	6883      	ldr	r3, [r0, #8]
 8002684:	4293      	cmp	r3, r2
 8002686:	d3ad      	bcc.n	80025e4 <chMtxLockS+0x14>
 8002688:	e7b4      	b.n	80025f4 <chMtxLockS+0x24>
 800268a:	bf00      	nop
 800268c:	2000189c 	.word	0x2000189c

08002690 <chThdExitS>:
void chThdExitS(msg_t msg) {
 8002690:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <chThdExitS+0x44>)
 8002694:	695c      	ldr	r4, [r3, #20]
  return (bool)(tlp->next != (thread_t *)tlp);
 8002696:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8002698:	6260      	str	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 800269a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800269e:	42ab      	cmp	r3, r5
 80026a0:	d007      	beq.n	80026b2 <chThdExitS+0x22>
  tlp->next = tp->queue.next;
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff f8fa 	bl	80018a0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 80026ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 80026ae:	42ab      	cmp	r3, r5
 80026b0:	d1f7      	bne.n	80026a2 <chThdExitS+0x12>
  if ((tp->refs == (trefs_t)0) &&
 80026b2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80026b6:	b93b      	cbnz	r3, 80026c8 <chThdExitS+0x38>
 80026b8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80026bc:	079b      	lsls	r3, r3, #30
 80026be:	d103      	bne.n	80026c8 <chThdExitS+0x38>
    REG_REMOVE(tp);
 80026c0:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 80026c4:	60d3      	str	r3, [r2, #12]
 80026c6:	611a      	str	r2, [r3, #16]
}
 80026c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 80026cc:	200f      	movs	r0, #15
 80026ce:	f7ff bf67 	b.w	80025a0 <chSchGoSleepS>
 80026d2:	bf00      	nop
 80026d4:	2000189c 	.word	0x2000189c
	...

080026e0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80026e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != timeout) {
 80026e2:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80026e4:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 80026e6:	d048      	beq.n	800277a <chSchGoSleepTimeoutS+0x9a>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 80026e8:	4c3d      	ldr	r4, [pc, #244]	; (80027e0 <chSchGoSleepTimeoutS+0x100>)

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 80026ea:	4f3e      	ldr	r7, [pc, #248]	; (80027e4 <chSchGoSleepTimeoutS+0x104>)
  vtp->par = par;
 80026ec:	6963      	ldr	r3, [r4, #20]
 80026ee:	9305      	str	r3, [sp, #20]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80026f0:	4626      	mov	r6, r4
 80026f2:	2902      	cmp	r1, #2
 80026f4:	f856 3f18 	ldr.w	r3, [r6, #24]!
 80026f8:	4605      	mov	r5, r0
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80026fa:	483b      	ldr	r0, [pc, #236]	; (80027e8 <chSchGoSleepTimeoutS+0x108>)
 80026fc:	bf38      	it	cc
 80026fe:	2102      	movcc	r1, #2
 8002700:	42b3      	cmp	r3, r6
 8002702:	6a42      	ldr	r2, [r0, #36]	; 0x24
  vtp->func = vtfunc;
 8002704:	9704      	str	r7, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002706:	d059      	beq.n	80027bc <chSchGoSleepTimeoutS+0xdc>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8002708:	6a67      	ldr	r7, [r4, #36]	; 0x24
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 800270a:	1bd2      	subs	r2, r2, r7
 800270c:	1889      	adds	r1, r1, r2

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 800270e:	d32e      	bcc.n	800276e <chSchGoSleepTimeoutS+0x8e>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8002710:	6898      	ldr	r0, [r3, #8]
      p = p->next;
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
      delta -= p->delta;
 8002716:	1a09      	subs	r1, r1, r0
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8002718:	4291      	cmp	r1, r2
 800271a:	d904      	bls.n	8002726 <chSchGoSleepTimeoutS+0x46>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 800271c:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 800271e:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	428a      	cmp	r2, r1
 8002724:	d3fa      	bcc.n	800271c <chSchGoSleepTimeoutS+0x3c>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
 800272a:	af01      	add	r7, sp, #4
  vtp->next = p;
 800272c:	9301      	str	r3, [sp, #4]
  vtp->prev->next = vtp;
 800272e:	6017      	str	r7, [r2, #0]
  p->prev = vtp;
 8002730:	605f      	str	r7, [r3, #4]
  vtp->delta = delta;
 8002732:	9103      	str	r1, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	1a51      	subs	r1, r2, r1

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8002738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->delta -= delta;
 800273c:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 800273e:	6222      	str	r2, [r4, #32]
    chSchGoSleepS(newstate);
 8002740:	4628      	mov	r0, r5
 8002742:	f7ff ff2d 	bl	80025a0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8002746:	9b04      	ldr	r3, [sp, #16]
 8002748:	b16b      	cbz	r3, 8002766 <chSchGoSleepTimeoutS+0x86>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 800274a:	69a3      	ldr	r3, [r4, #24]
 800274c:	42bb      	cmp	r3, r7
 800274e:	d01b      	beq.n	8002788 <chSchGoSleepTimeoutS+0xa8>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8002750:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8002754:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8002756:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8002758:	42b3      	cmp	r3, r6
    vtp->next->prev = vtp->prev;
 800275a:	605a      	str	r2, [r3, #4]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800275c:	d003      	beq.n	8002766 <chSchGoSleepTimeoutS+0x86>
      vtp->next->delta += vtp->delta;
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	9903      	ldr	r1, [sp, #12]
 8002762:	440a      	add	r2, r1
 8002764:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 8002766:	6963      	ldr	r3, [r4, #20]
}
 8002768:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800276a:	b007      	add	sp, #28
 800276c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	4291      	cmp	r1, r2
 8002772:	d2d1      	bcs.n	8002718 <chSchGoSleepTimeoutS+0x38>
  return systime + (systime_t)interval;
 8002774:	440f      	add	r7, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002776:	6347      	str	r7, [r0, #52]	; 0x34
 8002778:	e7ce      	b.n	8002718 <chSchGoSleepTimeoutS+0x38>
    chSchGoSleepS(newstate);
 800277a:	4c19      	ldr	r4, [pc, #100]	; (80027e0 <chSchGoSleepTimeoutS+0x100>)
 800277c:	f7ff ff10 	bl	80025a0 <chSchGoSleepS>
  return currp->u.rdymsg;
 8002780:	6963      	ldr	r3, [r4, #20]
}
 8002782:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002784:	b007      	add	sp, #28
 8002786:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8002788:	9b01      	ldr	r3, [sp, #4]
 800278a:	61a3      	str	r3, [r4, #24]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 800278c:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800278e:	42b3      	cmp	r3, r6
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8002790:	605e      	str	r6, [r3, #4]
  vtp->func = NULL;
 8002792:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002794:	d020      	beq.n	80027d8 <chSchGoSleepTimeoutS+0xf8>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	9d03      	ldr	r5, [sp, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 800279a:	4813      	ldr	r0, [pc, #76]	; (80027e8 <chSchGoSleepTimeoutS+0x108>)
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 800279c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  ch.vtlist.next->delta += vtp->delta;
 800279e:	442a      	add	r2, r5
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80027a4:	1a58      	subs	r0, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 80027a6:	4282      	cmp	r2, r0
 80027a8:	d9dd      	bls.n	8002766 <chSchGoSleepTimeoutS+0x86>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 80027aa:	1acb      	subs	r3, r1, r3
 80027ac:	4413      	add	r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80027ae:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80027b0:	bf98      	it	ls
 80027b2:	1c82      	addls	r2, r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <chSchGoSleepTimeoutS+0x108>)
  return systime + (systime_t)interval;
 80027b6:	440a      	add	r2, r1
 80027b8:	635a      	str	r2, [r3, #52]	; 0x34
 80027ba:	e7d4      	b.n	8002766 <chSchGoSleepTimeoutS+0x86>
 80027bc:	188b      	adds	r3, r1, r2
      ch.vtlist.next = vtp;
 80027be:	af01      	add	r7, sp, #4
      ch.vtlist.lasttime = now;
 80027c0:	6262      	str	r2, [r4, #36]	; 0x24
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 80027c2:	e9cd 6601 	strd	r6, r6, [sp, #4]
      ch.vtlist.prev = vtp;
 80027c6:	e9c4 7706 	strd	r7, r7, [r4, #24]
      vtp->delta = delay;
 80027ca:	9103      	str	r1, [sp, #12]
  STM32_ST_TIM->SR     = 0;
 80027cc:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80027ce:	6343      	str	r3, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80027d0:	2302      	movs	r3, #2
  STM32_ST_TIM->SR     = 0;
 80027d2:	6102      	str	r2, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80027d4:	60c3      	str	r3, [r0, #12]
 80027d6:	e7b3      	b.n	8002740 <chSchGoSleepTimeoutS+0x60>
  STM32_ST_TIM->DIER = 0U;
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <chSchGoSleepTimeoutS+0x108>)
 80027da:	60da      	str	r2, [r3, #12]
    return;
 80027dc:	e7c3      	b.n	8002766 <chSchGoSleepTimeoutS+0x86>
 80027de:	bf00      	nop
 80027e0:	2000189c 	.word	0x2000189c
 80027e4:	08001831 	.word	0x08001831
 80027e8:	40000c00 	.word	0x40000c00
 80027ec:	00000000 	.word	0x00000000

080027f0 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 80027f0:	b161      	cbz	r1, 800280c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 80027f2:	4a08      	ldr	r2, [pc, #32]	; (8002814 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 80027f4:	b410      	push	{r4}
  queue_insert(currp, tqp);
 80027f6:	6952      	ldr	r2, [r2, #20]
  tp->queue.prev             = tqp->prev;
 80027f8:	6844      	ldr	r4, [r0, #4]
 80027fa:	4603      	mov	r3, r0
 80027fc:	e9c2 3400 	strd	r3, r4, [r2]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002800:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8002802:	6022      	str	r2, [r4, #0]
}
 8002804:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 8002806:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002808:	f7ff bf6a 	b.w	80026e0 <chSchGoSleepTimeoutS>
}
 800280c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	2000189c 	.word	0x2000189c
	...

08002820 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8002820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002822:	4604      	mov	r4, r0
 8002824:	460f      	mov	r7, r1
 8002826:	4616      	mov	r6, r2
 8002828:	2320      	movs	r3, #32
 800282a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800282e:	e003      	b.n	8002838 <oqPutTimeout+0x18>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8002830:	f7ff ffde 	bl	80027f0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8002834:	2800      	cmp	r0, #0
 8002836:	db18      	blt.n	800286a <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8002838:	68a5      	ldr	r5, [r4, #8]
 800283a:	4631      	mov	r1, r6
 800283c:	4620      	mov	r0, r4
 800283e:	2d00      	cmp	r5, #0
 8002840:	d0f6      	beq.n	8002830 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 8002842:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8002844:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8002846:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8002848:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800284a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800284c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800284e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8002850:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002854:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8002856:	bf24      	itt	cs
 8002858:	68e3      	ldrcs	r3, [r4, #12]
 800285a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 800285c:	69e3      	ldr	r3, [r4, #28]
 800285e:	b103      	cbz	r3, 8002862 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 8002860:	4798      	blx	r3
 8002862:	2000      	movs	r0, #0
 8002864:	f380 8811 	msr	BASEPRI, r0
}
 8002868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800286a:	f385 8811 	msr	BASEPRI, r5
 800286e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002870 <_putt.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002870:	3030      	adds	r0, #48	; 0x30
 8002872:	f7ff bfd5 	b.w	8002820 <oqPutTimeout>
 8002876:	bf00      	nop
	...

08002880 <_put.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002880:	3030      	adds	r0, #48	; 0x30
 8002882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002886:	f7ff bfcb 	b.w	8002820 <oqPutTimeout>
 800288a:	bf00      	nop
 800288c:	0000      	movs	r0, r0
	...

08002890 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8002890:	b570      	push	{r4, r5, r6, lr}
 8002892:	2320      	movs	r3, #32
 8002894:	4605      	mov	r5, r0
 8002896:	460e      	mov	r6, r1
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	e003      	b.n	80028a6 <iqGetTimeout+0x16>
 800289e:	f7ff ffa7 	bl	80027f0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80028a2:	2800      	cmp	r0, #0
 80028a4:	db1a      	blt.n	80028dc <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 80028a6:	68ac      	ldr	r4, [r5, #8]
 80028a8:	4631      	mov	r1, r6
 80028aa:	4628      	mov	r0, r5
 80028ac:	2c00      	cmp	r4, #0
 80028ae:	d0f6      	beq.n	800289e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 80028b0:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 80028b2:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 80028b4:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 80028b6:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 80028b8:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 80028ba:	4282      	cmp	r2, r0
  iqp->q_counter--;
 80028bc:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 80028be:	61aa      	str	r2, [r5, #24]
    iqp->q_rdptr = iqp->q_buffer;
 80028c0:	bf28      	it	cs
 80028c2:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 80028c4:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 80028c6:	bf28      	it	cs
 80028c8:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 80028ca:	69eb      	ldr	r3, [r5, #28]
 80028cc:	b10b      	cbz	r3, 80028d2 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 80028ce:	4628      	mov	r0, r5
 80028d0:	4798      	blx	r3
 80028d2:	2300      	movs	r3, #0
 80028d4:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 80028d8:	4620      	mov	r0, r4
}
 80028da:	bd70      	pop	{r4, r5, r6, pc}
 80028dc:	f384 8811 	msr	BASEPRI, r4
 80028e0:	bd70      	pop	{r4, r5, r6, pc}
 80028e2:	bf00      	nop
	...

080028f0 <_gett.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80028f0:	300c      	adds	r0, #12
 80028f2:	f7ff bfcd 	b.w	8002890 <iqGetTimeout>
 80028f6:	bf00      	nop
	...

08002900 <_get.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002900:	300c      	adds	r0, #12
 8002902:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002906:	f7ff bfc3 	b.w	8002890 <iqGetTimeout>
 800290a:	bf00      	nop
 800290c:	0000      	movs	r0, r0
	...

08002910 <obqGetEmptyBufferTimeoutS>:
                                sysinterval_t timeout) {
 8002910:	b538      	push	{r3, r4, r5, lr}
 8002912:	4604      	mov	r4, r0
 8002914:	460d      	mov	r5, r1
 8002916:	e005      	b.n	8002924 <obqGetEmptyBufferTimeoutS+0x14>
    if (obqp->suspended) {
 8002918:	7a23      	ldrb	r3, [r4, #8]
 800291a:	b983      	cbnz	r3, 800293e <obqGetEmptyBufferTimeoutS+0x2e>
 800291c:	f7ff ff68 	bl	80027f0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8002920:	2800      	cmp	r0, #0
 8002922:	db0b      	blt.n	800293c <obqGetEmptyBufferTimeoutS+0x2c>
  while (obqIsFullI(obqp)) {
 8002924:	68e3      	ldr	r3, [r4, #12]
 8002926:	4629      	mov	r1, r5
 8002928:	4620      	mov	r0, r4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f4      	beq.n	8002918 <obqGetEmptyBufferTimeoutS+0x8>
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 800292e:	6923      	ldr	r3, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 8002930:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8002932:	1d1a      	adds	r2, r3, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 8002934:	440b      	add	r3, r1
 8002936:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 800293a:	2000      	movs	r0, #0
}
 800293c:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 800293e:	f06f 0001 	mvn.w	r0, #1
}
 8002942:	bd38      	pop	{r3, r4, r5, pc}
	...

08002950 <obqPutTimeout>:
                    sysinterval_t timeout) {
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	2320      	movs	r3, #32
 8002954:	460d      	mov	r5, r1
 8002956:	4604      	mov	r4, r0
 8002958:	f383 8811 	msr	BASEPRI, r3
  if (obqp->ptr == NULL) {
 800295c:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800295e:	b1fe      	cbz	r6, 80029a0 <obqPutTimeout+0x50>
  *obqp->ptr = b;
 8002960:	7035      	strb	r5, [r6, #0]
  if (obqp->ptr >= obqp->top) {
 8002962:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
  obqp->ptr++;
 8002966:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 8002968:	4293      	cmp	r3, r2
  obqp->ptr++;
 800296a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 800296c:	d314      	bcc.n	8002998 <obqPutTimeout+0x48>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800296e:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
 8002970:	6923      	ldr	r3, [r4, #16]
  if (obqp->bwrptr >= obqp->btop) {
 8002972:	69a1      	ldr	r1, [r4, #24]
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8002974:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 8002976:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 8002978:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
 800297a:	68e2      	ldr	r2, [r4, #12]
  obqp->bwrptr += obqp->bsize;
 800297c:	4403      	add	r3, r0
  if (obqp->bwrptr >= obqp->btop) {
 800297e:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 8002980:	6123      	str	r3, [r4, #16]
    obqp->bwrptr = obqp->buffers;
 8002982:	bf24      	itt	cs
 8002984:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 8002986:	6123      	strcs	r3, [r4, #16]
  obqp->bcounter--;
 8002988:	3a01      	subs	r2, #1
  if (obqp->notify != NULL) {
 800298a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  obqp->bcounter--;
 800298c:	60e2      	str	r2, [r4, #12]
  obqp->ptr = NULL;
 800298e:	2200      	movs	r2, #0
 8002990:	62a2      	str	r2, [r4, #40]	; 0x28
  if (obqp->notify != NULL) {
 8002992:	b10b      	cbz	r3, 8002998 <obqPutTimeout+0x48>
    obqp->notify(obqp);
 8002994:	4620      	mov	r0, r4
 8002996:	4798      	blx	r3
 8002998:	2000      	movs	r0, #0
 800299a:	f380 8811 	msr	BASEPRI, r0
}
 800299e:	bd70      	pop	{r4, r5, r6, pc}
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 80029a0:	4611      	mov	r1, r2
 80029a2:	f7ff ffb5 	bl	8002910 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 80029a6:	b908      	cbnz	r0, 80029ac <obqPutTimeout+0x5c>
 80029a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80029aa:	e7d9      	b.n	8002960 <obqPutTimeout+0x10>
 80029ac:	f386 8811 	msr	BASEPRI, r6
}
 80029b0:	bd70      	pop	{r4, r5, r6, pc}
 80029b2:	bf00      	nop
	...

080029c0 <_putt.lto_priv.1>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 80029c0:	3044      	adds	r0, #68	; 0x44
 80029c2:	f7ff bfc5 	b.w	8002950 <obqPutTimeout>
 80029c6:	bf00      	nop
	...

080029d0 <_put.lto_priv.1>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 80029d0:	3044      	adds	r0, #68	; 0x44
 80029d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029d6:	f7ff bfbb 	b.w	8002950 <obqPutTimeout>
 80029da:	bf00      	nop
 80029dc:	0000      	movs	r0, r0
	...

080029e0 <ibqGetFullBufferTimeoutS>:
                                 sysinterval_t timeout) {
 80029e0:	b538      	push	{r3, r4, r5, lr}
 80029e2:	4604      	mov	r4, r0
 80029e4:	460d      	mov	r5, r1
 80029e6:	e005      	b.n	80029f4 <ibqGetFullBufferTimeoutS+0x14>
    if (ibqp->suspended) {
 80029e8:	7a23      	ldrb	r3, [r4, #8]
 80029ea:	b983      	cbnz	r3, 8002a0e <ibqGetFullBufferTimeoutS+0x2e>
 80029ec:	f7ff ff00 	bl	80027f0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80029f0:	2800      	cmp	r0, #0
 80029f2:	db0b      	blt.n	8002a0c <ibqGetFullBufferTimeoutS+0x2c>
  while (ibqIsEmptyI(ibqp)) {
 80029f4:	68e3      	ldr	r3, [r4, #12]
 80029f6:	4629      	mov	r1, r5
 80029f8:	4620      	mov	r0, r4
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f4      	beq.n	80029e8 <ibqGetFullBufferTimeoutS+0x8>
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80029fe:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8002a00:	681a      	ldr	r2, [r3, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8002a02:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8002a04:	441a      	add	r2, r3
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8002a06:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8002a0a:	2000      	movs	r0, #0
}
 8002a0c:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 8002a0e:	f06f 0001 	mvn.w	r0, #1
}
 8002a12:	bd38      	pop	{r3, r4, r5, pc}
	...

08002a20 <ibqGetTimeout>:
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	2320      	movs	r3, #32
 8002a24:	4604      	mov	r4, r0
 8002a26:	f383 8811 	msr	BASEPRI, r3
  if (ibqp->ptr == NULL) {
 8002a2a:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8002a2c:	b1e5      	cbz	r5, 8002a68 <ibqGetTimeout+0x48>
  msg = (msg_t)*ibqp->ptr;
 8002a2e:	f815 6b01 	ldrb.w	r6, [r5], #1
  if (ibqp->ptr >= ibqp->top) {
 8002a32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  ibqp->ptr++;
 8002a34:	62a5      	str	r5, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
 8002a36:	4295      	cmp	r5, r2
 8002a38:	d311      	bcc.n	8002a5e <ibqGetTimeout+0x3e>
  if (ibqp->brdptr >= ibqp->btop) {
 8002a3a:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
  ibqp->brdptr += ibqp->bsize;
 8002a3e:	6963      	ldr	r3, [r4, #20]
  ibqp->bcounter--;
 8002a40:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 8002a42:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 8002a44:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 8002a46:	6163      	str	r3, [r4, #20]
    ibqp->brdptr = ibqp->buffers;
 8002a48:	bf24      	itt	cs
 8002a4a:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
 8002a4c:	6163      	strcs	r3, [r4, #20]
  ibqp->bcounter--;
 8002a4e:	3a01      	subs	r2, #1
  if (ibqp->notify != NULL) {
 8002a50:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->bcounter--;
 8002a52:	60e2      	str	r2, [r4, #12]
  ibqp->ptr = NULL;
 8002a54:	2200      	movs	r2, #0
 8002a56:	62a2      	str	r2, [r4, #40]	; 0x28
  if (ibqp->notify != NULL) {
 8002a58:	b10b      	cbz	r3, 8002a5e <ibqGetTimeout+0x3e>
    ibqp->notify(ibqp);
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	4798      	blx	r3
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f383 8811 	msr	BASEPRI, r3
}
 8002a64:	4630      	mov	r0, r6
 8002a66:	bd70      	pop	{r4, r5, r6, pc}
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8002a68:	f7ff ffba 	bl	80029e0 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 8002a6c:	4606      	mov	r6, r0
 8002a6e:	b908      	cbnz	r0, 8002a74 <ibqGetTimeout+0x54>
 8002a70:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002a72:	e7dc      	b.n	8002a2e <ibqGetTimeout+0xe>
 8002a74:	f385 8811 	msr	BASEPRI, r5
      return msg;
 8002a78:	e7f4      	b.n	8002a64 <ibqGetTimeout+0x44>
 8002a7a:	bf00      	nop
 8002a7c:	0000      	movs	r0, r0
	...

08002a80 <_gett.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 8002a80:	300c      	adds	r0, #12
 8002a82:	f7ff bfcd 	b.w	8002a20 <ibqGetTimeout>
 8002a86:	bf00      	nop
	...

08002a90 <_get.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 8002a90:	300c      	adds	r0, #12
 8002a92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a96:	f7ff bfc3 	b.w	8002a20 <ibqGetTimeout>
 8002a9a:	bf00      	nop
 8002a9c:	0000      	movs	r0, r0
	...

08002aa0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8002aa0:	b508      	push	{r3, lr}
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	2320      	movs	r3, #32
 8002aa6:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8002aaa:	2008      	movs	r0, #8
 8002aac:	f7ff fe18 	bl	80026e0 <chSchGoSleepTimeoutS>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f383 8811 	msr	BASEPRI, r3
}
 8002ab6:	bd08      	pop	{r3, pc}
	...

08002ac0 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8002ac0:	b570      	push	{r4, r5, r6, lr}
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8002ac2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8002ac6:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8002ac8:	b113      	cbz	r3, 8002ad0 <_usb_ep0setup+0x10>
    usbp->ep0state = USB_EP0_STP_WAITING;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8002ad0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  if ((usbp->config->requests_hook_cb == NULL) ||
 8002ad4:	6862      	ldr	r2, [r4, #4]
 8002ad6:	68cb      	ldr	r3, [r1, #12]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	6819      	ldr	r1, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	64a3      	str	r3, [r4, #72]	; 0x48
 8002ae0:	6461      	str	r1, [r4, #68]	; 0x44
 8002ae2:	6893      	ldr	r3, [r2, #8]
 8002ae4:	b36b      	cbz	r3, 8002b42 <_usb_ep0setup+0x82>
      !(usbp->config->requests_hook_cb(usbp))) {
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 8002aea:	b350      	cbz	r0, 8002b42 <_usb_ep0setup+0x82>
 8002aec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002aee:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  hw |= (uint16_t)*p << 8U;
 8002af2:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 8002af6:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
  max = (size_t)get_hword(&usbp->setup[6]);
 8002afa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if (usbp->ep0n > max) {
 8002afe:	429a      	cmp	r2, r3
    usbp->ep0n = max;
 8002b00:	bf3c      	itt	cc
 8002b02:	63e2      	strcc	r2, [r4, #60]	; 0x3c
 8002b04:	4613      	movcc	r3, r2
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8002b06:	0602      	lsls	r2, r0, #24
 8002b08:	f100 80df 	bmi.w	8002cca <_usb_ep0setup+0x20a>
    if (usbp->ep0n != 0U) {
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 808f 	beq.w	8002c30 <_usb_ep0setup+0x170>
      usbp->ep0state = USB_EP0_OUT_RX;
 8002b12:	2315      	movs	r3, #21
 8002b14:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002b18:	2320      	movs	r3, #32
 8002b1a:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 8002b1e:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002b20:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8002b22:	699b      	ldr	r3, [r3, #24]
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8002b24:	e9d4 610e 	ldrd	r6, r1, [r4, #56]	; 0x38
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002b28:	f042 0201 	orr.w	r2, r2, #1
  osp->rxcnt  = 0;
 8002b2c:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002b2e:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8002b30:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8002b32:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_out(usbp, ep);
 8002b36:	4629      	mov	r1, r5
 8002b38:	f7ff f8e2 	bl	8001d00 <usb_lld_start_out>
 8002b3c:	f385 8811 	msr	BASEPRI, r5
}
 8002b40:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8002b42:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8002b46:	f010 0660 	ands.w	r6, r0, #96	; 0x60
 8002b4a:	d11c      	bne.n	8002b86 <_usb_ep0setup+0xc6>
           ((uint32_t)usbp->setup[1] << 8U))) {
 8002b4c:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002b50:	f000 037f 	and.w	r3, r0, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8002b54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002b58:	f240 3202 	movw	r2, #770	; 0x302
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	f000 8113 	beq.w	8002d88 <_usb_ep0setup+0x2c8>
 8002b62:	d844      	bhi.n	8002bee <_usb_ep0setup+0x12e>
 8002b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b68:	f000 8125 	beq.w	8002db6 <_usb_ep0setup+0x2f6>
 8002b6c:	d922      	bls.n	8002bb4 <_usb_ep0setup+0xf4>
 8002b6e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8002b72:	f000 812f 	beq.w	8002dd4 <_usb_ep0setup+0x314>
 8002b76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b7a:	d104      	bne.n	8002b86 <_usb_ep0setup+0xc6>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8002b7c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	f000 80d2 	beq.w	8002d2a <_usb_ep0setup+0x26a>
 8002b86:	6d62      	ldr	r2, [r4, #84]	; 0x54
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8002b88:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8002b8c:	6861      	ldr	r1, [r4, #4]
 8002b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b92:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8002b96:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8002b9a:	680d      	ldr	r5, [r1, #0]
 8002b9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ba0:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8002ba4:	b115      	cbz	r5, 8002bac <_usb_ep0setup+0xec>
 8002ba6:	2106      	movs	r1, #6
 8002ba8:	4620      	mov	r0, r4
 8002baa:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8002bac:	2306      	movs	r3, #6
 8002bae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d060      	beq.n	8002c7a <_usb_ep0setup+0x1ba>
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d150      	bne.n	8002c5e <_usb_ep0setup+0x19e>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8002bbc:	f994 1048 	ldrsb.w	r1, [r4, #72]	; 0x48
 8002bc0:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8002bc4:	2900      	cmp	r1, #0
  ctl = usbp->otg->ie[ep].DIEPCTL;
 8002bc6:	f002 010f 	and.w	r1, r2, #15
 8002bca:	bfb4      	ite	lt
 8002bcc:	3148      	addlt	r1, #72	; 0x48
  ctl = usbp->otg->oe[ep].DOEPCTL;
 8002bce:	3158      	addge	r1, #88	; 0x58
 8002bd0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002bd2:	0149      	lsls	r1, r1, #5
 8002bd4:	5851      	ldr	r1, [r2, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 8002bd6:	040d      	lsls	r5, r1, #16
 8002bd8:	d5d6      	bpl.n	8002b88 <_usb_ep0setup+0xc8>
  if (ctl & DOEPCTL_STALL)
 8002bda:	0289      	lsls	r1, r1, #10
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8002bdc:	bf4c      	ite	mi
 8002bde:	4a9c      	ldrmi	r2, [pc, #624]	; (8002e50 <_usb_ep0setup+0x390>)
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8002be0:	4a9c      	ldrpl	r2, [pc, #624]	; (8002e54 <_usb_ep0setup+0x394>)
 8002be2:	63a2      	str	r2, [r4, #56]	; 0x38
 8002be4:	2102      	movs	r1, #2
 8002be6:	2200      	movs	r2, #0
 8002be8:	e9c4 120f 	strd	r1, r2, [r4, #60]	; 0x3c
        return true;
 8002bec:	e781      	b.n	8002af2 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002bee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bf2:	f000 80c2 	beq.w	8002d7a <_usb_ep0setup+0x2ba>
 8002bf6:	d947      	bls.n	8002c88 <_usb_ep0setup+0x1c8>
 8002bf8:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8002bfc:	d139      	bne.n	8002c72 <_usb_ep0setup+0x1b2>
      if (usbp->state == USB_ACTIVE) {
 8002bfe:	7823      	ldrb	r3, [r4, #0]
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	f000 809c 	beq.w	8002d3e <_usb_ep0setup+0x27e>
      if (usbp->setup[2] != 0U) {
 8002c06:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002c0a:	b14b      	cbz	r3, 8002c20 <_usb_ep0setup+0x160>
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8002c0c:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 8002c0e:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
        usbp->state = USB_ACTIVE;
 8002c12:	2104      	movs	r1, #4
 8002c14:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8002c16:	6813      	ldr	r3, [r2, #0]
 8002c18:	b113      	cbz	r3, 8002c20 <_usb_ep0setup+0x160>
 8002c1a:	2102      	movs	r1, #2
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8002c20:	2300      	movs	r3, #0
 8002c22:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8002c26:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8002c2a:	6423      	str	r3, [r4, #64]	; 0x40
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8002c2c:	0603      	lsls	r3, r0, #24
 8002c2e:	d465      	bmi.n	8002cfc <_usb_ep0setup+0x23c>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8002c30:	230b      	movs	r3, #11
 8002c32:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002c36:	2320      	movs	r3, #32
 8002c38:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8002c3c:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002c3e:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8002c40:	695b      	ldr	r3, [r3, #20]
  isp->txbuf  = buf;
 8002c42:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002c44:	f042 0201 	orr.w	r2, r2, #1
 8002c48:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8002c4a:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 8002c4c:	e9c3 5500 	strd	r5, r5, [r3]
  isp->txbuf  = buf;
 8002c50:	609d      	str	r5, [r3, #8]
  usb_lld_start_in(usbp, ep);
 8002c52:	4629      	mov	r1, r5
 8002c54:	f7fe ffbc 	bl	8001bd0 <usb_lld_start_in>
 8002c58:	f385 8811 	msr	BASEPRI, r5
}
 8002c5c:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d191      	bne.n	8002b86 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8002c62:	2202      	movs	r2, #2
 8002c64:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8002c68:	6423      	str	r3, [r4, #64]	; 0x40
 8002c6a:	e9c4 120e 	strd	r1, r2, [r4, #56]	; 0x38
 8002c6e:	4613      	mov	r3, r2
 8002c70:	e73f      	b.n	8002af2 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002c72:	f640 4202 	movw	r2, #3074	; 0xc02
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d185      	bne.n	8002b86 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8002c7a:	4b77      	ldr	r3, [pc, #476]	; (8002e58 <_usb_ep0setup+0x398>)
 8002c7c:	63a3      	str	r3, [r4, #56]	; 0x38
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2302      	movs	r3, #2
 8002c82:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
    return true;
 8002c86:	e734      	b.n	8002af2 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002c88:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002c8c:	d06b      	beq.n	8002d66 <_usb_ep0setup+0x2a6>
 8002c8e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	f63f af77 	bhi.w	8002b86 <_usb_ep0setup+0xc6>
  hw |= (uint16_t)*p << 8U;
 8002c98:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8002c9c:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 8002c9e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8002ca2:	684d      	ldr	r5, [r1, #4]
 8002ca4:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8002ca8:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 8002cac:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	47a8      	blx	r5
    if (dp == NULL) {
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	f43f af66 	beq.w	8002b86 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8002cba:	e9d0 3200 	ldrd	r3, r2, [r0]
 8002cbe:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8002cc2:	6426      	str	r6, [r4, #64]	; 0x40
 8002cc4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    return true;
 8002cc8:	e713      	b.n	8002af2 <_usb_ep0setup+0x32>
    if (usbp->ep0n != 0U) {
 8002cca:	b1bb      	cbz	r3, 8002cfc <_usb_ep0setup+0x23c>
      usbp->ep0state = USB_EP0_IN_TX;
 8002ccc:	2309      	movs	r3, #9
 8002cce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002cd2:	2320      	movs	r3, #32
 8002cd4:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8002cd8:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002cda:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 8002cdc:	695b      	ldr	r3, [r3, #20]
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8002cde:	e9d4 610e 	ldrd	r6, r1, [r4, #56]	; 0x38
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
  isp->txcnt  = 0;
 8002ce6:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002ce8:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 8002cea:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 8002cec:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_in(usbp, ep);
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	f7fe ff6d 	bl	8001bd0 <usb_lld_start_in>
 8002cf6:	f385 8811 	msr	BASEPRI, r5
}
 8002cfa:	bd70      	pop	{r4, r5, r6, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8002cfc:	2314      	movs	r3, #20
 8002cfe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002d02:	2320      	movs	r3, #32
 8002d04:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 8002d08:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002d0a:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8002d0c:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 8002d0e:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8002d16:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8002d18:	e9c3 5500 	strd	r5, r5, [r3]
  osp->rxbuf  = buf;
 8002d1c:	609d      	str	r5, [r3, #8]
  usb_lld_start_out(usbp, ep);
 8002d1e:	4629      	mov	r1, r5
 8002d20:	f7fe ffee 	bl	8001d00 <usb_lld_start_out>
 8002d24:	f385 8811 	msr	BASEPRI, r5
}
 8002d28:	bd70      	pop	{r4, r5, r6, pc}
      usbp->status |= 2U;
 8002d2a:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002d2e:	63a6      	str	r6, [r4, #56]	; 0x38
      usbp->status |= 2U;
 8002d30:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002d34:	e9c4 660f 	strd	r6, r6, [r4, #60]	; 0x3c
      usbp->status |= 2U;
 8002d38:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
      return true;
 8002d3c:	e776      	b.n	8002c2c <_usb_ep0setup+0x16c>
 8002d3e:	2320      	movs	r3, #32
 8002d40:	f383 8811 	msr	BASEPRI, r3
        usbDisableEndpointsI(usbp);
 8002d44:	4620      	mov	r0, r4
 8002d46:	f7ff f9ab 	bl	80020a0 <usbDisableEndpointsI>
 8002d4a:	f386 8811 	msr	BASEPRI, r6
        usbp->state = USB_SELECTED;
 8002d4e:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8002d50:	6863      	ldr	r3, [r4, #4]
        usbp->configuration = 0U;
 8002d52:	f884 604f 	strb.w	r6, [r4, #79]	; 0x4f
        usbp->state = USB_SELECTED;
 8002d56:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f43f af53 	beq.w	8002c06 <_usb_ep0setup+0x146>
 8002d60:	4620      	mov	r0, r4
 8002d62:	4798      	blx	r3
 8002d64:	e74f      	b.n	8002c06 <_usb_ep0setup+0x146>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 8002d66:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8002d6a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002d6e:	d048      	beq.n	8002e02 <_usb_ep0setup+0x342>
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8002d70:	2300      	movs	r3, #0
 8002d72:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8002d76:	6423      	str	r3, [r4, #64]	; 0x40
    return true;
 8002d78:	e758      	b.n	8002c2c <_usb_ep0setup+0x16c>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8002d7a:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 8002d84:	6426      	str	r6, [r4, #64]	; 0x40
 8002d86:	e6b4      	b.n	8002af2 <_usb_ep0setup+0x32>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8002d88:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f47f aefa 	bne.w	8002b86 <_usb_ep0setup+0xc6>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8002d92:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8002d96:	f013 020f 	ands.w	r2, r3, #15
 8002d9a:	d0e9      	beq.n	8002d70 <_usb_ep0setup+0x2b0>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8002d9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002da0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002da2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8002da6:	d144      	bne.n	8002e32 <_usb_ep0setup+0x372>
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8002da8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002dac:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002db0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8002db4:	e7dc      	b.n	8002d70 <_usb_ep0setup+0x2b0>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8002db6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	f47f aee3 	bne.w	8002b86 <_usb_ep0setup+0xc6>
      usbp->status &= ~2U;
 8002dc0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002dc4:	63a6      	str	r6, [r4, #56]	; 0x38
      usbp->status &= ~2U;
 8002dc6:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002dca:	e9c4 660f 	strd	r6, r6, [r4, #60]	; 0x3c
      usbp->status &= ~2U;
 8002dce:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
      return true;
 8002dd2:	e72b      	b.n	8002c2c <_usb_ep0setup+0x16c>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8002dd4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f47f aed4 	bne.w	8002b86 <_usb_ep0setup+0xc6>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8002dde:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8002de2:	f013 020f 	ands.w	r2, r3, #15
 8002de6:	d0c3      	beq.n	8002d70 <_usb_ep0setup+0x2b0>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8002de8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002dec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002dee:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8002df2:	d125      	bne.n	8002e40 <_usb_ep0setup+0x380>
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 8002df4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002df8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002dfc:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8002e00:	e7b6      	b.n	8002d70 <_usb_ep0setup+0x2b0>
  usbp->address = usbp->setup[2];
 8002e02:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
  stm32_otg_t *otgp = usbp->otg;
 8002e06:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002e08:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 8002e0c:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8002e10:	6865      	ldr	r5, [r4, #4]
 8002e12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e16:	682d      	ldr	r5, [r5, #0]
 8002e18:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002e1c:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 8002e20:	b125      	cbz	r5, 8002e2c <_usb_ep0setup+0x36c>
 8002e22:	4620      	mov	r0, r4
 8002e24:	2101      	movs	r1, #1
 8002e26:	47a8      	blx	r5
 8002e28:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  usbp->state = USB_SELECTED;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	7023      	strb	r3, [r4, #0]
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8002e30:	e79e      	b.n	8002d70 <_usb_ep0setup+0x2b0>
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8002e32:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002e36:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002e3a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8002e3e:	e797      	b.n	8002d70 <_usb_ep0setup+0x2b0>
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8002e40:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002e44:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002e48:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8002e4c:	e790      	b.n	8002d70 <_usb_ep0setup+0x2b0>
 8002e4e:	bf00      	nop
 8002e50:	080063d4 	.word	0x080063d4
 8002e54:	08006320 	.word	0x08006320
 8002e58:	080065e8 	.word	0x080065e8
 8002e5c:	00000000 	.word	0x00000000

08002e60 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8002e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e64:	b085      	sub	sp, #20
 8002e66:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 8002e6a:	69c7      	ldr	r7, [r0, #28]
 8002e6c:	f04f 0920 	mov.w	r9, #32
 8002e70:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8002e74:	b3a2      	cbz	r2, 8002ee0 <oqWriteTimeout+0x80>
 8002e76:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	460e      	mov	r6, r1
 8002e7e:	f04f 0a00 	mov.w	sl, #0
  if (n > oqGetEmptyI(oqp)) {
 8002e82:	68a2      	ldr	r2, [r4, #8]
 8002e84:	4593      	cmp	fp, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002e86:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 8002e8a:	bf8c      	ite	hi
 8002e8c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 8002e8e:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002e90:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8002e94:	45a8      	cmp	r8, r5
 8002e96:	d844      	bhi.n	8002f22 <oqWriteTimeout+0xc2>
  else if (n > s1) {
 8002e98:	d229      	bcs.n	8002eee <oqWriteTimeout+0x8e>
    s2 = n - s1;
 8002e9a:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002e9e:	4642      	mov	r2, r8
 8002ea0:	4631      	mov	r1, r6
    s2 = n - s1;
 8002ea2:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002ea4:	f7fd fa32 	bl	800030c <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8002ea8:	eb06 0108 	add.w	r1, r6, r8
 8002eac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002eb0:	68e0      	ldr	r0, [r4, #12]
 8002eb2:	4642      	mov	r2, r8
 8002eb4:	f7fd fa2a 	bl	800030c <memcpy>
  oqp->q_counter -= n;
 8002eb8:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 8002eba:	68e1      	ldr	r1, [r4, #12]
 8002ebc:	4643      	mov	r3, r8
 8002ebe:	18cb      	adds	r3, r1, r3
  oqp->q_counter -= n;
 8002ec0:	1b52      	subs	r2, r2, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 8002ec2:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 8002ec4:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8002ec6:	b10f      	cbz	r7, 8002ecc <oqWriteTimeout+0x6c>
        nfy(oqp);
 8002ec8:	4620      	mov	r0, r4
 8002eca:	47b8      	blx	r7
 8002ecc:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8002ed0:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8002ed4:	442e      	add	r6, r5
 8002ed6:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8002eda:	f1bb 0f00 	cmp.w	fp, #0
 8002ede:	d1d0      	bne.n	8002e82 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 8002ee0:	9803      	ldr	r0, [sp, #12]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8002ee8:	b005      	add	sp, #20
 8002eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002eee:	462a      	mov	r2, r5
 8002ef0:	4631      	mov	r1, r6
 8002ef2:	f7fd fa0b 	bl	800030c <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8002ef6:	68e2      	ldr	r2, [r4, #12]
 8002ef8:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8002efa:	68a2      	ldr	r2, [r4, #8]
 8002efc:	1b52      	subs	r2, r2, r5
 8002efe:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002f00:	2d00      	cmp	r5, #0
 8002f02:	d1e0      	bne.n	8002ec6 <oqWriteTimeout+0x66>
 8002f04:	9902      	ldr	r1, [sp, #8]
 8002f06:	4620      	mov	r0, r4
 8002f08:	f7ff fc72 	bl	80027f0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8002f0c:	2800      	cmp	r0, #0
 8002f0e:	d0b8      	beq.n	8002e82 <oqWriteTimeout+0x22>
 8002f10:	9b03      	ldr	r3, [sp, #12]
 8002f12:	eba3 000b 	sub.w	r0, r3, fp
 8002f16:	2300      	movs	r3, #0
 8002f18:	f383 8811 	msr	BASEPRI, r3
}
 8002f1c:	b005      	add	sp, #20
 8002f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002f22:	462a      	mov	r2, r5
 8002f24:	4631      	mov	r1, r6
 8002f26:	f7fd f9f1 	bl	800030c <memcpy>
    oqp->q_wrptr += n;
 8002f2a:	6962      	ldr	r2, [r4, #20]
 8002f2c:	442a      	add	r2, r5
 8002f2e:	6162      	str	r2, [r4, #20]
 8002f30:	e7e3      	b.n	8002efa <oqWriteTimeout+0x9a>
 8002f32:	bf00      	nop
	...

08002f40 <_writet.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002f40:	3030      	adds	r0, #48	; 0x30
 8002f42:	f7ff bf8d 	b.w	8002e60 <oqWriteTimeout>
 8002f46:	bf00      	nop
	...

08002f50 <_write.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002f50:	3030      	adds	r0, #48	; 0x30
 8002f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f56:	f7ff bf83 	b.w	8002e60 <oqWriteTimeout>
 8002f5a:	bf00      	nop
 8002f5c:	0000      	movs	r0, r0
	...

08002f60 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8002f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f64:	b085      	sub	sp, #20
 8002f66:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 8002f6a:	69c7      	ldr	r7, [r0, #28]
 8002f6c:	f04f 0920 	mov.w	r9, #32
 8002f70:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8002f74:	2a00      	cmp	r2, #0
 8002f76:	d034      	beq.n	8002fe2 <iqReadTimeout+0x82>
 8002f78:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8002f7c:	4604      	mov	r4, r0
 8002f7e:	460e      	mov	r6, r1
 8002f80:	f04f 0a00 	mov.w	sl, #0
  if (n > iqGetFullI(iqp)) {
 8002f84:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002f86:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8002f88:	4593      	cmp	fp, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002f8a:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8002f8c:	bf8c      	ite	hi
 8002f8e:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8002f90:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002f92:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8002f96:	45a8      	cmp	r8, r5
 8002f98:	d844      	bhi.n	8003024 <iqReadTimeout+0xc4>
  else if (n > s1) {
 8002f9a:	d229      	bcs.n	8002ff0 <iqReadTimeout+0x90>
    s2 = n - s1;
 8002f9c:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002fa0:	4642      	mov	r2, r8
 8002fa2:	4630      	mov	r0, r6
    s2 = n - s1;
 8002fa4:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002fa6:	f7fd f9b1 	bl	800030c <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8002faa:	eb06 0008 	add.w	r0, r6, r8
 8002fae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002fb2:	68e1      	ldr	r1, [r4, #12]
 8002fb4:	4642      	mov	r2, r8
 8002fb6:	f7fd f9a9 	bl	800030c <memcpy>
  iqp->q_counter -= n;
 8002fba:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 8002fbc:	68e1      	ldr	r1, [r4, #12]
 8002fbe:	4643      	mov	r3, r8
 8002fc0:	18cb      	adds	r3, r1, r3
  iqp->q_counter -= n;
 8002fc2:	1b52      	subs	r2, r2, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 8002fc4:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 8002fc6:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 8002fc8:	b10f      	cbz	r7, 8002fce <iqReadTimeout+0x6e>
        nfy(iqp);
 8002fca:	4620      	mov	r0, r4
 8002fcc:	47b8      	blx	r7
 8002fce:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 8002fd2:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8002fd6:	442e      	add	r6, r5
 8002fd8:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8002fdc:	f1bb 0f00 	cmp.w	fp, #0
 8002fe0:	d1d0      	bne.n	8002f84 <iqReadTimeout+0x24>
  if (n > iqGetFullI(iqp)) {
 8002fe2:	9803      	ldr	r0, [sp, #12]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f383 8811 	msr	BASEPRI, r3
}
 8002fea:	b005      	add	sp, #20
 8002fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002ff0:	462a      	mov	r2, r5
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	f7fd f98a 	bl	800030c <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8002ff8:	68e2      	ldr	r2, [r4, #12]
 8002ffa:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8002ffc:	68a2      	ldr	r2, [r4, #8]
 8002ffe:	1b52      	subs	r2, r2, r5
 8003000:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8003002:	2d00      	cmp	r5, #0
 8003004:	d1e0      	bne.n	8002fc8 <iqReadTimeout+0x68>
 8003006:	9902      	ldr	r1, [sp, #8]
 8003008:	4620      	mov	r0, r4
 800300a:	f7ff fbf1 	bl	80027f0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800300e:	2800      	cmp	r0, #0
 8003010:	d0b8      	beq.n	8002f84 <iqReadTimeout+0x24>
 8003012:	9b03      	ldr	r3, [sp, #12]
 8003014:	eba3 000b 	sub.w	r0, r3, fp
 8003018:	2300      	movs	r3, #0
 800301a:	f383 8811 	msr	BASEPRI, r3
}
 800301e:	b005      	add	sp, #20
 8003020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8003024:	462a      	mov	r2, r5
 8003026:	4630      	mov	r0, r6
 8003028:	f7fd f970 	bl	800030c <memcpy>
    iqp->q_rdptr += n;
 800302c:	69a2      	ldr	r2, [r4, #24]
 800302e:	442a      	add	r2, r5
 8003030:	61a2      	str	r2, [r4, #24]
 8003032:	e7e3      	b.n	8002ffc <iqReadTimeout+0x9c>
	...

08003040 <_readt.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8003040:	300c      	adds	r0, #12
 8003042:	f7ff bf8d 	b.w	8002f60 <iqReadTimeout>
 8003046:	bf00      	nop
	...

08003050 <_read.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8003050:	300c      	adds	r0, #12
 8003052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003056:	f7ff bf83 	b.w	8002f60 <iqReadTimeout>
 800305a:	bf00      	nop
 800305c:	0000      	movs	r0, r0
	...

08003060 <obqWriteTimeout>:
                       size_t n, sysinterval_t timeout) {
 8003060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003064:	4605      	mov	r5, r0
 8003066:	b083      	sub	sp, #12
 8003068:	460c      	mov	r4, r1
 800306a:	4692      	mov	sl, r2
 800306c:	4699      	mov	r9, r3
 800306e:	f04f 0820 	mov.w	r8, #32
 8003072:	f388 8811 	msr	BASEPRI, r8
    if (obqp->ptr == NULL) {
 8003076:	6aab      	ldr	r3, [r5, #40]	; 0x28
  size_t w = 0;
 8003078:	2600      	movs	r6, #0
  obqp->ptr = NULL;
 800307a:	4637      	mov	r7, r6
    if (obqp->ptr == NULL) {
 800307c:	2b00      	cmp	r3, #0
 800307e:	d041      	beq.n	8003104 <obqWriteTimeout+0xa4>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8003080:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    if (size > (n - w)) {
 8003082:	ebaa 0b06 	sub.w	fp, sl, r6
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8003086:	1aca      	subs	r2, r1, r3
    if (size > (n - w)) {
 8003088:	4593      	cmp	fp, r2
 800308a:	bf28      	it	cs
 800308c:	4693      	movcs	fp, r2
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 800308e:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 8003092:	d940      	bls.n	8003116 <obqWriteTimeout+0xb6>
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 8003094:	4621      	mov	r1, r4
 8003096:	4618      	mov	r0, r3
 8003098:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800309c:	680c      	ldr	r4, [r1, #0]
 800309e:	684a      	ldr	r2, [r1, #4]
 80030a0:	688b      	ldr	r3, [r1, #8]
 80030a2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80030a6:	f8c0 c00c 	str.w	ip, [r0, #12]
 80030aa:	3110      	adds	r1, #16
 80030ac:	4571      	cmp	r1, lr
 80030ae:	6004      	str	r4, [r0, #0]
 80030b0:	6042      	str	r2, [r0, #4]
 80030b2:	6083      	str	r3, [r0, #8]
 80030b4:	f100 0010 	add.w	r0, r0, #16
 80030b8:	d1f0      	bne.n	800309c <obqWriteTimeout+0x3c>
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80030ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80030bc:	3340      	adds	r3, #64	; 0x40
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 80030be:	460c      	mov	r4, r1
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
 80030c0:	3640      	adds	r6, #64	; 0x40
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80030c2:	62ab      	str	r3, [r5, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 80030c4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d813      	bhi.n	80030f2 <obqWriteTimeout+0x92>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80030ca:	69ea      	ldr	r2, [r5, #28]
  *((size_t *)obqp->bwrptr) = size;
 80030cc:	692b      	ldr	r3, [r5, #16]
  if (obqp->bwrptr >= obqp->btop) {
 80030ce:	69a8      	ldr	r0, [r5, #24]
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80030d0:	3a04      	subs	r2, #4
  *((size_t *)obqp->bwrptr) = size;
 80030d2:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 80030d4:	69e9      	ldr	r1, [r5, #28]
  obqp->bcounter--;
 80030d6:	68ea      	ldr	r2, [r5, #12]
  obqp->ptr = NULL;
 80030d8:	62af      	str	r7, [r5, #40]	; 0x28
  obqp->bwrptr += obqp->bsize;
 80030da:	440b      	add	r3, r1
  if (obqp->bwrptr >= obqp->btop) {
 80030dc:	4283      	cmp	r3, r0
  obqp->bwrptr += obqp->bsize;
 80030de:	612b      	str	r3, [r5, #16]
    obqp->bwrptr = obqp->buffers;
 80030e0:	bf24      	itt	cs
 80030e2:	6a6b      	ldrcs	r3, [r5, #36]	; 0x24
 80030e4:	612b      	strcs	r3, [r5, #16]
  if (obqp->notify != NULL) {
 80030e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  obqp->bcounter--;
 80030e8:	3a01      	subs	r2, #1
 80030ea:	60ea      	str	r2, [r5, #12]
  if (obqp->notify != NULL) {
 80030ec:	b10b      	cbz	r3, 80030f2 <obqWriteTimeout+0x92>
    obqp->notify(obqp);
 80030ee:	4628      	mov	r0, r5
 80030f0:	4798      	blx	r3
 80030f2:	f387 8811 	msr	BASEPRI, r7
    if (w >= n) {
 80030f6:	4556      	cmp	r6, sl
 80030f8:	d21a      	bcs.n	8003130 <obqWriteTimeout+0xd0>
 80030fa:	f388 8811 	msr	BASEPRI, r8
    if (obqp->ptr == NULL) {
 80030fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1bd      	bne.n	8003080 <obqWriteTimeout+0x20>
      msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8003104:	4649      	mov	r1, r9
 8003106:	4628      	mov	r0, r5
 8003108:	9301      	str	r3, [sp, #4]
 800310a:	f7ff fc01 	bl	8002910 <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
 800310e:	9b01      	ldr	r3, [sp, #4]
 8003110:	b960      	cbnz	r0, 800312c <obqWriteTimeout+0xcc>
 8003112:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003114:	e7b4      	b.n	8003080 <obqWriteTimeout+0x20>
      memcpy(obqp->ptr, bp, size);
 8003116:	4618      	mov	r0, r3
 8003118:	4621      	mov	r1, r4
 800311a:	465a      	mov	r2, fp
 800311c:	f7fd f8f6 	bl	800030c <memcpy>
      obqp->ptr += size;
 8003120:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003122:	445b      	add	r3, fp
      w         += size;
 8003124:	445e      	add	r6, fp
      bp        += size;
 8003126:	445c      	add	r4, fp
      obqp->ptr += size;
 8003128:	62ab      	str	r3, [r5, #40]	; 0x28
      w         += size;
 800312a:	e7cb      	b.n	80030c4 <obqWriteTimeout+0x64>
 800312c:	f383 8811 	msr	BASEPRI, r3
}
 8003130:	4630      	mov	r0, r6
 8003132:	b003      	add	sp, #12
 8003134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003140 <_writet.lto_priv.1>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 8003140:	3044      	adds	r0, #68	; 0x44
 8003142:	f7ff bf8d 	b.w	8003060 <obqWriteTimeout>
 8003146:	bf00      	nop
	...

08003150 <_write.lto_priv.1>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 8003150:	3044      	adds	r0, #68	; 0x44
 8003152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003156:	f7ff bf83 	b.w	8003060 <obqWriteTimeout>
 800315a:	bf00      	nop
 800315c:	0000      	movs	r0, r0
	...

08003160 <ibqReadTimeout>:
                      size_t n, sysinterval_t timeout) {
 8003160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003164:	b083      	sub	sp, #12
 8003166:	4605      	mov	r5, r0
 8003168:	460f      	mov	r7, r1
 800316a:	4693      	mov	fp, r2
 800316c:	9301      	str	r3, [sp, #4]
 800316e:	f04f 0920 	mov.w	r9, #32
 8003172:	f389 8811 	msr	BASEPRI, r9
    if (ibqp->ptr == NULL) {
 8003176:	6aac      	ldr	r4, [r5, #40]	; 0x28
  size_t r = 0;
 8003178:	2600      	movs	r6, #0
  ibqp->ptr = NULL;
 800317a:	46b0      	mov	r8, r6
    if (ibqp->ptr == NULL) {
 800317c:	2c00      	cmp	r4, #0
 800317e:	d03f      	beq.n	8003200 <ibqReadTimeout+0xa0>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8003180:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    if (size > (n - r)) {
 8003182:	ebab 0206 	sub.w	r2, fp, r6
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8003186:	1b1b      	subs	r3, r3, r4
    if (size > (n - r)) {
 8003188:	429a      	cmp	r2, r3
 800318a:	bf28      	it	cs
 800318c:	461a      	movcs	r2, r3
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 800318e:	2a40      	cmp	r2, #64	; 0x40
 8003190:	4692      	mov	sl, r2
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 8003192:	4621      	mov	r1, r4
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8003194:	d93b      	bls.n	800320e <ibqReadTimeout+0xae>
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 8003196:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800319a:	463b      	mov	r3, r7
 800319c:	680c      	ldr	r4, [r1, #0]
 800319e:	6848      	ldr	r0, [r1, #4]
 80031a0:	688a      	ldr	r2, [r1, #8]
 80031a2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80031a6:	f8c3 c00c 	str.w	ip, [r3, #12]
 80031aa:	3110      	adds	r1, #16
 80031ac:	4571      	cmp	r1, lr
 80031ae:	601c      	str	r4, [r3, #0]
 80031b0:	6058      	str	r0, [r3, #4]
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	f103 0310 	add.w	r3, r3, #16
 80031b8:	d1f0      	bne.n	800319c <ibqReadTimeout+0x3c>
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80031ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80031bc:	3340      	adds	r3, #64	; 0x40
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 80031be:	3740      	adds	r7, #64	; 0x40
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
 80031c0:	3640      	adds	r6, #64	; 0x40
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80031c2:	62ab      	str	r3, [r5, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 80031c4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d811      	bhi.n	80031ee <ibqReadTimeout+0x8e>
  if (ibqp->brdptr >= ibqp->btop) {
 80031ca:	e9d5 2106 	ldrd	r2, r1, [r5, #24]
  ibqp->brdptr += ibqp->bsize;
 80031ce:	696b      	ldr	r3, [r5, #20]
  ibqp->bcounter--;
 80031d0:	68e8      	ldr	r0, [r5, #12]
  ibqp->ptr = NULL;
 80031d2:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  ibqp->brdptr += ibqp->bsize;
 80031d6:	440b      	add	r3, r1
  if (ibqp->brdptr >= ibqp->btop) {
 80031d8:	4293      	cmp	r3, r2
  ibqp->brdptr += ibqp->bsize;
 80031da:	616b      	str	r3, [r5, #20]
    ibqp->brdptr = ibqp->buffers;
 80031dc:	bf24      	itt	cs
 80031de:	6a6b      	ldrcs	r3, [r5, #36]	; 0x24
 80031e0:	616b      	strcs	r3, [r5, #20]
  if (ibqp->notify != NULL) {
 80031e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  ibqp->bcounter--;
 80031e4:	3801      	subs	r0, #1
 80031e6:	60e8      	str	r0, [r5, #12]
  if (ibqp->notify != NULL) {
 80031e8:	b10b      	cbz	r3, 80031ee <ibqReadTimeout+0x8e>
    ibqp->notify(ibqp);
 80031ea:	4628      	mov	r0, r5
 80031ec:	4798      	blx	r3
 80031ee:	f388 8811 	msr	BASEPRI, r8
    if (r >= n) {
 80031f2:	455e      	cmp	r6, fp
 80031f4:	d216      	bcs.n	8003224 <ibqReadTimeout+0xc4>
 80031f6:	f389 8811 	msr	BASEPRI, r9
    if (ibqp->ptr == NULL) {
 80031fa:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80031fc:	2c00      	cmp	r4, #0
 80031fe:	d1bf      	bne.n	8003180 <ibqReadTimeout+0x20>
      msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8003200:	9901      	ldr	r1, [sp, #4]
 8003202:	4628      	mov	r0, r5
 8003204:	f7ff fbec 	bl	80029e0 <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
 8003208:	b950      	cbnz	r0, 8003220 <ibqReadTimeout+0xc0>
 800320a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800320c:	e7b8      	b.n	8003180 <ibqReadTimeout+0x20>
      memcpy(bp, ibqp->ptr, size);
 800320e:	4638      	mov	r0, r7
 8003210:	f7fd f87c 	bl	800030c <memcpy>
      ibqp->ptr += size;
 8003214:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003216:	4453      	add	r3, sl
      r         += size;
 8003218:	4456      	add	r6, sl
      bp        += size;
 800321a:	4457      	add	r7, sl
      ibqp->ptr += size;
 800321c:	62ab      	str	r3, [r5, #40]	; 0x28
      r         += size;
 800321e:	e7d1      	b.n	80031c4 <ibqReadTimeout+0x64>
 8003220:	f384 8811 	msr	BASEPRI, r4
}
 8003224:	4630      	mov	r0, r6
 8003226:	b003      	add	sp, #12
 8003228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800322c:	0000      	movs	r0, r0
	...

08003230 <_readt.lto_priv.1>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 8003230:	300c      	adds	r0, #12
 8003232:	f7ff bf95 	b.w	8003160 <ibqReadTimeout>
 8003236:	bf00      	nop
	...

08003240 <_read.lto_priv.1>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 8003240:	300c      	adds	r0, #12
 8003242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003246:	f7ff bf8b 	b.w	8003160 <ibqReadTimeout>
 800324a:	bf00      	nop
 800324c:	0000      	movs	r0, r0
	...

08003250 <get_history>:
    shp->sh_end -= shp->sh_size;
  *(shp->sh_buffer + shp->sh_end) = 0;
  shp->sh_cur = 0;
}

static int get_history(ShellHistory *shp, char *line, int dir) {
 8003250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (shp == NULL)
    return -1;

  /* Count the number of lines saved in the buffer */
  int idx = shp->sh_beg;
  while (idx != shp->sh_end) {
 8003254:	e9d0 4602 	ldrd	r4, r6, [r0, #8]
 8003258:	42b4      	cmp	r4, r6
static int get_history(ShellHistory *shp, char *line, int dir) {
 800325a:	4607      	mov	r7, r0
 800325c:	4688      	mov	r8, r1
  while (idx != shp->sh_end) {
 800325e:	d053      	beq.n	8003308 <get_history+0xb8>
    idx += *(shp->sh_buffer + idx) + 1;
    if (idx >= shp->sh_size)
 8003260:	e9d0 c000 	ldrd	ip, r0, [r0]
 8003264:	4623      	mov	r3, r4
  int count=0;
 8003266:	2100      	movs	r1, #0
    idx += *(shp->sh_buffer + idx) + 1;
 8003268:	f81c 5003 	ldrb.w	r5, [ip, r3]
 800326c:	3501      	adds	r5, #1
 800326e:	442b      	add	r3, r5
    if (idx >= shp->sh_size)
 8003270:	4298      	cmp	r0, r3
      idx -= shp->sh_size;
 8003272:	bfd8      	it	le
 8003274:	1a1b      	suble	r3, r3, r0
  while (idx != shp->sh_end) {
 8003276:	42b3      	cmp	r3, r6
    count++;
 8003278:	f101 0101 	add.w	r1, r1, #1
  while (idx != shp->sh_end) {
 800327c:	d1f4      	bne.n	8003268 <get_history+0x18>
  }

  if (dir == SHELL_HIST_DIR_FW) {
 800327e:	2a01      	cmp	r2, #1
    if (shp->sh_cur > 0)
 8003280:	693d      	ldr	r5, [r7, #16]
  if (dir == SHELL_HIST_DIR_FW) {
 8003282:	d03c      	beq.n	80032fe <get_history+0xae>
      shp->sh_cur -= 2;
    else
      return 0;
  }

  if (count >= shp->sh_cur) {
 8003284:	42a9      	cmp	r1, r5
 8003286:	db53      	blt.n	8003330 <get_history+0xe0>
    idx = shp->sh_beg;
    int i = 0;
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8003288:	42b4      	cmp	r4, r6
 800328a:	d054      	beq.n	8003336 <get_history+0xe6>
 800328c:	1e4b      	subs	r3, r1, #1
 800328e:	429d      	cmp	r5, r3
 8003290:	d054      	beq.n	800333c <get_history+0xec>
      idx += *(shp->sh_buffer + idx) + 1;
      if (idx >= shp->sh_size)
 8003292:	e9d7 ec00 	ldrd	lr, ip, [r7]
    int i = 0;
 8003296:	2000      	movs	r0, #0
 8003298:	e001      	b.n	800329e <get_history+0x4e>
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 800329a:	429d      	cmp	r5, r3
 800329c:	d017      	beq.n	80032ce <get_history+0x7e>
      idx += *(shp->sh_buffer + idx) + 1;
 800329e:	f81e 3004 	ldrb.w	r3, [lr, r4]
 80032a2:	3301      	adds	r3, #1
 80032a4:	441c      	add	r4, r3
      if (idx >= shp->sh_size)
 80032a6:	45a4      	cmp	ip, r4
        idx -= shp->sh_size;
      i++;
 80032a8:	f100 0001 	add.w	r0, r0, #1
        idx -= shp->sh_size;
 80032ac:	bfd8      	it	le
 80032ae:	eba4 040c 	suble.w	r4, r4, ip
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 80032b2:	43c3      	mvns	r3, r0
 80032b4:	42b4      	cmp	r4, r6
 80032b6:	440b      	add	r3, r1
 80032b8:	d1ef      	bne.n	800329a <get_history+0x4a>
    }

    int length = *(shp->sh_buffer + idx);
 80032ba:	f81e 4006 	ldrb.w	r4, [lr, r6]

    if (length > 0) {
 80032be:	b95c      	cbnz	r4, 80032d8 <get_history+0x88>
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
      }
      return length;
    }
    else if (dir == SHELL_HIST_DIR_FW) {
 80032c0:	2a01      	cmp	r2, #1
 80032c2:	d135      	bne.n	8003330 <get_history+0xe0>
      shp->sh_cur++;
 80032c4:	3501      	adds	r5, #1
 80032c6:	613d      	str	r5, [r7, #16]
      return 0;
    }
  }
  return -1;
}
 80032c8:	4620      	mov	r0, r4
 80032ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 80032ce:	4626      	mov	r6, r4
    int length = *(shp->sh_buffer + idx);
 80032d0:	f81e 4006 	ldrb.w	r4, [lr, r6]
    if (length > 0) {
 80032d4:	2c00      	cmp	r4, #0
 80032d6:	d0f3      	beq.n	80032c0 <get_history+0x70>
      shp->sh_cur++;
 80032d8:	3501      	adds	r5, #1
      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 80032da:	2240      	movs	r2, #64	; 0x40
      shp->sh_cur++;
 80032dc:	613d      	str	r5, [r7, #16]
      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 80032de:	2100      	movs	r1, #0
 80032e0:	4640      	mov	r0, r8
 80032e2:	f002 fb71 	bl	80059c8 <memset>
      if ((idx + length) < shp->sh_size) {
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	19a2      	adds	r2, r4, r6
 80032ea:	429a      	cmp	r2, r3
 80032ec:	da10      	bge.n	8003310 <get_history+0xc0>
        memcpy(line, (shp->sh_buffer + idx + 1), length);
 80032ee:	6839      	ldr	r1, [r7, #0]
 80032f0:	3601      	adds	r6, #1
 80032f2:	4431      	add	r1, r6
 80032f4:	4640      	mov	r0, r8
 80032f6:	4622      	mov	r2, r4
 80032f8:	f7fd f808 	bl	800030c <memcpy>
 80032fc:	e7e4      	b.n	80032c8 <get_history+0x78>
    if (shp->sh_cur > 0)
 80032fe:	2d00      	cmp	r5, #0
 8003300:	dd04      	ble.n	800330c <get_history+0xbc>
      shp->sh_cur -= 2;
 8003302:	3d02      	subs	r5, #2
 8003304:	613d      	str	r5, [r7, #16]
 8003306:	e7bd      	b.n	8003284 <get_history+0x34>
  int count=0;
 8003308:	2100      	movs	r1, #0
 800330a:	e7b8      	b.n	800327e <get_history+0x2e>
      return 0;
 800330c:	2400      	movs	r4, #0
 800330e:	e7db      	b.n	80032c8 <get_history+0x78>
        int part_len = shp->sh_size - idx - 1;
 8003310:	1b9b      	subs	r3, r3, r6
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
 8003312:	6839      	ldr	r1, [r7, #0]
        int part_len = shp->sh_size - idx - 1;
 8003314:	1e5d      	subs	r5, r3, #1
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
 8003316:	3601      	adds	r6, #1
 8003318:	4431      	add	r1, r6
 800331a:	462a      	mov	r2, r5
 800331c:	4640      	mov	r0, r8
 800331e:	f7fc fff5 	bl	800030c <memcpy>
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
 8003322:	6839      	ldr	r1, [r7, #0]
 8003324:	eb08 0005 	add.w	r0, r8, r5
 8003328:	1b62      	subs	r2, r4, r5
 800332a:	f7fc ffef 	bl	800030c <memcpy>
 800332e:	e7cb      	b.n	80032c8 <get_history+0x78>
  return -1;
 8003330:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003334:	e7c8      	b.n	80032c8 <get_history+0x78>
 8003336:	f8d7 e000 	ldr.w	lr, [r7]
 800333a:	e7be      	b.n	80032ba <get_history+0x6a>
 800333c:	f8d7 e000 	ldr.w	lr, [r7]
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8003340:	4626      	mov	r6, r4
 8003342:	e7ba      	b.n	80032ba <get_history+0x6a>
	...

08003350 <usbInitEndpointI>:
                      const USBEndpointConfig *epcp) {
 8003350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (epcp->in_state != NULL) {
 8003354:	6953      	ldr	r3, [r2, #20]
 8003356:	eb00 0781 	add.w	r7, r0, r1, lsl #2
                      const USBEndpointConfig *epcp) {
 800335a:	460c      	mov	r4, r1
  usbp->epc[ep] = epcp;
 800335c:	60fa      	str	r2, [r7, #12]
  if (epcp->in_state != NULL) {
 800335e:	fa0f f881 	sxth.w	r8, r1
 8003362:	b123      	cbz	r3, 800336e <usbInitEndpointI+0x1e>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8003364:	2100      	movs	r1, #0
 8003366:	6019      	str	r1, [r3, #0]
 8003368:	6059      	str	r1, [r3, #4]
 800336a:	6099      	str	r1, [r3, #8]
 800336c:	60d9      	str	r1, [r3, #12]
  if (epcp->out_state != NULL) {
 800336e:	6993      	ldr	r3, [r2, #24]
 8003370:	b123      	cbz	r3, 800337c <usbInitEndpointI+0x2c>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	605a      	str	r2, [r3, #4]
 8003378:	609a      	str	r2, [r3, #8]
 800337a:	60da      	str	r2, [r3, #12]
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 800337c:	68fb      	ldr	r3, [r7, #12]
  stm32_otg_t *otgp = usbp->otg;
 800337e:	6d45      	ldr	r5, [r0, #84]	; 0x54
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8003380:	681e      	ldr	r6, [r3, #0]
  if (usbp->epc[ep]->out_state != NULL) {
 8003382:	f8d3 c018 	ldr.w	ip, [r3, #24]
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8003386:	f006 0603 	and.w	r6, r6, #3
 800338a:	1e72      	subs	r2, r6, #1
 800338c:	2a02      	cmp	r2, #2
 800338e:	bf98      	it	ls
 8003390:	04b6      	lslls	r6, r6, #18
  otgp->oe[ep].DOEPTSIZ = 0;
 8003392:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 8003396:	f04f 0100 	mov.w	r1, #0
 800339a:	bf98      	it	ls
 800339c:	f106 5680 	addls.w	r6, r6, #268435456	; 0x10000000
 80033a0:	f8c2 1b10 	str.w	r1, [r2, #2832]	; 0xb10
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 80033a4:	bf8c      	ite	hi
 80033a6:	4e45      	ldrhi	r6, [pc, #276]	; (80034bc <usbInitEndpointI+0x16c>)
 80033a8:	f506 4600 	addls.w	r6, r6, #32768	; 0x8000
  otgp->oe[ep].DOEPTSIZ = 0;
 80033ac:	0161      	lsls	r1, r4, #5
  if (usbp->epc[ep]->out_state != NULL) {
 80033ae:	f1bc 0f00 	cmp.w	ip, #0
 80033b2:	d04b      	beq.n	800344c <usbInitEndpointI+0xfc>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 80033b4:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 80033b8:	f104 0258 	add.w	r2, r4, #88	; 0x58
 80033bc:	0152      	lsls	r2, r2, #5
 80033be:	ea4c 0c06 	orr.w	ip, ip, r6
 80033c2:	f845 c002 	str.w	ip, [r5, r2]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 80033c6:	f104 0e10 	add.w	lr, r4, #16
 80033ca:	f8d5 c81c 	ldr.w	ip, [r5, #2076]	; 0x81c
 80033ce:	2201      	movs	r2, #1
 80033d0:	fa02 f20e 	lsl.w	r2, r2, lr
 80033d4:	ea42 020c 	orr.w	r2, r2, ip
 80033d8:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
  otgp->ie[ep].DIEPTSIZ = 0;
 80033dc:	186a      	adds	r2, r5, r1
  if (usbp->epc[ep]->in_state != NULL) {
 80033de:	6959      	ldr	r1, [r3, #20]
  otgp->ie[ep].DIEPTSIZ = 0;
 80033e0:	f04f 0c00 	mov.w	ip, #0
 80033e4:	f8c2 c910 	str.w	ip, [r2, #2320]	; 0x910
  if (usbp->epc[ep]->in_state != NULL) {
 80033e8:	2900      	cmp	r1, #0
 80033ea:	d044      	beq.n	8003476 <usbInitEndpointI+0x126>
    if (usbp->epc[ep]->in_multiplier > 1)
 80033ec:	8b99      	ldrh	r1, [r3, #28]
    fsize = usbp->epc[ep]->in_maxsize / 4;
 80033ee:	8a1a      	ldrh	r2, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 80033f0:	2901      	cmp	r1, #1
    fsize = usbp->epc[ep]->in_maxsize / 4;
 80033f2:	ea4f 0392 	mov.w	r3, r2, lsr #2
  next = usbp->pmnext;
 80033f6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
      fsize *= usbp->epc[ep]->in_multiplier;
 80033f8:	bf88      	it	hi
 80033fa:	434b      	mulhi	r3, r1
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 80033fc:	f104 013f 	add.w	r1, r4, #63	; 0x3f
  usbp->pmnext += size;
 8003400:	eb03 0c02 	add.w	ip, r3, r2
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8003404:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8003408:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800340c:	01a2      	lsls	r2, r4, #6
 800340e:	f042 0220 	orr.w	r2, r2, #32
  usbp->pmnext += size;
 8003412:	f8c0 c05c 	str.w	ip, [r0, #92]	; 0x5c
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8003416:	604b      	str	r3, [r1, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003418:	612a      	str	r2, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800341a:	692b      	ldr	r3, [r5, #16]
 800341c:	069a      	lsls	r2, r3, #26
 800341e:	d4fc      	bmi.n	800341a <usbInitEndpointI+0xca>
  chSysPolledDelayX(cycles);
 8003420:	2012      	movs	r0, #18
 8003422:	f7fe faad 	bl	8001980 <chSysPolledDelayX>
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8a1b      	ldrh	r3, [r3, #16]
    otgp->ie[ep].DIEPCTL = ctl |
 800342a:	f104 0248 	add.w	r2, r4, #72	; 0x48
                           DIEPCTL_TXFNUM(ep) |
 800342e:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
    otgp->ie[ep].DIEPCTL = ctl |
 8003432:	0152      	lsls	r2, r2, #5
                           DIEPCTL_TXFNUM(ep) |
 8003434:	431e      	orrs	r6, r3
    otgp->ie[ep].DIEPCTL = ctl |
 8003436:	50ae      	str	r6, [r5, r2]
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 8003438:	2101      	movs	r1, #1
 800343a:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 800343e:	fa01 f404 	lsl.w	r4, r1, r4
 8003442:	431c      	orrs	r4, r3
 8003444:	f8c5 481c 	str.w	r4, [r5, #2076]	; 0x81c
}
 8003448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 800344c:	eb05 1248 	add.w	r2, r5, r8, lsl #5
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8003450:	f104 0910 	add.w	r9, r4, #16
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 8003454:	f8d2 eb00 	ldr.w	lr, [r2, #2816]	; 0xb00
 8003458:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
 800345c:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 8003460:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 8003464:	f04f 0c01 	mov.w	ip, #1
 8003468:	fa0c fc09 	lsl.w	ip, ip, r9
 800346c:	ea22 020c 	bic.w	r2, r2, ip
 8003470:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
 8003474:	e7b2      	b.n	80033dc <usbInitEndpointI+0x8c>
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8003476:	f104 023f 	add.w	r2, r4, #63	; 0x3f
 800347a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800347e:	01a3      	lsls	r3, r4, #6
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8003480:	490f      	ldr	r1, [pc, #60]	; (80034c0 <usbInitEndpointI+0x170>)
 8003482:	6051      	str	r1, [r2, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003484:	f043 0320 	orr.w	r3, r3, #32
 8003488:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800348a:	692b      	ldr	r3, [r5, #16]
 800348c:	069b      	lsls	r3, r3, #26
 800348e:	d4fc      	bmi.n	800348a <usbInitEndpointI+0x13a>
 8003490:	eb05 1848 	add.w	r8, r5, r8, lsl #5
 8003494:	2012      	movs	r0, #18
 8003496:	f7fe fa73 	bl	8001980 <chSysPolledDelayX>
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 800349a:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
 800349e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80034a2:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 80034a6:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 80034aa:	2101      	movs	r1, #1
 80034ac:	fa01 f404 	lsl.w	r4, r1, r4
 80034b0:	ea23 0404 	bic.w	r4, r3, r4
 80034b4:	f8c5 481c 	str.w	r4, [r5, #2076]	; 0x81c
 80034b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034bc:	10008000 	.word	0x10008000
 80034c0:	02000400 	.word	0x02000400
	...

080034d0 <usb_event>:
static void usb_event(USBDriver *usbp, usbevent_t event) {
 80034d0:	b530      	push	{r4, r5, lr}
 80034d2:	b083      	sub	sp, #12
 80034d4:	2905      	cmp	r1, #5
 80034d6:	d80f      	bhi.n	80034f8 <usb_event+0x28>
 80034d8:	e8df f001 	tbb	[pc, r1]
 80034dc:	10030e10 	.word	0x10030e10
 80034e0:	2910      	.short	0x2910
 80034e2:	2320      	movs	r3, #32
 80034e4:	f383 8811 	msr	BASEPRI, r3
    if (usbp->state == USB_ACTIVE) {
 80034e8:	7803      	ldrb	r3, [r0, #0]
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d02f      	beq.n	800354e <usb_event+0x7e>
    else if (usbp->state == USB_SELECTED) {
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d059      	beq.n	80035a6 <usb_event+0xd6>
 80034f2:	2300      	movs	r3, #0
 80034f4:	f383 8811 	msr	BASEPRI, r3
}
 80034f8:	b003      	add	sp, #12
 80034fa:	bd30      	pop	{r4, r5, pc}
 80034fc:	2320      	movs	r3, #32
 80034fe:	f383 8811 	msr	BASEPRI, r3
  if (bqIsSuspendedX(&sdup->ibqueue) && bqIsSuspendedX(&sdup->obqueue)) {
 8003502:	4c2a      	ldr	r4, [pc, #168]	; (80035ac <usb_event+0xdc>)
 8003504:	7d23      	ldrb	r3, [r4, #20]
 8003506:	b11b      	cbz	r3, 8003510 <usb_event+0x40>
 8003508:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f0      	bne.n	80034f2 <usb_event+0x22>
  chEvtBroadcastFlagsI(esp, flags);
 8003510:	2102      	movs	r1, #2
 8003512:	4827      	ldr	r0, [pc, #156]	; (80035b0 <usb_event+0xe0>)
 8003514:	f7fe fa04 	bl	8001920 <chEvtBroadcastFlagsI>
  bqSuspendI(&sdup->ibqueue);
 8003518:	2501      	movs	r5, #1
  chThdDequeueAllI(tqp, msg);
 800351a:	4826      	ldr	r0, [pc, #152]	; (80035b4 <usb_event+0xe4>)
 800351c:	7525      	strb	r5, [r4, #20]
 800351e:	f7fe f9d7 	bl	80018d0 <chThdDequeueAllI.constprop.0>
 8003522:	4825      	ldr	r0, [pc, #148]	; (80035b8 <usb_event+0xe8>)
  bqSuspendI(&sdup->obqueue);
 8003524:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8003528:	f7fe f9d2 	bl	80018d0 <chThdDequeueAllI.constprop.0>
 800352c:	e7e1      	b.n	80034f2 <usb_event+0x22>
 800352e:	2320      	movs	r3, #32
 8003530:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8003534:	4c1d      	ldr	r4, [pc, #116]	; (80035ac <usb_event+0xdc>)
 8003536:	2101      	movs	r1, #1
 8003538:	1d20      	adds	r0, r4, #4
 800353a:	f7fe f9f1 	bl	8001920 <chEvtBroadcastFlagsI>
  bqResumeX(&sdup->ibqueue);
 800353e:	2300      	movs	r3, #0
 8003540:	7523      	strb	r3, [r4, #20]
  bqResumeX(&sdup->obqueue);
 8003542:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	b003      	add	sp, #12
 800354c:	bd30      	pop	{r4, r5, pc}
  ibqp->bcounter  = 0;
 800354e:	4c17      	ldr	r4, [pc, #92]	; (80035ac <usb_event+0xdc>)
      usbInitEndpointI(usbp, USB_INTERRUPT_REQUEST_EP_A, &ep1config);
 8003550:	4a1a      	ldr	r2, [pc, #104]	; (80035bc <usb_event+0xec>)
 8003552:	9001      	str	r0, [sp, #4]
 8003554:	2101      	movs	r1, #1
 8003556:	f7ff fefb 	bl	8003350 <usbInitEndpointI>
      usbInitEndpointI(usbp, USB_DATA_REQUEST_EP_A, &ep2config);
 800355a:	2102      	movs	r1, #2
 800355c:	9801      	ldr	r0, [sp, #4]
 800355e:	4a18      	ldr	r2, [pc, #96]	; (80035c0 <usb_event+0xf0>)
 8003560:	f7ff fef6 	bl	8003350 <usbInitEndpointI>
 8003564:	2500      	movs	r5, #0
  ibqp->brdptr    = ibqp->buffers;
 8003566:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003568:	6223      	str	r3, [r4, #32]
  chThdDequeueAllI(tqp, msg);
 800356a:	f104 000c 	add.w	r0, r4, #12
  ibqp->bwrptr    = ibqp->buffers;
 800356e:	61e3      	str	r3, [r4, #28]
  ibqp->top       = NULL;
 8003570:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  ibqp->bcounter  = 0;
 8003574:	61a5      	str	r5, [r4, #24]
 8003576:	f7fe f9ab 	bl	80018d0 <chThdDequeueAllI.constprop.0>
  obqp->brdptr    = obqp->buffers;
 800357a:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
 800357e:	f104 0044 	add.w	r0, r4, #68	; 0x44
  obqp->bwrptr    = obqp->buffers;
 8003582:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
  obqp->bcounter  = bqSizeX(obqp);
 8003586:	6522      	str	r2, [r4, #80]	; 0x50
  obqp->top       = NULL;
 8003588:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
  bqResumeX(&sdup->ibqueue);
 800358c:	7525      	strb	r5, [r4, #20]
 800358e:	f7fe f99f 	bl	80018d0 <chThdDequeueAllI.constprop.0>
  chEvtBroadcastFlagsI(esp, flags);
 8003592:	1d20      	adds	r0, r4, #4
 8003594:	2101      	movs	r1, #1
  bqResumeX(&sdup->obqueue);
 8003596:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 800359a:	f7fe f9c1 	bl	8001920 <chEvtBroadcastFlagsI>
  (void) sdu_start_receive(sdup);
 800359e:	4620      	mov	r0, r4
 80035a0:	f7fe fdce 	bl	8002140 <sdu_start_receive>
 80035a4:	e7a5      	b.n	80034f2 <usb_event+0x22>
      usbDisableEndpointsI(usbp);
 80035a6:	f7fe fd7b 	bl	80020a0 <usbDisableEndpointsI>
 80035aa:	e7a2      	b.n	80034f2 <usb_event+0x22>
 80035ac:	200013ac 	.word	0x200013ac
 80035b0:	200013b0 	.word	0x200013b0
 80035b4:	200013b8 	.word	0x200013b8
 80035b8:	200013f0 	.word	0x200013f0
 80035bc:	08006380 	.word	0x08006380
 80035c0:	080063a4 	.word	0x080063a4
	...

080035d0 <parse_arguments>:
static char *parse_arguments(char *str, char **saveptr) {
 80035d0:	b570      	push	{r4, r5, r6, lr}
 80035d2:	460d      	mov	r5, r1
  if (str != NULL)
 80035d4:	b1b8      	cbz	r0, 8003606 <parse_arguments+0x36>
 80035d6:	4604      	mov	r4, r0
    *saveptr = str;
 80035d8:	6028      	str	r0, [r5, #0]
  p += strspn(p, " \t");
 80035da:	4912      	ldr	r1, [pc, #72]	; (8003624 <parse_arguments+0x54>)
 80035dc:	4620      	mov	r0, r4
 80035de:	f002 fac7 	bl	8005b70 <strspn>
  if (*p == '"') {
 80035e2:	5c21      	ldrb	r1, [r4, r0]
 80035e4:	2922      	cmp	r1, #34	; 0x22
  p += strspn(p, " \t");
 80035e6:	eb04 0600 	add.w	r6, r4, r0
  if (*p == '"') {
 80035ea:	d012      	beq.n	8003612 <parse_arguments+0x42>
    *saveptr = strpbrk(p, " \t");
 80035ec:	490d      	ldr	r1, [pc, #52]	; (8003624 <parse_arguments+0x54>)
 80035ee:	4630      	mov	r0, r6
 80035f0:	f002 faa2 	bl	8005b38 <strpbrk>
  if (*saveptr != NULL) {
 80035f4:	b198      	cbz	r0, 800361e <parse_arguments+0x4e>
    *(*saveptr)++ = '\0';
 80035f6:	1c42      	adds	r2, r0, #1
 80035f8:	2300      	movs	r3, #0
 80035fa:	602a      	str	r2, [r5, #0]
 80035fc:	7003      	strb	r3, [r0, #0]
  return *p != '\0' ? p : NULL;
 80035fe:	7833      	ldrb	r3, [r6, #0]
 8003600:	b123      	cbz	r3, 800360c <parse_arguments+0x3c>
}
 8003602:	4630      	mov	r0, r6
 8003604:	bd70      	pop	{r4, r5, r6, pc}
  p = *saveptr;
 8003606:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 8003608:	2c00      	cmp	r4, #0
 800360a:	d1e6      	bne.n	80035da <parse_arguments+0xa>
    return NULL;
 800360c:	2600      	movs	r6, #0
}
 800360e:	4630      	mov	r0, r6
 8003610:	bd70      	pop	{r4, r5, r6, pc}
    p++;
 8003612:	3601      	adds	r6, #1
    *saveptr = strpbrk(p, "\"");
 8003614:	4630      	mov	r0, r6
 8003616:	f002 fa27 	bl	8005a68 <strchr>
  if (*saveptr != NULL) {
 800361a:	2800      	cmp	r0, #0
 800361c:	d1eb      	bne.n	80035f6 <parse_arguments+0x26>
 800361e:	6028      	str	r0, [r5, #0]
 8003620:	e7ed      	b.n	80035fe <parse_arguments+0x2e>
 8003622:	bf00      	nop
 8003624:	08006078 	.word	0x08006078
	...

08003630 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8003630:	b40e      	push	{r1, r2, r3}
 8003632:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	ab0f      	add	r3, sp, #60	; 0x3c
 800363a:	f853 4b04 	ldr.w	r4, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800363e:	9302      	str	r3, [sp, #8]
    c = *fmt++;
 8003640:	4625      	mov	r5, r4
 8003642:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 8003646:	2900      	cmp	r1, #0
 8003648:	f000 823b 	beq.w	8003ac2 <chprintf+0x492>
 800364c:	4607      	mov	r7, r0
 800364e:	4699      	mov	r9, r3
  int n = 0;
 8003650:	f04f 0800 	mov.w	r8, #0
 8003654:	e00c      	b.n	8003670 <chprintf+0x40>
      streamPut(chp, (uint8_t)c);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	4638      	mov	r0, r7
 800365a:	68db      	ldr	r3, [r3, #12]
      n++;
 800365c:	f108 0801 	add.w	r8, r8, #1
 8003660:	462c      	mov	r4, r5
      streamPut(chp, (uint8_t)c);
 8003662:	4798      	blx	r3
    c = *fmt++;
 8003664:	4625      	mov	r5, r4
 8003666:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 800366a:	2900      	cmp	r1, #0
 800366c:	f000 80be 	beq.w	80037ec <chprintf+0x1bc>
    if (c != '%') {
 8003670:	2925      	cmp	r1, #37	; 0x25
 8003672:	d1f0      	bne.n	8003656 <chprintf+0x26>
    if (*fmt == '-') {
 8003674:	7863      	ldrb	r3, [r4, #1]
 8003676:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 8003678:	bf04      	itt	eq
 800367a:	1ca5      	addeq	r5, r4, #2
      left_align = true;
 800367c:	2001      	moveq	r0, #1
    if (*fmt == '+') {
 800367e:	782b      	ldrb	r3, [r5, #0]
    left_align = false;
 8003680:	bf18      	it	ne
 8003682:	2000      	movne	r0, #0
    if (*fmt == '+') {
 8003684:	2b2b      	cmp	r3, #43	; 0x2b
 8003686:	bf03      	ittte	eq
 8003688:	786b      	ldrbeq	r3, [r5, #1]
      do_sign = true;
 800368a:	f04f 0e01 	moveq.w	lr, #1
      fmt++;
 800368e:	4475      	addeq	r5, lr
    do_sign = false;
 8003690:	f04f 0e00 	movne.w	lr, #0
    if (*fmt == '0') {
 8003694:	2b30      	cmp	r3, #48	; 0x30
      filler = '0';
 8003696:	bf05      	ittet	eq
 8003698:	461e      	moveq	r6, r3
      fmt++;
 800369a:	786b      	ldrbeq	r3, [r5, #1]
    filler = ' ';
 800369c:	2620      	movne	r6, #32
      fmt++;
 800369e:	3501      	addeq	r5, #1
    if ( *fmt == '*') {
 80036a0:	2b2a      	cmp	r3, #42	; 0x2a
 80036a2:	f040 80ac 	bne.w	80037fe <chprintf+0x1ce>
      width = va_arg(ap, int);
 80036a6:	f859 1b04 	ldr.w	r1, [r9], #4
      c = *fmt++;
 80036aa:	786b      	ldrb	r3, [r5, #1]
 80036ac:	1cac      	adds	r4, r5, #2
    if (c == '.') {
 80036ae:	2b2e      	cmp	r3, #46	; 0x2e
 80036b0:	f000 8130 	beq.w	8003914 <chprintf+0x2e4>
    precision = 0;
 80036b4:	2200      	movs	r2, #0
    if (c == 'l' || c == 'L') {
 80036b6:	f003 05df 	and.w	r5, r3, #223	; 0xdf
 80036ba:	2d4c      	cmp	r5, #76	; 0x4c
 80036bc:	f000 80b2 	beq.w	8003824 <chprintf+0x1f4>
      is_long = (c >= 'A') && (c <= 'Z');
 80036c0:	f1a3 0c44 	sub.w	ip, r3, #68	; 0x44
    switch (c) {
 80036c4:	f1bc 0f34 	cmp.w	ip, #52	; 0x34
 80036c8:	f200 8198 	bhi.w	80039fc <chprintf+0x3cc>
 80036cc:	e8df f01c 	tbh	[pc, ip, lsl #1]
 80036d0:	0196015e 	.word	0x0196015e
 80036d4:	01960196 	.word	0x01960196
 80036d8:	015e0196 	.word	0x015e0196
 80036dc:	01960196 	.word	0x01960196
 80036e0:	01960196 	.word	0x01960196
 80036e4:	019a0196 	.word	0x019a0196
 80036e8:	01960035 	.word	0x01960035
 80036ec:	01960196 	.word	0x01960196
 80036f0:	00940196 	.word	0x00940196
 80036f4:	01960196 	.word	0x01960196
 80036f8:	01960035 	.word	0x01960035
 80036fc:	01960196 	.word	0x01960196
 8003700:	01960196 	.word	0x01960196
 8003704:	01960196 	.word	0x01960196
 8003708:	01960196 	.word	0x01960196
 800370c:	014d0196 	.word	0x014d0196
 8003710:	0196015e 	.word	0x0196015e
 8003714:	01960196 	.word	0x01960196
 8003718:	015e0196 	.word	0x015e0196
 800371c:	01960196 	.word	0x01960196
 8003720:	01960196 	.word	0x01960196
 8003724:	019a0196 	.word	0x019a0196
 8003728:	01960035 	.word	0x01960035
 800372c:	012d0196 	.word	0x012d0196
 8003730:	00940196 	.word	0x00940196
 8003734:	01960196 	.word	0x01960196
 8003738:	0035      	.short	0x0035
      if (c == 0) {
 800373a:	f04f 0e10 	mov.w	lr, #16
        l = va_arg(ap, unsigned int);
 800373e:	f859 5b04 	ldr.w	r5, [r9], #4
  q = p + MAX_FILLER;
 8003742:	f10d 0317 	add.w	r3, sp, #23
 8003746:	e000      	b.n	800374a <chprintf+0x11a>
  } while ((ll /= radix) != 0);
 8003748:	4663      	mov	r3, ip
    i = (int)(l % radix);
 800374a:	46aa      	mov	sl, r5
 800374c:	fbb5 f5fe 	udiv	r5, r5, lr
 8003750:	fb0e ab15 	mls	fp, lr, r5, sl
    i += '0';
 8003754:	f10b 0230 	add.w	r2, fp, #48	; 0x30
    if (i > '9') {
 8003758:	2a39      	cmp	r2, #57	; 0x39
      i += 'A' - '0' - 10;
 800375a:	bfc8      	it	gt
 800375c:	f10b 0237 	addgt.w	r2, fp, #55	; 0x37
    *--q = i;
 8003760:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 8003762:	45f2      	cmp	sl, lr
    *--q = i;
 8003764:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8003768:	f803 2c01 	strb.w	r2, [r3, #-1]
  } while ((ll /= radix) != 0);
 800376c:	d2ec      	bcs.n	8003748 <chprintf+0x118>
  i = (int)(p + MAX_FILLER - q);
 800376e:	f10d 0a0c 	add.w	sl, sp, #12
 8003772:	f10d 0517 	add.w	r5, sp, #23
 8003776:	eba5 050c 	sub.w	r5, r5, ip
 800377a:	46d6      	mov	lr, sl
 800377c:	f10d 0c17 	add.w	ip, sp, #23
 8003780:	e001      	b.n	8003786 <chprintf+0x156>
 8003782:	f813 2b01 	ldrb.w	r2, [r3], #1
    *p++ = *q++;
 8003786:	f80e 2b01 	strb.w	r2, [lr], #1
  while (--i);
 800378a:	4563      	cmp	r3, ip
 800378c:	d1f9      	bne.n	8003782 <chprintf+0x152>
 800378e:	1b49      	subs	r1, r1, r5
 8003790:	3d01      	subs	r5, #1
    if ((width -= i) < 0) {
 8003792:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8003796:	b920      	cbnz	r0, 80037a2 <chprintf+0x172>
    if (width < 0) {
 8003798:	2900      	cmp	r1, #0
      width = -width;
 800379a:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 800379e:	f300 8145 	bgt.w	8003a2c <chprintf+0x3fc>
    while (--i >= 0) {
 80037a2:	2d00      	cmp	r5, #0
 80037a4:	db0f      	blt.n	80037c6 <chprintf+0x196>
 80037a6:	1c6b      	adds	r3, r5, #1
 80037a8:	4453      	add	r3, sl
 80037aa:	9401      	str	r4, [sp, #4]
 80037ac:	461c      	mov	r4, r3
      streamPut(chp, (uint8_t)*s++);
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80037b4:	68d2      	ldr	r2, [r2, #12]
 80037b6:	4638      	mov	r0, r7
 80037b8:	4790      	blx	r2
    while (--i >= 0) {
 80037ba:	45a2      	cmp	sl, r4
 80037bc:	d1f7      	bne.n	80037ae <chprintf+0x17e>
 80037be:	f108 0801 	add.w	r8, r8, #1
 80037c2:	9c01      	ldr	r4, [sp, #4]
 80037c4:	44a8      	add	r8, r5
    while (width) {
 80037c6:	f1bb 0f00 	cmp.w	fp, #0
 80037ca:	f43f af4b 	beq.w	8003664 <chprintf+0x34>
 80037ce:	465d      	mov	r5, fp
      streamPut(chp, (uint8_t)filler);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	4631      	mov	r1, r6
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	4638      	mov	r0, r7
 80037d8:	4798      	blx	r3
    while (width) {
 80037da:	3d01      	subs	r5, #1
 80037dc:	d1f8      	bne.n	80037d0 <chprintf+0x1a0>
    c = *fmt++;
 80037de:	4625      	mov	r5, r4
 80037e0:	44d8      	add	r8, fp
 80037e2:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 80037e6:	2900      	cmp	r1, #0
 80037e8:	f47f af42 	bne.w	8003670 <chprintf+0x40>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 80037ec:	4640      	mov	r0, r8
 80037ee:	b006      	add	sp, #24
 80037f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f4:	b003      	add	sp, #12
 80037f6:	4770      	bx	lr
      if (c == 0) {
 80037f8:	f04f 0e0a 	mov.w	lr, #10
 80037fc:	e79f      	b.n	800373e <chprintf+0x10e>
        c = *fmt++;
 80037fe:	1c6c      	adds	r4, r5, #1
        if (c == 0) {
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f3      	beq.n	80037ec <chprintf+0x1bc>
      width = 0;
 8003804:	2100      	movs	r1, #0
        if (c >= '0' && c <= '9') {
 8003806:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	2a09      	cmp	r2, #9
          width = width * 10 + c;
 800380e:	eb01 0581 	add.w	r5, r1, r1, lsl #2
        if (c >= '0' && c <= '9') {
 8003812:	f63f af4c 	bhi.w	80036ae <chprintf+0x7e>
        c = *fmt++;
 8003816:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 800381a:	eb02 0145 	add.w	r1, r2, r5, lsl #1
        if (c == 0) {
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f1      	bne.n	8003806 <chprintf+0x1d6>
 8003822:	e7e3      	b.n	80037ec <chprintf+0x1bc>
      c = *fmt++;
 8003824:	f814 3b01 	ldrb.w	r3, [r4], #1
      if (c == 0) {
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0df      	beq.n	80037ec <chprintf+0x1bc>
    switch (c) {
 800382c:	f1a3 0544 	sub.w	r5, r3, #68	; 0x44
 8003830:	2d34      	cmp	r5, #52	; 0x34
 8003832:	f200 80e3 	bhi.w	80039fc <chprintf+0x3cc>
 8003836:	f20f 0c08 	addw	ip, pc, #8
 800383a:	f85c f025 	ldr.w	pc, [ip, r5, lsl #2]
 800383e:	bf00      	nop
 8003840:	0800398d 	.word	0x0800398d
 8003844:	080039fd 	.word	0x080039fd
 8003848:	080039fd 	.word	0x080039fd
 800384c:	080039fd 	.word	0x080039fd
 8003850:	080039fd 	.word	0x080039fd
 8003854:	0800398d 	.word	0x0800398d
 8003858:	080039fd 	.word	0x080039fd
 800385c:	080039fd 	.word	0x080039fd
 8003860:	080039fd 	.word	0x080039fd
 8003864:	080039fd 	.word	0x080039fd
 8003868:	080039fd 	.word	0x080039fd
 800386c:	08003a05 	.word	0x08003a05
 8003870:	0800373b 	.word	0x0800373b
 8003874:	080039fd 	.word	0x080039fd
 8003878:	080039fd 	.word	0x080039fd
 800387c:	080039fd 	.word	0x080039fd
 8003880:	080039fd 	.word	0x080039fd
 8003884:	080037f9 	.word	0x080037f9
 8003888:	080039fd 	.word	0x080039fd
 800388c:	080039fd 	.word	0x080039fd
 8003890:	0800373b 	.word	0x0800373b
 8003894:	080039fd 	.word	0x080039fd
 8003898:	080039fd 	.word	0x080039fd
 800389c:	080039fd 	.word	0x080039fd
 80038a0:	080039fd 	.word	0x080039fd
 80038a4:	080039fd 	.word	0x080039fd
 80038a8:	080039fd 	.word	0x080039fd
 80038ac:	080039fd 	.word	0x080039fd
 80038b0:	080039fd 	.word	0x080039fd
 80038b4:	080039fd 	.word	0x080039fd
 80038b8:	080039fd 	.word	0x080039fd
 80038bc:	0800396b 	.word	0x0800396b
 80038c0:	0800398d 	.word	0x0800398d
 80038c4:	080039fd 	.word	0x080039fd
 80038c8:	080039fd 	.word	0x080039fd
 80038cc:	080039fd 	.word	0x080039fd
 80038d0:	080039fd 	.word	0x080039fd
 80038d4:	0800398d 	.word	0x0800398d
 80038d8:	080039fd 	.word	0x080039fd
 80038dc:	080039fd 	.word	0x080039fd
 80038e0:	080039fd 	.word	0x080039fd
 80038e4:	080039fd 	.word	0x080039fd
 80038e8:	080039fd 	.word	0x080039fd
 80038ec:	08003a05 	.word	0x08003a05
 80038f0:	0800373b 	.word	0x0800373b
 80038f4:	080039fd 	.word	0x080039fd
 80038f8:	080039fd 	.word	0x080039fd
 80038fc:	0800392b 	.word	0x0800392b
 8003900:	080039fd 	.word	0x080039fd
 8003904:	080037f9 	.word	0x080037f9
 8003908:	080039fd 	.word	0x080039fd
 800390c:	080039fd 	.word	0x080039fd
 8003910:	0800373b 	.word	0x0800373b
      c = *fmt++;
 8003914:	7823      	ldrb	r3, [r4, #0]
      if (c == 0) {
 8003916:	2b00      	cmp	r3, #0
 8003918:	f43f af68 	beq.w	80037ec <chprintf+0x1bc>
      if (c == '*') {
 800391c:	2b2a      	cmp	r3, #42	; 0x2a
 800391e:	d174      	bne.n	8003a0a <chprintf+0x3da>
        c = *fmt++;
 8003920:	7863      	ldrb	r3, [r4, #1]
        precision = va_arg(ap, int);
 8003922:	f859 2b04 	ldr.w	r2, [r9], #4
        c = *fmt++;
 8003926:	3402      	adds	r4, #2
 8003928:	e6c5      	b.n	80036b6 <chprintf+0x86>
      if ((s = va_arg(ap, char *)) == 0) {
 800392a:	f859 ab04 	ldr.w	sl, [r9], #4
 800392e:	f1ba 0f00 	cmp.w	sl, #0
 8003932:	f000 80bc 	beq.w	8003aae <chprintf+0x47e>
 8003936:	f89a 3000 	ldrb.w	r3, [sl]
      if (precision == 0) {
 800393a:	2a00      	cmp	r2, #0
 800393c:	f040 80aa 	bne.w	8003a94 <chprintf+0x464>
      for (p = s; *p && (--precision >= 0); p++)
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80ab 	beq.w	8003a9c <chprintf+0x46c>
 8003946:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800394a:	4655      	mov	r5, sl
 800394c:	e001      	b.n	8003952 <chprintf+0x322>
 800394e:	42d3      	cmn	r3, r2
 8003950:	d405      	bmi.n	800395e <chprintf+0x32e>
 8003952:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003956:	ebaa 0305 	sub.w	r3, sl, r5
 800395a:	2e00      	cmp	r6, #0
 800395c:	d1f7      	bne.n	800394e <chprintf+0x31e>
 800395e:	eba5 050a 	sub.w	r5, r5, sl
 8003962:	1b49      	subs	r1, r1, r5
      filler = ' ';
 8003964:	2620      	movs	r6, #32
 8003966:	3d01      	subs	r5, #1
 8003968:	e713      	b.n	8003792 <chprintf+0x162>
      *p++ = va_arg(ap, int);
 800396a:	f859 3b04 	ldr.w	r3, [r9], #4
 800396e:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8003972:	3901      	subs	r1, #1
      filler = ' ';
 8003974:	2620      	movs	r6, #32
    if ((width -= i) < 0) {
 8003976:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 800397a:	b918      	cbnz	r0, 8003984 <chprintf+0x354>
    if (width < 0) {
 800397c:	2900      	cmp	r1, #0
      width = -width;
 800397e:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8003982:	dc72      	bgt.n	8003a6a <chprintf+0x43a>
    if (left_align == false) {
 8003984:	2500      	movs	r5, #0
 8003986:	f10d 0a0c 	add.w	sl, sp, #12
 800398a:	e70c      	b.n	80037a6 <chprintf+0x176>
        l = va_arg(ap, int);
 800398c:	f859 cb04 	ldr.w	ip, [r9], #4
      if (l < 0) {
 8003990:	f1bc 0f00 	cmp.w	ip, #0
 8003994:	db5f      	blt.n	8003a56 <chprintf+0x426>
        if (do_sign) {
 8003996:	f1be 0f00 	cmp.w	lr, #0
 800399a:	f000 808e 	beq.w	8003aba <chprintf+0x48a>
          *p++ = '+';
 800399e:	232b      	movs	r3, #43	; 0x2b
 80039a0:	f88d 300c 	strb.w	r3, [sp, #12]
 80039a4:	f10d 050d 	add.w	r5, sp, #13
 80039a8:	f10d 0a0c 	add.w	sl, sp, #12
  q = p + MAX_FILLER;
 80039ac:	f105 030b 	add.w	r3, r5, #11
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	461a      	mov	r2, r3
    i = (int)(l % radix);
 80039b4:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <chprintf+0x4a4>)
 80039b6:	fba3 e30c 	umull	lr, r3, r3, ip
 80039ba:	08db      	lsrs	r3, r3, #3
 80039bc:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 80039c0:	469e      	mov	lr, r3
 80039c2:	ebac 034b 	sub.w	r3, ip, fp, lsl #1
    i += '0';
 80039c6:	3330      	adds	r3, #48	; 0x30
    i = (int)(l % radix);
 80039c8:	46e3      	mov	fp, ip
    *--q = i;
 80039ca:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 80039cc:	f1bb 0f09 	cmp.w	fp, #9
    *--q = i;
 80039d0:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 80039d4:	46f4      	mov	ip, lr
  } while ((ll /= radix) != 0);
 80039d6:	dced      	bgt.n	80039b4 <chprintf+0x384>
 80039d8:	469e      	mov	lr, r3
  i = (int)(p + MAX_FILLER - q);
 80039da:	9b01      	ldr	r3, [sp, #4]
 80039dc:	eba3 0c02 	sub.w	ip, r3, r2
 80039e0:	44ac      	add	ip, r5
 80039e2:	4673      	mov	r3, lr
 80039e4:	e001      	b.n	80039ea <chprintf+0x3ba>
 80039e6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 80039ea:	f805 3b01 	strb.w	r3, [r5], #1
  while (--i);
 80039ee:	4565      	cmp	r5, ip
 80039f0:	d1f9      	bne.n	80039e6 <chprintf+0x3b6>
 80039f2:	eba5 050a 	sub.w	r5, r5, sl
 80039f6:	1b49      	subs	r1, r1, r5
 80039f8:	3d01      	subs	r5, #1
 80039fa:	e6ca      	b.n	8003792 <chprintf+0x162>
      *p++ = c;
 80039fc:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 8003a00:	3901      	subs	r1, #1
 8003a02:	e7b8      	b.n	8003976 <chprintf+0x346>
      if (c == 0) {
 8003a04:	f04f 0e08 	mov.w	lr, #8
 8003a08:	e699      	b.n	800373e <chprintf+0x10e>
      c = *fmt++;
 8003a0a:	3401      	adds	r4, #1
    precision = 0;
 8003a0c:	2200      	movs	r2, #0
        while (c >= '0' && c <= '9') {
 8003a0e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8003a12:	b2ed      	uxtb	r5, r5
 8003a14:	2d09      	cmp	r5, #9
          precision = precision * 10 + c;
 8003a16:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
        while (c >= '0' && c <= '9') {
 8003a1a:	f63f ae4c 	bhi.w	80036b6 <chprintf+0x86>
          c = *fmt++;
 8003a1e:	f814 3b01 	ldrb.w	r3, [r4], #1
          precision = precision * 10 + c;
 8003a22:	eb05 024c 	add.w	r2, r5, ip, lsl #1
          if (c == 0) {
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f1      	bne.n	8003a0e <chprintf+0x3de>
 8003a2a:	e6df      	b.n	80037ec <chprintf+0x1bc>
      width = -width;
 8003a2c:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 8003a30:	f89a 1000 	ldrb.w	r1, [sl]
 8003a34:	292d      	cmp	r1, #45	; 0x2d
 8003a36:	d021      	beq.n	8003a7c <chprintf+0x44c>
        streamPut(chp, (uint8_t)filler);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	4631      	mov	r1, r6
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	4638      	mov	r0, r7
 8003a40:	4798      	blx	r3
      } while (++width != 0);
 8003a42:	f11b 0b01 	adds.w	fp, fp, #1
 8003a46:	d1f7      	bne.n	8003a38 <chprintf+0x408>
 8003a48:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 8003a4a:	2d00      	cmp	r5, #0
 8003a4c:	eba8 0803 	sub.w	r8, r8, r3
 8003a50:	f6bf aea9 	bge.w	80037a6 <chprintf+0x176>
 8003a54:	e606      	b.n	8003664 <chprintf+0x34>
        *p++ = '-';
 8003a56:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8003a58:	f1cc 0c00 	rsb	ip, ip, #0
        *p++ = '-';
 8003a5c:	f88d 300c 	strb.w	r3, [sp, #12]
 8003a60:	f10d 050d 	add.w	r5, sp, #13
 8003a64:	f10d 0a0c 	add.w	sl, sp, #12
 8003a68:	e7a0      	b.n	80039ac <chprintf+0x37c>
      if (*s == '-' && filler == '0') {
 8003a6a:	f89d 100c 	ldrb.w	r1, [sp, #12]
      width = -width;
 8003a6e:	f8cd b004 	str.w	fp, [sp, #4]
      if (*s == '-' && filler == '0') {
 8003a72:	292d      	cmp	r1, #45	; 0x2d
    if (width < 0) {
 8003a74:	f10d 0a0c 	add.w	sl, sp, #12
 8003a78:	4605      	mov	r5, r0
      if (*s == '-' && filler == '0') {
 8003a7a:	d1dd      	bne.n	8003a38 <chprintf+0x408>
 8003a7c:	2e30      	cmp	r6, #48	; 0x30
 8003a7e:	d1db      	bne.n	8003a38 <chprintf+0x408>
        streamPut(chp, (uint8_t)*s++);
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	4638      	mov	r0, r7
 8003a84:	68d2      	ldr	r2, [r2, #12]
 8003a86:	4790      	blx	r2
 8003a88:	f10a 0a01 	add.w	sl, sl, #1
        n++;
 8003a8c:	f108 0801 	add.w	r8, r8, #1
        i--;
 8003a90:	3d01      	subs	r5, #1
 8003a92:	e7d1      	b.n	8003a38 <chprintf+0x408>
      for (p = s; *p && (--precision >= 0); p++)
 8003a94:	b113      	cbz	r3, 8003a9c <chprintf+0x46c>
 8003a96:	3a01      	subs	r2, #1
 8003a98:	f57f af57 	bpl.w	800394a <chprintf+0x31a>
    if ((width -= i) < 0) {
 8003a9c:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
    if (left_align == false) {
 8003aa0:	b918      	cbnz	r0, 8003aaa <chprintf+0x47a>
    if (width < 0) {
 8003aa2:	2900      	cmp	r1, #0
      width = -width;
 8003aa4:	f1cb 0b00 	rsb	fp, fp, #0
    if (width < 0) {
 8003aa8:	dc0d      	bgt.n	8003ac6 <chprintf+0x496>
    if (left_align == false) {
 8003aaa:	2620      	movs	r6, #32
 8003aac:	e68b      	b.n	80037c6 <chprintf+0x196>
        s = "(null)";
 8003aae:	f8df a028 	ldr.w	sl, [pc, #40]	; 8003ad8 <chprintf+0x4a8>
      if (precision == 0) {
 8003ab2:	2a00      	cmp	r2, #0
 8003ab4:	f43f af47 	beq.w	8003946 <chprintf+0x316>
 8003ab8:	e7ed      	b.n	8003a96 <chprintf+0x466>
    p = tmpbuf;
 8003aba:	f10d 0a0c 	add.w	sl, sp, #12
 8003abe:	4655      	mov	r5, sl
 8003ac0:	e774      	b.n	80039ac <chprintf+0x37c>
  int n = 0;
 8003ac2:	4688      	mov	r8, r1
  return formatted_bytes;
 8003ac4:	e692      	b.n	80037ec <chprintf+0x1bc>
      width = -width;
 8003ac6:	f8cd b004 	str.w	fp, [sp, #4]
    if (width < 0) {
 8003aca:	2620      	movs	r6, #32
 8003acc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003ad0:	e7ae      	b.n	8003a30 <chprintf+0x400>
 8003ad2:	bf00      	nop
 8003ad4:	cccccccd 	.word	0xcccccccd
 8003ad8:	0800607c 	.word	0x0800607c
 8003adc:	00000000 	.word	0x00000000

08003ae0 <Thread1>:

/*
 * Green LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8003ae0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8003ae4:	4b38      	ldr	r3, [pc, #224]	; (8003bc8 <Thread1+0xe8>)
 8003ae6:	4a39      	ldr	r2, [pc, #228]	; (8003bcc <Thread1+0xec>)
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	4f39      	ldr	r7, [pc, #228]	; (8003bd0 <Thread1+0xf0>)
 8003aec:	4e39      	ldr	r6, [pc, #228]	; (8003bd4 <Thread1+0xf4>)
  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time;
    time = serusbcfg1.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOC, 13);
 8003aee:	4d3a      	ldr	r5, [pc, #232]	; (8003bd8 <Thread1+0xf8>)
  baudf = (CLOCKFREQ/time);
 8003af0:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8003be4 <Thread1+0x104>
 8003af4:	619a      	str	r2, [r3, #24]
static THD_FUNCTION(Thread1, arg) {
 8003af6:	b08d      	sub	sp, #52	; 0x34
    palClearPad(GPIOC, 13);
 8003af8:	f44f 5900 	mov.w	r9, #8192	; 0x2000
 8003afc:	46ca      	mov	sl, r9
    time = serusbcfg1.usbp->state == USB_ACTIVE ? 250 : 500;
 8003afe:	783b      	ldrb	r3, [r7, #0]
    palClearPad(GPIOC, 13);
 8003b00:	f8a5 a01a 	strh.w	sl, [r5, #26]
    time = serusbcfg1.usbp->state == USB_ACTIVE ? 250 : 500;
 8003b04:	f241 3088 	movw	r0, #5000	; 0x1388
 8003b08:	f640 14c4 	movw	r4, #2500	; 0x9c4
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	bf18      	it	ne
 8003b10:	4604      	movne	r4, r0
    chThdSleepMilliseconds(time);
 8003b12:	4620      	mov	r0, r4
 8003b14:	f7fe ffc4 	bl	8002aa0 <chThdSleep>
    palSetPad(GPIOC, 13);
    chThdSleepMilliseconds(time);
 8003b18:	4620      	mov	r0, r4
    palSetPad(GPIOC, 13);
 8003b1a:	f8a5 9018 	strh.w	r9, [r5, #24]
    chThdSleepMilliseconds(time);
 8003b1e:	f7fe ffbf 	bl	8002aa0 <chThdSleep>
    if (smallest_pulse < 65535){
 8003b22:	6833      	ldr	r3, [r6, #0]
 8003b24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d8e8      	bhi.n	8003afe <Thread1+0x1e>
  uint32_t sbr[] = {150,300,600,1200,2400,4800,9600,19200,38400,57600,115200,230400};
 8003b2c:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8003be8 <Thread1+0x108>
 8003b30:	4698      	mov	r8, r3
 8003b32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003b36:	466c      	mov	r4, sp
 8003b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b40:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8003b44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (time == 0)
 8003b48:	f1b8 0f00 	cmp.w	r8, #0
 8003b4c:	d026      	beq.n	8003b9c <Thread1+0xbc>
  baudf = (CLOCKFREQ/time);
 8003b4e:	fbbb f8f8 	udiv	r8, fp, r8
 8003b52:	4640      	mov	r0, r8
 8003b54:	f7fc ffa4 	bl	8000aa0 <__aeabi_ui2d>
  baudu = (uint32_t)(baudf * 1.09); // Window is +- 9%
 8003b58:	a319      	add	r3, pc, #100	; (adr r3, 8003bc0 <Thread1+0xe0>)
 8003b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
  baudf = (CLOCKFREQ/time);
 8003b5e:	4681      	mov	r9, r0
 8003b60:	468a      	mov	sl, r1
  baudu = (uint32_t)(baudf * 1.09); // Window is +- 9%
 8003b62:	f7fd f817 	bl	8000b94 <__aeabi_dmul>
 8003b66:	f7fd fa27 	bl	8000fb8 <__aeabi_d2uiz>
  if (baudu < sbr[0])
 8003b6a:	2895      	cmp	r0, #149	; 0x95
  baudu = (uint32_t)(baudf * 1.09); // Window is +- 9%
 8003b6c:	4604      	mov	r4, r0
  if (baudu < sbr[0])
 8003b6e:	d91e      	bls.n	8003bae <Thread1+0xce>
  baudl = (uint32_t)(baudf / 1.09); // Window is +- 9%
 8003b70:	a313      	add	r3, pc, #76	; (adr r3, 8003bc0 <Thread1+0xe0>)
 8003b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b76:	4648      	mov	r0, r9
 8003b78:	4651      	mov	r1, sl
 8003b7a:	f7fd f935 	bl	8000de8 <__aeabi_ddiv>
 8003b7e:	f7fd fa1b 	bl	8000fb8 <__aeabi_d2uiz>
  if (baudl > sbr[11])
 8003b82:	f5b0 3f61 	cmp.w	r0, #230400	; 0x38400
 8003b86:	d815      	bhi.n	8003bb4 <Thread1+0xd4>
 8003b88:	466b      	mov	r3, sp
 8003b8a:	a90c      	add	r1, sp, #48	; 0x30
    if ((baudl < sbr[idx]) && (baudu > sbr[idx]))
 8003b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b90:	4290      	cmp	r0, r2
 8003b92:	d201      	bcs.n	8003b98 <Thread1+0xb8>
 8003b94:	4294      	cmp	r4, r2
 8003b96:	d810      	bhi.n	8003bba <Thread1+0xda>
  for (idx = 0;idx < 12; idx++){
 8003b98:	4299      	cmp	r1, r3
 8003b9a:	d1f7      	bne.n	8003b8c <Thread1+0xac>
      //chprintf(dbg, "Time: %d \r\n", smallest_pulse);
      chprintf(dbg, "Baud: %d \r\n", calc_baud(smallest_pulse));
 8003b9c:	490f      	ldr	r1, [pc, #60]	; (8003bdc <Thread1+0xfc>)
 8003b9e:	4810      	ldr	r0, [pc, #64]	; (8003be0 <Thread1+0x100>)
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	f7ff fd45 	bl	8003630 <chprintf>
      smallest_pulse = 0xFFFF;
 8003ba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003baa:	6033      	str	r3, [r6, #0]
 8003bac:	e7a4      	b.n	8003af8 <Thread1+0x18>
    return 0;
 8003bae:	f04f 0800 	mov.w	r8, #0
 8003bb2:	e7f3      	b.n	8003b9c <Thread1+0xbc>
    return 0xFFFFFFFF;
 8003bb4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003bb8:	e7f0      	b.n	8003b9c <Thread1+0xbc>
    if ((baudl < sbr[idx]) && (baudu > sbr[idx]))
 8003bba:	4690      	mov	r8, r2
 8003bbc:	e7ee      	b.n	8003b9c <Thread1+0xbc>
 8003bbe:	bf00      	nop
 8003bc0:	d70a3d71 	.word	0xd70a3d71
 8003bc4:	3ff170a3 	.word	0x3ff170a3
 8003bc8:	2000189c 	.word	0x2000189c
 8003bcc:	08006084 	.word	0x08006084
 8003bd0:	2000183c 	.word	0x2000183c
 8003bd4:	20000834 	.word	0x20000834
 8003bd8:	40020800 	.word	0x40020800
 8003bdc:	0800608c 	.word	0x0800608c
 8003be0:	200013ac 	.word	0x200013ac
 8003be4:	00989680 	.word	0x00989680
 8003be8:	08006040 	.word	0x08006040
 8003bec:	00000000 	.word	0x00000000

08003bf0 <send_data>:
//      count = 0;
//      smallest_pulse = 0xFFFF;
//    }
  }
}
void send_data(uint8_t source, uint8_t c){
 8003bf0:	b570      	push	{r4, r5, r6, lr}
  if (last_src == source){
 8003bf2:	4e1c      	ldr	r6, [pc, #112]	; (8003c64 <send_data+0x74>)
 8003bf4:	7833      	ldrb	r3, [r6, #0]
 8003bf6:	4283      	cmp	r3, r0
void send_data(uint8_t source, uint8_t c){
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	460d      	mov	r5, r1
  if (last_src == source){
 8003bfc:	d103      	bne.n	8003c06 <send_data+0x16>
    if (source < 3)
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d928      	bls.n	8003c54 <send_data+0x64>
      chprintf(dbg, "\r\n%06d BREAK---------------- ",start);
    last_src = source;

  }

}
 8003c02:	b002      	add	sp, #8
 8003c04:	bd70      	pop	{r4, r5, r6, pc}
 8003c06:	4604      	mov	r4, r0
 8003c08:	2320      	movs	r3, #32
 8003c0a:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
 8003c0e:	4a16      	ldr	r2, [pc, #88]	; (8003c68 <send_data+0x78>)
 8003c10:	2300      	movs	r3, #0
 8003c12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c14:	f383 8811 	msr	BASEPRI, r3
    start = TIME_I2MS(chVTGetSystemTime());
 8003c18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c1c:	f242 700f 	movw	r0, #9999	; 0x270f
 8003c20:	2100      	movs	r1, #0
 8003c22:	fbe3 0102 	umlal	r0, r1, r3, r2
 8003c26:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f7fd f9e4 	bl	8000ff8 <__aeabi_uldivmod>
    if (source < 3)
 8003c30:	2c02      	cmp	r4, #2
    start = TIME_I2MS(chVTGetSystemTime());
 8003c32:	4602      	mov	r2, r0
    if (source < 3)
 8003c34:	d808      	bhi.n	8003c48 <send_data+0x58>
      chprintf(dbg, "\r\n%06d %d> %02x ",start, source, c);
 8003c36:	490d      	ldr	r1, [pc, #52]	; (8003c6c <send_data+0x7c>)
 8003c38:	480d      	ldr	r0, [pc, #52]	; (8003c70 <send_data+0x80>)
 8003c3a:	9500      	str	r5, [sp, #0]
 8003c3c:	4623      	mov	r3, r4
 8003c3e:	f7ff fcf7 	bl	8003630 <chprintf>
    last_src = source;
 8003c42:	7034      	strb	r4, [r6, #0]
}
 8003c44:	b002      	add	sp, #8
 8003c46:	bd70      	pop	{r4, r5, r6, pc}
      chprintf(dbg, "\r\n%06d BREAK---------------- ",start);
 8003c48:	490a      	ldr	r1, [pc, #40]	; (8003c74 <send_data+0x84>)
 8003c4a:	4809      	ldr	r0, [pc, #36]	; (8003c70 <send_data+0x80>)
 8003c4c:	f7ff fcf0 	bl	8003630 <chprintf>
    last_src = source;
 8003c50:	7034      	strb	r4, [r6, #0]
 8003c52:	e7f7      	b.n	8003c44 <send_data+0x54>
      chprintf(dbg, "%02x ", c);
 8003c54:	460a      	mov	r2, r1
 8003c56:	4806      	ldr	r0, [pc, #24]	; (8003c70 <send_data+0x80>)
 8003c58:	4907      	ldr	r1, [pc, #28]	; (8003c78 <send_data+0x88>)
}
 8003c5a:	b002      	add	sp, #8
 8003c5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      chprintf(dbg, "%02x ", c);
 8003c60:	f7ff bce6 	b.w	8003630 <chprintf>
 8003c64:	20001cb0 	.word	0x20001cb0
 8003c68:	40000c00 	.word	0x40000c00
 8003c6c:	080060a0 	.word	0x080060a0
 8003c70:	200013ac 	.word	0x200013ac
 8003c74:	080060b4 	.word	0x080060b4
 8003c78:	08006098 	.word	0x08006098
 8003c7c:	00000000 	.word	0x00000000

08003c80 <Listener1>:

static THD_WORKING_AREA(waListener1, 128);
static THD_FUNCTION(Listener1, arg) {
 8003c80:	b500      	push	{lr}
 8003c82:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <Listener1+0x34>)
 8003c84:	4a0c      	ldr	r2, [pc, #48]	; (8003cb8 <Listener1+0x38>)
 8003c86:	695b      	ldr	r3, [r3, #20]

  (void)arg;
  uint8_t c;
  chRegSetThreadName("listener1");
  while (true) {
    sdRead(&SD1, (uint8_t *)&c, 1);
 8003c88:	4c0c      	ldr	r4, [pc, #48]	; (8003cbc <Listener1+0x3c>)
 8003c8a:	619a      	str	r2, [r3, #24]
static THD_FUNCTION(Listener1, arg) {
 8003c8c:	b083      	sub	sp, #12
    sdRead(&SD1, (uint8_t *)&c, 1);
 8003c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c92:	2201      	movs	r2, #1
 8003c94:	f10d 0107 	add.w	r1, sp, #7
 8003c98:	4620      	mov	r0, r4
 8003c9a:	f7ff f961 	bl	8002f60 <iqReadTimeout>
    send_data(1,c);
 8003c9e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003ca2:	2001      	movs	r0, #1
 8003ca4:	f7ff ffa4 	bl	8003bf0 <send_data>
    //chprintf(dbg, "1>%c \r\n", c);
    chThdSleepMilliseconds(50);
 8003ca8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003cac:	f7fe fef8 	bl	8002aa0 <chThdSleep>
  while (true) {
 8003cb0:	e7ed      	b.n	8003c8e <Listener1+0xe>
 8003cb2:	bf00      	nop
 8003cb4:	2000189c 	.word	0x2000189c
 8003cb8:	080060d4 	.word	0x080060d4
 8003cbc:	20000ca4 	.word	0x20000ca4

08003cc0 <Listener2>:
  }
}
static THD_WORKING_AREA(waListener2, 128);
static THD_FUNCTION(Listener2, arg) {
 8003cc0:	b500      	push	{lr}
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <Listener2+0x34>)
 8003cc4:	4a0c      	ldr	r2, [pc, #48]	; (8003cf8 <Listener2+0x38>)
 8003cc6:	695b      	ldr	r3, [r3, #20]

  (void)arg;
  uint8_t c;
  chRegSetThreadName("listener2");
  while (true) {
    sdRead(&SD2, (uint8_t *)&c, 1);
 8003cc8:	4c0c      	ldr	r4, [pc, #48]	; (8003cfc <Listener2+0x3c>)
 8003cca:	619a      	str	r2, [r3, #24]
static THD_FUNCTION(Listener2, arg) {
 8003ccc:	b083      	sub	sp, #12
    sdRead(&SD2, (uint8_t *)&c, 1);
 8003cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f10d 0107 	add.w	r1, sp, #7
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f7ff f941 	bl	8002f60 <iqReadTimeout>
    send_data(2,c);
 8003cde:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003ce2:	2002      	movs	r0, #2
 8003ce4:	f7ff ff84 	bl	8003bf0 <send_data>
    //chprintf(dbg, "2>%c \r\n", c);
    chThdSleepMilliseconds(50);
 8003ce8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003cec:	f7fe fed8 	bl	8002aa0 <chThdSleep>
  while (true) {
 8003cf0:	e7ed      	b.n	8003cce <Listener2+0xe>
 8003cf2:	bf00      	nop
 8003cf4:	2000189c 	.word	0x2000189c
 8003cf8:	080060e0 	.word	0x080060e0
 8003cfc:	20000f00 	.word	0x20000f00

08003d00 <Listener3>:
  }
}
static THD_WORKING_AREA(waListener3, 128);
static THD_FUNCTION(Listener3, arg) {
 8003d00:	b508      	push	{r3, lr}
 8003d02:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <Listener3+0x34>)
 8003d04:	4a0c      	ldr	r2, [pc, #48]	; (8003d38 <Listener3+0x38>)
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	4c0c      	ldr	r4, [pc, #48]	; (8003d3c <Listener3+0x3c>)

  (void)arg;
  static uint8_t disable = 0;
  chRegSetThreadName("listener3");
  while (true) {
    if (palReadPad(GPIOA, 0)){
 8003d0a:	4d0d      	ldr	r5, [pc, #52]	; (8003d40 <Listener3+0x40>)
 8003d0c:	619a      	str	r2, [r3, #24]
 8003d0e:	e00a      	b.n	8003d26 <Listener3+0x26>
      if (disable == 0){
 8003d10:	7821      	ldrb	r1, [r4, #0]
        send_data(3,0);
 8003d12:	2003      	movs	r0, #3
      if (disable == 0){
 8003d14:	b919      	cbnz	r1, 8003d1e <Listener3+0x1e>
        send_data(3,0);
 8003d16:	f7ff ff6b 	bl	8003bf0 <send_data>
        disable = 1;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	7023      	strb	r3, [r4, #0]
      }
    }
    else{
      disable = 0;
    }
    chThdSleepMilliseconds(50);
 8003d1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d22:	f7fe febd 	bl	8002aa0 <chThdSleep>
    if (palReadPad(GPIOA, 0)){
 8003d26:	692b      	ldr	r3, [r5, #16]
 8003d28:	f013 0301 	ands.w	r3, r3, #1
 8003d2c:	d1f0      	bne.n	8003d10 <Listener3+0x10>
      disable = 0;
 8003d2e:	7023      	strb	r3, [r4, #0]
 8003d30:	e7f5      	b.n	8003d1e <Listener3+0x1e>
 8003d32:	bf00      	nop
 8003d34:	2000189c 	.word	0x2000189c
 8003d38:	080060ec 	.word	0x080060ec
 8003d3c:	20001a64 	.word	0x20001a64
 8003d40:	40020000 	.word	0x40020000
	...

08003d50 <cmd_sbr>:
void cmd_sbr(BaseSequentialStream *chp, int argc, char *argv[]) {
  (void)* argv;
  (void)argc;
  uint32_t baud;
  baud = serial_config.speed;
  if(argc <1){
 8003d50:	2900      	cmp	r1, #0
void cmd_sbr(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003d52:	b538      	push	{r3, r4, r5, lr}
 8003d54:	4604      	mov	r4, r0
  if(argc <1){
 8003d56:	dd1f      	ble.n	8003d98 <cmd_sbr+0x48>
    chprintf(chp, "Sets Baudrate of listeners.\r\n");
    chprintf(chp, "Baudrate now: %d \r\n", baud);
    chprintf(chp, "Usage: sbr [BAUDRATE]\r\n");
    return;
  }
  baud = (uint32_t)strtol(argv[0], NULL, 0);
 8003d58:	4613      	mov	r3, r2
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	f001 fe26 	bl	80059b0 <strtol>
  if ((baud < 300) || (baud > 115200)){
 8003d64:	4b14      	ldr	r3, [pc, #80]	; (8003db8 <cmd_sbr+0x68>)
 8003d66:	f5a0 7196 	sub.w	r1, r0, #300	; 0x12c
 8003d6a:	4299      	cmp	r1, r3
  baud = (uint32_t)strtol(argv[0], NULL, 0);
 8003d6c:	4602      	mov	r2, r0
  if ((baud < 300) || (baud > 115200)){
 8003d6e:	d80d      	bhi.n	8003d8c <cmd_sbr+0x3c>
    chprintf(chp, "Baudrate out of Range: (%d) \r\n", baud);
    return;
  }
  serial_config.speed = baud;
 8003d70:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <cmd_sbr+0x6c>)
  sdStart(&SD1, &serial_config);
 8003d72:	4813      	ldr	r0, [pc, #76]	; (8003dc0 <cmd_sbr+0x70>)
  serial_config.speed = baud;
 8003d74:	601a      	str	r2, [r3, #0]
  sdStart(&SD1, &serial_config);
 8003d76:	f7fd fb0b 	bl	8001390 <sdStart.constprop.0>
  sdStart(&SD2, &serial_config);
 8003d7a:	4812      	ldr	r0, [pc, #72]	; (8003dc4 <cmd_sbr+0x74>)
 8003d7c:	f7fd fb08 	bl	8001390 <sdStart.constprop.0>
  chprintf(chp, "UARTs updated.\r\n");
 8003d80:	4620      	mov	r0, r4
 8003d82:	4911      	ldr	r1, [pc, #68]	; (8003dc8 <cmd_sbr+0x78>)
}
 8003d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chprintf(chp, "UARTs updated.\r\n");
 8003d88:	f7ff bc52 	b.w	8003630 <chprintf>
    chprintf(chp, "Baudrate out of Range: (%d) \r\n", baud);
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	490f      	ldr	r1, [pc, #60]	; (8003dcc <cmd_sbr+0x7c>)
}
 8003d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    chprintf(chp, "Baudrate out of Range: (%d) \r\n", baud);
 8003d94:	f7ff bc4c 	b.w	8003630 <chprintf>
  baud = serial_config.speed;
 8003d98:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <cmd_sbr+0x6c>)
    chprintf(chp, "Sets Baudrate of listeners.\r\n");
 8003d9a:	490d      	ldr	r1, [pc, #52]	; (8003dd0 <cmd_sbr+0x80>)
  baud = serial_config.speed;
 8003d9c:	681d      	ldr	r5, [r3, #0]
    chprintf(chp, "Sets Baudrate of listeners.\r\n");
 8003d9e:	f7ff fc47 	bl	8003630 <chprintf>
    chprintf(chp, "Baudrate now: %d \r\n", baud);
 8003da2:	490c      	ldr	r1, [pc, #48]	; (8003dd4 <cmd_sbr+0x84>)
 8003da4:	462a      	mov	r2, r5
 8003da6:	4620      	mov	r0, r4
 8003da8:	f7ff fc42 	bl	8003630 <chprintf>
    chprintf(chp, "Usage: sbr [BAUDRATE]\r\n");
 8003dac:	4620      	mov	r0, r4
 8003dae:	490a      	ldr	r1, [pc, #40]	; (8003dd8 <cmd_sbr+0x88>)
}
 8003db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    chprintf(chp, "Usage: sbr [BAUDRATE]\r\n");
 8003db4:	f7ff bc3c 	b.w	8003630 <chprintf>
 8003db8:	0001c0d4 	.word	0x0001c0d4
 8003dbc:	20000828 	.word	0x20000828
 8003dc0:	20000c98 	.word	0x20000c98
 8003dc4:	20000ef4 	.word	0x20000ef4
 8003dc8:	08006164 	.word	0x08006164
 8003dcc:	08006144 	.word	0x08006144
 8003dd0:	080060f8 	.word	0x080060f8
 8003dd4:	08006118 	.word	0x08006118
 8003dd8:	0800612c 	.word	0x0800612c
 8003ddc:	00000000 	.word	0x00000000

08003de0 <cmd_test>:
void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003de0:	b510      	push	{r4, lr}
  chprintf(chp, "Enter Number (<256) \r\n");
 8003de2:	490b      	ldr	r1, [pc, #44]	; (8003e10 <cmd_test+0x30>)
void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003de4:	b084      	sub	sp, #16
 8003de6:	4604      	mov	r4, r0
  chprintf(chp, "Enter Number (<256) \r\n");
 8003de8:	f7ff fc22 	bl	8003630 <chprintf>
  val = (uint16_t)strtol(text, NULL, 0);
 8003dec:	2200      	movs	r2, #0
 8003dee:	4611      	mov	r1, r2
 8003df0:	a801      	add	r0, sp, #4
 8003df2:	f001 fddd 	bl	80059b0 <strtol>
 8003df6:	4603      	mov	r3, r0
  chprintf(chp, "You entered text: %s Val: %04x got: %02x\r\n",
 8003df8:	aa01      	add	r2, sp, #4
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4905      	ldr	r1, [pc, #20]	; (8003e14 <cmd_test+0x34>)
 8003dfe:	4620      	mov	r0, r4
 8003e00:	f7ff fc16 	bl	8003630 <chprintf>
  chprintf(dbg, "OK\r\n");
 8003e04:	4904      	ldr	r1, [pc, #16]	; (8003e18 <cmd_test+0x38>)
 8003e06:	4805      	ldr	r0, [pc, #20]	; (8003e1c <cmd_test+0x3c>)
 8003e08:	f7ff fc12 	bl	8003630 <chprintf>
}
 8003e0c:	b004      	add	sp, #16
 8003e0e:	bd10      	pop	{r4, pc}
 8003e10:	08006178 	.word	0x08006178
 8003e14:	08006190 	.word	0x08006190
 8003e18:	080061bc 	.word	0x080061bc
 8003e1c:	200013ac 	.word	0x200013ac

08003e20 <cmd_echo>:

#if (SHELL_CMD_ECHO_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_echo(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc != 1) {
 8003e20:	2901      	cmp	r1, #1
 8003e22:	d003      	beq.n	8003e2c <cmd_echo+0xc>
    shellUsage(chp, "echo \"message\"");
 8003e24:	4a03      	ldr	r2, [pc, #12]	; (8003e34 <cmd_echo+0x14>)
 8003e26:	4904      	ldr	r1, [pc, #16]	; (8003e38 <cmd_echo+0x18>)
 8003e28:	f7ff bc02 	b.w	8003630 <chprintf>
    return;
  }
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	4903      	ldr	r1, [pc, #12]	; (8003e3c <cmd_echo+0x1c>)
 8003e30:	f7ff bbfe 	b.w	8003630 <chprintf>
 8003e34:	080061c4 	.word	0x080061c4
 8003e38:	080061d4 	.word	0x080061d4
 8003e3c:	080061e0 	.word	0x080061e0

08003e40 <shellThread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
THD_FUNCTION(shellThread, p) {
 8003e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e44:	4dbc      	ldr	r5, [pc, #752]	; (8004138 <shellThread+0x2f8>)
  int n;
  ShellConfig *scfg = p;
  BaseSequentialStream *chp = scfg->sc_channel;
 8003e46:	f8d0 a000 	ldr.w	sl, [r0]
#if !defined(_CHIBIOS_NIL_)
  chRegSetThreadName(SHELL_THREAD_NAME);
#endif

#if SHELL_USE_HISTORY == TRUE
  *(scfg->sc_histbuf) = 0;
 8003e4a:	6883      	ldr	r3, [r0, #8]
 8003e4c:	696a      	ldr	r2, [r5, #20]
 8003e4e:	49bb      	ldr	r1, [pc, #748]	; (800413c <shellThread+0x2fc>)
THD_FUNCTION(shellThread, p) {
 8003e50:	b0a7      	sub	sp, #156	; 0x9c
 8003e52:	4604      	mov	r4, r0
 8003e54:	9001      	str	r0, [sp, #4]
  const ShellCommand *scp = scfg->sc_commands;
 8003e56:	6840      	ldr	r0, [r0, #4]
 8003e58:	9006      	str	r0, [sp, #24]
  *(scfg->sc_histbuf) = 0;
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	6191      	str	r1, [r2, #24]
 8003e5e:	7018      	strb	r0, [r3, #0]
  ShellHistory hist = {
 8003e60:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8003e64:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  ShellHistory *shp = &hist;
#else
  ShellHistory *shp = NULL;
#endif

  chprintf(chp, SHELL_NEWLINE_STR);
 8003e68:	49b5      	ldr	r1, [pc, #724]	; (8004140 <shellThread+0x300>)
  ShellHistory hist = {
 8003e6a:	9010      	str	r0, [sp, #64]	; 0x40
  chprintf(chp, SHELL_NEWLINE_STR);
 8003e6c:	4650      	mov	r0, sl
  ShellHistory hist = {
 8003e6e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  chprintf(chp, SHELL_NEWLINE_STR);
 8003e72:	f7ff fbdd 	bl	8003630 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 8003e76:	49b3      	ldr	r1, [pc, #716]	; (8004144 <shellThread+0x304>)
 8003e78:	4650      	mov	r0, sl
 8003e7a:	f7ff fbd9 	bl	8003630 <chprintf>
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8003e7e:	696b      	ldr	r3, [r5, #20]
#if !defined(_CHIBIOS_NIL_)
  while (!chThdShouldTerminateX()) {
 8003e80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e84:	f013 0304 	ands.w	r3, r3, #4
 8003e88:	f040 8095 	bne.w	8003fb6 <shellThread+0x176>
bool shellGetLine(ShellConfig *scfg, char *line, unsigned size, ShellHistory *shp) {
  char *p = line;
  BaseSequentialStream *chp = scfg->sc_channel;
#if SHELL_USE_ESC_SEQ == TRUE
  bool escape = false;
  bool bracket = false;
 8003e8c:	9302      	str	r3, [sp, #8]
 8003e8e:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 8003e92:	f8cd a000 	str.w	sl, [sp]
    chprintf(chp, SHELL_PROMPT_STR);
 8003e96:	49ac      	ldr	r1, [pc, #688]	; (8004148 <shellThread+0x308>)
 8003e98:	9800      	ldr	r0, [sp, #0]
 8003e9a:	f7ff fbc9 	bl	8003630 <chprintf>
  BaseSequentialStream *chp = scfg->sc_channel;
 8003e9e:	9b01      	ldr	r3, [sp, #4]
  bool bracket = false;
 8003ea0:	2500      	movs	r5, #0
  BaseSequentialStream *chp = scfg->sc_channel;
 8003ea2:	681c      	ldr	r4, [r3, #0]
  bool escape = false;
 8003ea4:	462f      	mov	r7, r5
  char *p = line;
 8003ea6:	46c8      	mov	r8, r9
#endif

  while (true) {
    char c;

    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	4798      	blx	r3
 8003eb6:	2800      	cmp	r0, #0
 8003eb8:	d046      	beq.n	8003f48 <shellThread+0x108>
      return true;
#if SHELL_USE_ESC_SEQ == TRUE
    if (c == 27) {
 8003eba:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 8003ebe:	291b      	cmp	r1, #27
 8003ec0:	d02a      	beq.n	8003f18 <shellThread+0xd8>
      escape = true;
      continue;
    }
    if (escape) {
 8003ec2:	b15f      	cbz	r7, 8003edc <shellThread+0x9c>
      escape = false;
      if (c == '[') {
 8003ec4:	295b      	cmp	r1, #91	; 0x5b
 8003ec6:	d03d      	beq.n	8003f44 <shellThread+0x104>
        escape = true;
        bracket = true;
        continue;
      }
      if (bracket) {
 8003ec8:	b135      	cbz	r5, 8003ed8 <shellThread+0x98>
        bracket = false;
#if SHELL_USE_HISTORY == TRUE
        if (c == 'A') {
 8003eca:	2941      	cmp	r1, #65	; 0x41
 8003ecc:	f000 812a 	beq.w	8004124 <shellThread+0x2e4>
            chprintf(chp, "%s", line);
            p = line + len;
          }
          continue;
        }
        if (c == 'B') {
 8003ed0:	2942      	cmp	r1, #66	; 0x42
 8003ed2:	f000 810a 	beq.w	80040ea <shellThread+0x2aa>
        bracket = false;
 8003ed6:	2500      	movs	r5, #0
      escape = false;
 8003ed8:	462f      	mov	r7, r5
 8003eda:	e7e5      	b.n	8003ea8 <shellThread+0x68>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
#endif
    if ((c == 8) || (c == 127)) {
 8003edc:	2908      	cmp	r1, #8
 8003ede:	d01d      	beq.n	8003f1c <shellThread+0xdc>
 8003ee0:	297f      	cmp	r1, #127	; 0x7f
 8003ee2:	d01b      	beq.n	8003f1c <shellThread+0xdc>
        streamPut(chp, 0x08);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 8003ee4:	290d      	cmp	r1, #13
 8003ee6:	f000 8168 	beq.w	80041ba <shellThread+0x37a>
#endif
      *p = 0;
      return false;
    }
#if SHELL_USE_COMPLETION == TRUE
    if (c == '\t') {
 8003eea:	2909      	cmp	r1, #9
 8003eec:	d077      	beq.n	8003fde <shellThread+0x19e>
      }
      continue;
    }
#endif
#if SHELL_USE_HISTORY == TRUE
    if (c == 14) {
 8003eee:	290e      	cmp	r1, #14
 8003ef0:	f000 813f 	beq.w	8004172 <shellThread+0x332>
        chprintf(chp, "%s", line);
        p = line + len;
      }
      continue;
    }
    if (c == 16) {
 8003ef4:	2910      	cmp	r1, #16
 8003ef6:	f000 8157 	beq.w	80041a8 <shellThread+0x368>
        p = line + len;
      }
      continue;
    }
#endif
    if (c < 0x20)
 8003efa:	291f      	cmp	r1, #31
 8003efc:	d9d4      	bls.n	8003ea8 <shellThread+0x68>
      continue;
    if (p < line + size - 1) {
 8003efe:	f10d 0397 	add.w	r3, sp, #151	; 0x97
 8003f02:	4598      	cmp	r8, r3
 8003f04:	d2d0      	bcs.n	8003ea8 <shellThread+0x68>
      streamPut(chp, c);
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	4620      	mov	r0, r4
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4798      	blx	r3
      *p++ = (char)c;
 8003f0e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003f12:	f808 3b01 	strb.w	r3, [r8], #1
 8003f16:	e7c7      	b.n	8003ea8 <shellThread+0x68>
      escape = true;
 8003f18:	2701      	movs	r7, #1
 8003f1a:	e7c5      	b.n	8003ea8 <shellThread+0x68>
      if (p != line) {
 8003f1c:	45c8      	cmp	r8, r9
 8003f1e:	d0c3      	beq.n	8003ea8 <shellThread+0x68>
        streamPut(chp, 0x08);
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	2108      	movs	r1, #8
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	4620      	mov	r0, r4
 8003f28:	4798      	blx	r3
        streamPut(chp, 0x20);
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	2120      	movs	r1, #32
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4620      	mov	r0, r4
 8003f32:	4798      	blx	r3
        streamPut(chp, 0x08);
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	2108      	movs	r1, #8
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	4620      	mov	r0, r4
        p--;
 8003f3c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
        streamPut(chp, 0x08);
 8003f40:	4798      	blx	r3
 8003f42:	e7b1      	b.n	8003ea8 <shellThread+0x68>
        bracket = true;
 8003f44:	463d      	mov	r5, r7
 8003f46:	e7af      	b.n	8003ea8 <shellThread+0x68>
  chThdSleep(delay);
 8003f48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f4c:	f7fe fda8 	bl	8002aa0 <chThdSleep>
    lp = parse_arguments(line, &tokp);
 8003f50:	a909      	add	r1, sp, #36	; 0x24
 8003f52:	4648      	mov	r0, r9
 8003f54:	f7ff fb3c 	bl	80035d0 <parse_arguments>
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8003f58:	a909      	add	r1, sp, #36	; 0x24
    lp = parse_arguments(line, &tokp);
 8003f5a:	4605      	mov	r5, r0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	ac11      	add	r4, sp, #68	; 0x44
    n = 0;
 8003f60:	2600      	movs	r6, #0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8003f62:	f7ff fb35 	bl	80035d0 <parse_arguments>
 8003f66:	b150      	cbz	r0, 8003f7e <shellThread+0x13e>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8003f68:	2e04      	cmp	r6, #4
 8003f6a:	d031      	beq.n	8003fd0 <shellThread+0x190>
      args[n++] = lp;
 8003f6c:	f844 0b04 	str.w	r0, [r4], #4
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8003f70:	a909      	add	r1, sp, #36	; 0x24
 8003f72:	2000      	movs	r0, #0
      args[n++] = lp;
 8003f74:	3601      	adds	r6, #1
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8003f76:	f7ff fb2b 	bl	80035d0 <parse_arguments>
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	d1f4      	bne.n	8003f68 <shellThread+0x128>
    args[n] = NULL;
 8003f7e:	ab26      	add	r3, sp, #152	; 0x98
 8003f80:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8003f84:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8003f88:	b175      	cbz	r5, 8003fa8 <shellThread+0x168>
      if (strcmp(cmd, "help") == 0) {
 8003f8a:	4970      	ldr	r1, [pc, #448]	; (800414c <shellThread+0x30c>)
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	f7fc fa5b 	bl	8000448 <strcmp>
 8003f92:	2800      	cmp	r0, #0
 8003f94:	f040 81bd 	bne.w	8004312 <shellThread+0x4d2>
        if (n > 0) {
 8003f98:	2e00      	cmp	r6, #0
 8003f9a:	f000 8172 	beq.w	8004282 <shellThread+0x442>
          shellUsage(chp, "help");
 8003f9e:	4a6b      	ldr	r2, [pc, #428]	; (800414c <shellThread+0x30c>)
 8003fa0:	496b      	ldr	r1, [pc, #428]	; (8004150 <shellThread+0x310>)
 8003fa2:	9800      	ldr	r0, [sp, #0]
 8003fa4:	f7ff fb44 	bl	8003630 <chprintf>
 8003fa8:	4b63      	ldr	r3, [pc, #396]	; (8004138 <shellThread+0x2f8>)
 8003faa:	695b      	ldr	r3, [r3, #20]
  while (!chThdShouldTerminateX()) {
 8003fac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fb0:	075b      	lsls	r3, r3, #29
 8003fb2:	f57f af70 	bpl.w	8003e96 <shellThread+0x56>
 8003fb6:	2320      	movs	r3, #32
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4865      	ldr	r0, [pc, #404]	; (8004154 <shellThread+0x314>)
 8003fc0:	f7fd fcae 	bl	8001920 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	f7fe fb63 	bl	8002690 <chThdExitS>
}
 8003fca:	b027      	add	sp, #156	; 0x9c
 8003fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 8003fd0:	4961      	ldr	r1, [pc, #388]	; (8004158 <shellThread+0x318>)
 8003fd2:	9800      	ldr	r0, [sp, #0]
 8003fd4:	f7ff fb2c 	bl	8003630 <chprintf>
    args[n] = NULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	9315      	str	r3, [sp, #84]	; 0x54
    if (cmd != NULL) {
 8003fdc:	e7e4      	b.n	8003fa8 <shellThread+0x168>
      if (p < line + size - 1) {
 8003fde:	f10d 0697 	add.w	r6, sp, #151	; 0x97
 8003fe2:	45b0      	cmp	r8, r6
 8003fe4:	f4bf af60 	bcs.w	8003ea8 <shellThread+0x68>
  char help_cmp[] = "help";
 8003fe8:	4b58      	ldr	r3, [pc, #352]	; (800414c <shellThread+0x30c>)
        *p = 0;
 8003fea:	f888 7000 	strb.w	r7, [r8]
  char help_cmp[] = "help";
 8003fee:	e893 0003 	ldmia.w	r3, {r0, r1}
  if (strstr(help_cmp, line) == help_cmp) {
 8003ff2:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
  char help_cmp[] = "help";
 8003ff6:	900a      	str	r0, [sp, #40]	; 0x28
 8003ff8:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
  if (strstr(help_cmp, line) == help_cmp) {
 8003ffc:	4658      	mov	r0, fp
 8003ffe:	4649      	mov	r1, r9
 8004000:	f001 ff28 	bl	8005e54 <strstr>
        get_completions(scfg, line);
 8004004:	9b01      	ldr	r3, [sp, #4]
 8004006:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800400a:	685a      	ldr	r2, [r3, #4]
  if (strstr(help_cmp, line) == help_cmp) {
 800400c:	9203      	str	r2, [sp, #12]
 800400e:	4558      	cmp	r0, fp
    *scmp++ = help_cmp;
 8004010:	f10a 0304 	add.w	r3, sl, #4
 8004014:	bf08      	it	eq
 8004016:	469b      	moveq	fp, r3
 8004018:	9304      	str	r3, [sp, #16]
 800401a:	4b50      	ldr	r3, [pc, #320]	; (800415c <shellThread+0x31c>)
 800401c:	bf08      	it	eq
 800401e:	f8ca 0000 	streq.w	r0, [sl]
 8004022:	4649      	mov	r1, r9
 8004024:	4618      	mov	r0, r3
        get_completions(scfg, line);
 8004026:	bf18      	it	ne
 8004028:	46d3      	movne	fp, sl
  while (lcp->sc_name != NULL) {
 800402a:	f001 ff13 	bl	8005e54 <strstr>
    if (strstr(lcp->sc_name, line) == lcp->sc_name) {
 800402e:	4b4b      	ldr	r3, [pc, #300]	; (800415c <shellThread+0x31c>)
 8004030:	9a03      	ldr	r2, [sp, #12]
 8004032:	4298      	cmp	r0, r3
      *scmp++ = (char *)lcp->sc_name;
 8004034:	465b      	mov	r3, fp
 8004036:	bf08      	it	eq
 8004038:	f843 0b04 	streq.w	r0, [r3], #4
  if (scp != NULL) {
 800403c:	b1c2      	cbz	r2, 8004070 <shellThread+0x230>
    while (scp->sc_name != NULL) {
 800403e:	f8d2 b000 	ldr.w	fp, [r2]
 8004042:	f1bb 0f00 	cmp.w	fp, #0
 8004046:	d013      	beq.n	8004070 <shellThread+0x230>
 8004048:	9403      	str	r4, [sp, #12]
 800404a:	9505      	str	r5, [sp, #20]
 800404c:	465c      	mov	r4, fp
 800404e:	4615      	mov	r5, r2
 8004050:	469b      	mov	fp, r3
      if (strstr(scp->sc_name, line) == scp->sc_name) {
 8004052:	4620      	mov	r0, r4
 8004054:	4649      	mov	r1, r9
 8004056:	f001 fefd 	bl	8005e54 <strstr>
 800405a:	4284      	cmp	r4, r0
        *scmp++ = (char *)scp->sc_name;
 800405c:	bf08      	it	eq
 800405e:	f84b 4b04 	streq.w	r4, [fp], #4
    while (scp->sc_name != NULL) {
 8004062:	f855 4f08 	ldr.w	r4, [r5, #8]!
 8004066:	2c00      	cmp	r4, #0
 8004068:	d1f3      	bne.n	8004052 <shellThread+0x212>
 800406a:	9c03      	ldr	r4, [sp, #12]
 800406c:	9d05      	ldr	r5, [sp, #20]
 800406e:	465b      	mov	r3, fp
  *scmp = NULL;
 8004070:	9a02      	ldr	r2, [sp, #8]
 8004072:	601a      	str	r2, [r3, #0]
  if (*scmp != NULL) {
 8004074:	f8da b000 	ldr.w	fp, [sl]
 8004078:	f1bb 0f00 	cmp.w	fp, #0
 800407c:	f43f af14 	beq.w	8003ea8 <shellThread+0x68>
    if (*cmp == NULL) {
 8004080:	f8da 3004 	ldr.w	r3, [sl, #4]
        int len = process_completions(scfg, line, p - line, size);
 8004084:	eba8 0109 	sub.w	r1, r8, r9
 8004088:	9103      	str	r1, [sp, #12]
    if (*cmp == NULL) {
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 8170 	beq.w	8004370 <shellThread+0x530>
      while (*(*scmp + clen) != 0) {
 8004090:	f89b c000 	ldrb.w	ip, [fp]
 8004094:	f1bc 0f00 	cmp.w	ip, #0
 8004098:	f000 81b8 	beq.w	800440c <shellThread+0x5cc>
  int clen = 0;
 800409c:	9405      	str	r4, [sp, #20]
 800409e:	9507      	str	r5, [sp, #28]
 80040a0:	4664      	mov	r4, ip
 80040a2:	9d03      	ldr	r5, [sp, #12]
 80040a4:	f8dd c010 	ldr.w	ip, [sp, #16]
      while (*(*scmp + clen) != 0) {
 80040a8:	46c6      	mov	lr, r8
  int clen = 0;
 80040aa:	2100      	movs	r1, #0
        while ((*(*scmp + clen) == *(*cmp + clen)) &&
 80040ac:	5c5a      	ldrb	r2, [r3, r1]
 80040ae:	42a2      	cmp	r2, r4
 80040b0:	bf08      	it	eq
 80040b2:	4662      	moveq	r2, ip
 80040b4:	d105      	bne.n	80040c2 <shellThread+0x282>
               (*(*cmp + clen) != 0) && (*cmp != NULL)) {
 80040b6:	b13b      	cbz	r3, 80040c8 <shellThread+0x288>
        while ((*(*scmp + clen) == *(*cmp + clen)) &&
 80040b8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80040bc:	5c58      	ldrb	r0, [r3, r1]
 80040be:	42a0      	cmp	r0, r4
 80040c0:	d0f9      	beq.n	80040b6 <shellThread+0x276>
        if (*cmp == NULL) {
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f040 80f0 	bne.w	80042a8 <shellThread+0x468>
          if ((c < line + size - 1) && (clen >= length))
 80040c8:	45b6      	cmp	lr, r6
 80040ca:	d205      	bcs.n	80040d8 <shellThread+0x298>
 80040cc:	428d      	cmp	r5, r1
            *c++ = *(*scmp + clen);
 80040ce:	bfdc      	itt	le
 80040d0:	f80e 4b01 	strble.w	r4, [lr], #1
 80040d4:	f8da b000 	ldrle.w	fp, [sl]
          clen++;
 80040d8:	3101      	adds	r1, #1
      while (*(*scmp + clen) != 0) {
 80040da:	f81b 4001 	ldrb.w	r4, [fp, r1]
 80040de:	2c00      	cmp	r4, #0
 80040e0:	f000 8132 	beq.w	8004348 <shellThread+0x508>
 80040e4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80040e8:	e7e0      	b.n	80040ac <shellThread+0x26c>
          int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 80040ea:	2201      	movs	r2, #1
 80040ec:	4649      	mov	r1, r9
 80040ee:	a80c      	add	r0, sp, #48	; 0x30
 80040f0:	f7ff f8ae 	bl	8003250 <get_history>
          if (len == 0)
 80040f4:	1e06      	subs	r6, r0, #0
 80040f6:	d139      	bne.n	800416c <shellThread+0x32c>
            *line = 0;
 80040f8:	f88d 6058 	strb.w	r6, [sp, #88]	; 0x58
            _shell_reset_cur(chp);
 80040fc:	2304      	movs	r3, #4
 80040fe:	2246      	movs	r2, #70	; 0x46
 8004100:	4917      	ldr	r1, [pc, #92]	; (8004160 <shellThread+0x320>)
 8004102:	4620      	mov	r0, r4
 8004104:	f7ff fa94 	bl	8003630 <chprintf>
            _shell_clr_line(chp);
 8004108:	4916      	ldr	r1, [pc, #88]	; (8004164 <shellThread+0x324>)
 800410a:	4620      	mov	r0, r4
 800410c:	f7ff fa90 	bl	8003630 <chprintf>
        bracket = false;
 8004110:	2500      	movs	r5, #0
            chprintf(chp, "%s", line);
 8004112:	4915      	ldr	r1, [pc, #84]	; (8004168 <shellThread+0x328>)
 8004114:	464a      	mov	r2, r9
 8004116:	4620      	mov	r0, r4
 8004118:	f7ff fa8a 	bl	8003630 <chprintf>
            p = line + len;
 800411c:	eb09 0806 	add.w	r8, r9, r6
      escape = false;
 8004120:	462f      	mov	r7, r5
 8004122:	e6c1      	b.n	8003ea8 <shellThread+0x68>
          int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 8004124:	2200      	movs	r2, #0
 8004126:	4649      	mov	r1, r9
 8004128:	a80c      	add	r0, sp, #48	; 0x30
 800412a:	f7ff f891 	bl	8003250 <get_history>
          if (len > 0) {
 800412e:	1e06      	subs	r6, r0, #0
 8004130:	f77f aed1 	ble.w	8003ed6 <shellThread+0x96>
 8004134:	e7e2      	b.n	80040fc <shellThread+0x2bc>
 8004136:	bf00      	nop
 8004138:	2000189c 	.word	0x2000189c
 800413c:	080061e8 	.word	0x080061e8
 8004140:	0800618c 	.word	0x0800618c
 8004144:	080061f0 	.word	0x080061f0
 8004148:	08006204 	.word	0x08006204
 800414c:	08006244 	.word	0x08006244
 8004150:	080061d4 	.word	0x080061d4
 8004154:	20001cb8 	.word	0x20001cb8
 8004158:	0800622c 	.word	0x0800622c
 800415c:	08006220 	.word	0x08006220
 8004160:	0800620c 	.word	0x0800620c
 8004164:	08006218 	.word	0x08006218
 8004168:	0800621c 	.word	0x0800621c
          if (len >= 0) {
 800416c:	f6ff aeb3 	blt.w	8003ed6 <shellThread+0x96>
 8004170:	e7c4      	b.n	80040fc <shellThread+0x2bc>
      int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 8004172:	2201      	movs	r2, #1
 8004174:	4649      	mov	r1, r9
 8004176:	a80c      	add	r0, sp, #48	; 0x30
 8004178:	f7ff f86a 	bl	8003250 <get_history>
      if (len == 0)
 800417c:	1e06      	subs	r6, r0, #0
 800417e:	d178      	bne.n	8004272 <shellThread+0x432>
        *line = 0;
 8004180:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
        _shell_reset_cur(chp);
 8004184:	2304      	movs	r3, #4
 8004186:	2246      	movs	r2, #70	; 0x46
 8004188:	49a3      	ldr	r1, [pc, #652]	; (8004418 <shellThread+0x5d8>)
 800418a:	4620      	mov	r0, r4
 800418c:	f7ff fa50 	bl	8003630 <chprintf>
        _shell_clr_line(chp);
 8004190:	49a2      	ldr	r1, [pc, #648]	; (800441c <shellThread+0x5dc>)
 8004192:	4620      	mov	r0, r4
 8004194:	f7ff fa4c 	bl	8003630 <chprintf>
        chprintf(chp, "%s", line);
 8004198:	49a1      	ldr	r1, [pc, #644]	; (8004420 <shellThread+0x5e0>)
 800419a:	464a      	mov	r2, r9
 800419c:	4620      	mov	r0, r4
        p = line + len;
 800419e:	eb09 0806 	add.w	r8, r9, r6
        chprintf(chp, "%s", line);
 80041a2:	f7ff fa45 	bl	8003630 <chprintf>
 80041a6:	e67f      	b.n	8003ea8 <shellThread+0x68>
      int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 80041a8:	463a      	mov	r2, r7
 80041aa:	4649      	mov	r1, r9
 80041ac:	a80c      	add	r0, sp, #48	; 0x30
 80041ae:	f7ff f84f 	bl	8003250 <get_history>
      if (len > 0) {
 80041b2:	1e06      	subs	r6, r0, #0
 80041b4:	f77f ae78 	ble.w	8003ea8 <shellThread+0x68>
 80041b8:	e7e4      	b.n	8004184 <shellThread+0x344>
      chprintf(chp, SHELL_NEWLINE_STR);
 80041ba:	4620      	mov	r0, r4
 80041bc:	4999      	ldr	r1, [pc, #612]	; (8004424 <shellThread+0x5e4>)
 80041be:	f7ff fa37 	bl	8003630 <chprintf>
  if (length > shp->sh_size - 2)
 80041c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
      save_history(shp, line, p - line);
 80041c4:	eba8 0409 	sub.w	r4, r8, r9
  if (length > shp->sh_size - 2)
 80041c8:	1e6b      	subs	r3, r5, #1
 80041ca:	429c      	cmp	r4, r3
 80041cc:	da4d      	bge.n	800426a <shellThread+0x42a>
  while ((*(line + length -1) == ' ') && (length > 0))
 80041ce:	1e63      	subs	r3, r4, #1
 80041d0:	eb09 0203 	add.w	r2, r9, r3
 80041d4:	f819 1003 	ldrb.w	r1, [r9, r3]
 80041d8:	2920      	cmp	r1, #32
 80041da:	d10a      	bne.n	80041f2 <shellThread+0x3b2>
 80041dc:	2c00      	cmp	r4, #0
 80041de:	dc03      	bgt.n	80041e8 <shellThread+0x3a8>
 80041e0:	e043      	b.n	800426a <shellThread+0x42a>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d041      	beq.n	800426a <shellThread+0x42a>
 80041e6:	3b01      	subs	r3, #1
 80041e8:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 80041ec:	2920      	cmp	r1, #32
    length--;
 80041ee:	461c      	mov	r4, r3
  while ((*(line + length -1) == ' ') && (length > 0))
 80041f0:	d0f7      	beq.n	80041e2 <shellThread+0x3a2>
  if (length <= 0)
 80041f2:	2c00      	cmp	r4, #0
 80041f4:	dd39      	ble.n	800426a <shellThread+0x42a>
  if (shp->sh_end >= shp->sh_beg) {
 80041f6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 80041f8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80041fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 80041fc:	1af2      	subs	r2, r6, r3
    if (length < (shp->sh_beg - shp->sh_end - 1))
 80041fe:	1b99      	subs	r1, r3, r6
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8004200:	3201      	adds	r2, #1
  if (shp->sh_end >= shp->sh_beg) {
 8004202:	429e      	cmp	r6, r3
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8004204:	eba5 0202 	sub.w	r2, r5, r2
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8004208:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
  if (shp->sh_end >= shp->sh_beg) {
 800420c:	db09      	blt.n	8004222 <shellThread+0x3e2>
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 800420e:	42a2      	cmp	r2, r4
 8004210:	dc09      	bgt.n	8004226 <shellThread+0x3e6>
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 8004212:	5cc2      	ldrb	r2, [r0, r3]
 8004214:	4413      	add	r3, r2
 8004216:	3301      	adds	r3, #1
  if (pos >= shp->sh_size)
 8004218:	429d      	cmp	r5, r3
    pos -= shp->sh_size;
 800421a:	bfd8      	it	le
 800421c:	1b5b      	suble	r3, r3, r5
  shp->sh_beg = pos;
 800421e:	930e      	str	r3, [sp, #56]	; 0x38
 8004220:	e7ec      	b.n	80041fc <shellThread+0x3bc>
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8004222:	42a1      	cmp	r1, r4
 8004224:	ddf5      	ble.n	8004212 <shellThread+0x3d2>
  if (length < shp->sh_size - shp->sh_end - 1)
 8004226:	1bad      	subs	r5, r5, r6
 8004228:	3d01      	subs	r5, #1
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 800422a:	3601      	adds	r6, #1
  if (length < shp->sh_size - shp->sh_end - 1)
 800422c:	42a5      	cmp	r5, r4
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 800422e:	4430      	add	r0, r6
  if (length < shp->sh_size - shp->sh_end - 1)
 8004230:	dc22      	bgt.n	8004278 <shellThread+0x438>
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, part_len);
 8004232:	462a      	mov	r2, r5
 8004234:	4649      	mov	r1, r9
 8004236:	f7fc f869 	bl	800030c <memcpy>
    memcpy(shp->sh_buffer, line + part_len, length - part_len);
 800423a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800423c:	1b62      	subs	r2, r4, r5
 800423e:	eb09 0105 	add.w	r1, r9, r5
 8004242:	f7fc f863 	bl	800030c <memcpy>
  *(shp->sh_buffer + shp->sh_end) = (char)length;
 8004246:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004248:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800424a:	54d4      	strb	r4, [r2, r3]
  shp->sh_end += length + 1;
 800424c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  if (shp->sh_end >= shp->sh_size)
 800424e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  shp->sh_end += length + 1;
 8004250:	3401      	adds	r4, #1
 8004252:	4414      	add	r4, r2
  if (shp->sh_end >= shp->sh_size)
 8004254:	429c      	cmp	r4, r3
  shp->sh_end += length + 1;
 8004256:	940f      	str	r4, [sp, #60]	; 0x3c
    shp->sh_end -= shp->sh_size;
 8004258:	bfa8      	it	ge
 800425a:	1ae4      	subge	r4, r4, r3
  *(shp->sh_buffer + shp->sh_end) = 0;
 800425c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800425e:	9a02      	ldr	r2, [sp, #8]
    shp->sh_end -= shp->sh_size;
 8004260:	bfa8      	it	ge
 8004262:	940f      	strge	r4, [sp, #60]	; 0x3c
  *(shp->sh_buffer + shp->sh_end) = 0;
 8004264:	551a      	strb	r2, [r3, r4]
  shp->sh_cur = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	9310      	str	r3, [sp, #64]	; 0x40
      *p = 0;
 800426a:	9b02      	ldr	r3, [sp, #8]
 800426c:	f888 3000 	strb.w	r3, [r8]
 8004270:	e66e      	b.n	8003f50 <shellThread+0x110>
      if (len >= 0) {
 8004272:	f6ff ae19 	blt.w	8003ea8 <shellThread+0x68>
 8004276:	e785      	b.n	8004184 <shellThread+0x344>
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 8004278:	4622      	mov	r2, r4
 800427a:	4649      	mov	r1, r9
 800427c:	f7fc f846 	bl	800030c <memcpy>
 8004280:	e7e1      	b.n	8004246 <shellThread+0x406>
        chprintf(chp, "Commands: help ");
 8004282:	9c00      	ldr	r4, [sp, #0]
 8004284:	4968      	ldr	r1, [pc, #416]	; (8004428 <shellThread+0x5e8>)
 8004286:	4620      	mov	r0, r4
 8004288:	f7ff f9d2 	bl	8003630 <chprintf>
    chprintf(chp, "%s ", scp->sc_name);
 800428c:	4a67      	ldr	r2, [pc, #412]	; (800442c <shellThread+0x5ec>)
 800428e:	4968      	ldr	r1, [pc, #416]	; (8004430 <shellThread+0x5f0>)
 8004290:	4620      	mov	r0, r4
 8004292:	f7ff f9cd 	bl	8003630 <chprintf>
        if (scp != NULL)
 8004296:	9b06      	ldr	r3, [sp, #24]
 8004298:	2b00      	cmp	r3, #0
 800429a:	f040 8098 	bne.w	80043ce <shellThread+0x58e>
        chprintf(chp, SHELL_NEWLINE_STR);
 800429e:	4961      	ldr	r1, [pc, #388]	; (8004424 <shellThread+0x5e4>)
 80042a0:	9800      	ldr	r0, [sp, #0]
 80042a2:	f7ff f9c5 	bl	8003630 <chprintf>
 80042a6:	e67f      	b.n	8003fa8 <shellThread+0x168>
 80042a8:	9c05      	ldr	r4, [sp, #20]
 80042aa:	9d07      	ldr	r5, [sp, #28]
 80042ac:	eb09 0b01 	add.w	fp, r9, r1
    *(line + clen) = 0;
 80042b0:	9b02      	ldr	r3, [sp, #8]
 80042b2:	f88b 3000 	strb.w	r3, [fp]
        if (len > 0) {
 80042b6:	2900      	cmp	r1, #0
 80042b8:	f43f adf6 	beq.w	8003ea8 <shellThread+0x68>
          write_completions(scfg, line, p - line);
 80042bc:	9a01      	ldr	r2, [sp, #4]
  if (*(scmp + 1) != NULL) {
 80042be:	f8da 3004 	ldr.w	r3, [sl, #4]
          write_completions(scfg, line, p - line);
 80042c2:	6816      	ldr	r6, [r2, #0]
  if (*(scmp + 1) != NULL) {
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d04c      	beq.n	8004362 <shellThread+0x522>
    chprintf(chp, SHELL_NEWLINE_STR);
 80042c8:	4956      	ldr	r1, [pc, #344]	; (8004424 <shellThread+0x5e4>)
 80042ca:	4630      	mov	r0, r6
 80042cc:	f7ff f9b0 	bl	8003630 <chprintf>
    while (*scmp != NULL)
 80042d0:	f8da 2000 	ldr.w	r2, [sl]
 80042d4:	b172      	cbz	r2, 80042f4 <shellThread+0x4b4>
      chprintf(chp, " %s", *scmp++);
 80042d6:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800443c <shellThread+0x5fc>
 80042da:	f8dd a010 	ldr.w	sl, [sp, #16]
 80042de:	e001      	b.n	80042e4 <shellThread+0x4a4>
 80042e0:	f10a 0a04 	add.w	sl, sl, #4
 80042e4:	4641      	mov	r1, r8
 80042e6:	4630      	mov	r0, r6
 80042e8:	f7ff f9a2 	bl	8003630 <chprintf>
    while (*scmp != NULL)
 80042ec:	f8da 2000 	ldr.w	r2, [sl]
 80042f0:	2a00      	cmp	r2, #0
 80042f2:	d1f5      	bne.n	80042e0 <shellThread+0x4a0>
    chprintf(chp, SHELL_NEWLINE_STR);
 80042f4:	494b      	ldr	r1, [pc, #300]	; (8004424 <shellThread+0x5e4>)
 80042f6:	4630      	mov	r0, r6
 80042f8:	f7ff f99a 	bl	8003630 <chprintf>
    chprintf(chp, SHELL_PROMPT_STR);
 80042fc:	494d      	ldr	r1, [pc, #308]	; (8004434 <shellThread+0x5f4>)
 80042fe:	4630      	mov	r0, r6
 8004300:	f7ff f996 	bl	8003630 <chprintf>
    chprintf(chp, "%s", line);
 8004304:	4946      	ldr	r1, [pc, #280]	; (8004420 <shellThread+0x5e0>)
 8004306:	464a      	mov	r2, r9
 8004308:	4630      	mov	r0, r6
 800430a:	f7ff f991 	bl	8003630 <chprintf>
          p = line + len;
 800430e:	46d8      	mov	r8, fp
 8004310:	e5ca      	b.n	8003ea8 <shellThread+0x68>
 8004312:	4846      	ldr	r0, [pc, #280]	; (800442c <shellThread+0x5ec>)
 8004314:	4629      	mov	r1, r5
 8004316:	f7fc f897 	bl	8000448 <strcmp>
    if (strcmp(scp->sc_name, name) == 0) {
 800431a:	2800      	cmp	r0, #0
 800431c:	d051      	beq.n	80043c2 <shellThread+0x582>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 800431e:	9c06      	ldr	r4, [sp, #24]
 8004320:	2c00      	cmp	r4, #0
 8004322:	d068      	beq.n	80043f6 <shellThread+0x5b6>
  while (scp->sc_name != NULL) {
 8004324:	6820      	ldr	r0, [r4, #0]
 8004326:	b920      	cbnz	r0, 8004332 <shellThread+0x4f2>
 8004328:	e065      	b.n	80043f6 <shellThread+0x5b6>
 800432a:	f854 0f08 	ldr.w	r0, [r4, #8]!
 800432e:	2800      	cmp	r0, #0
 8004330:	d061      	beq.n	80043f6 <shellThread+0x5b6>
    if (strcmp(scp->sc_name, name) == 0) {
 8004332:	4629      	mov	r1, r5
 8004334:	f7fc f888 	bl	8000448 <strcmp>
 8004338:	2800      	cmp	r0, #0
 800433a:	d1f6      	bne.n	800432a <shellThread+0x4ea>
      scp->sc_function(chp, argc, argv);
 800433c:	6863      	ldr	r3, [r4, #4]
 800433e:	9800      	ldr	r0, [sp, #0]
 8004340:	4631      	mov	r1, r6
 8004342:	aa11      	add	r2, sp, #68	; 0x44
 8004344:	4798      	blx	r3
      return false;
 8004346:	e62f      	b.n	8003fa8 <shellThread+0x168>
 8004348:	46a4      	mov	ip, r4
    *(line + clen) = 0;
 800434a:	f809 c001 	strb.w	ip, [r9, r1]
          write_completions(scfg, line, p - line);
 800434e:	9a01      	ldr	r2, [sp, #4]
  if (*(scmp + 1) != NULL) {
 8004350:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004354:	9d07      	ldr	r5, [sp, #28]
 8004356:	9c05      	ldr	r4, [sp, #20]
          write_completions(scfg, line, p - line);
 8004358:	6816      	ldr	r6, [r2, #0]
    *(line + clen) = 0;
 800435a:	eb09 0b01 	add.w	fp, r9, r1
  if (*(scmp + 1) != NULL) {
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1b2      	bne.n	80042c8 <shellThread+0x488>
    chprintf(chp, "%s", line + pos);
 8004362:	4642      	mov	r2, r8
 8004364:	492e      	ldr	r1, [pc, #184]	; (8004420 <shellThread+0x5e0>)
 8004366:	4630      	mov	r0, r6
 8004368:	f7ff f962 	bl	8003630 <chprintf>
          p = line + len;
 800436c:	46d8      	mov	r8, fp
 800436e:	e59b      	b.n	8003ea8 <shellThread+0x68>
      clen = strlen(*scmp);
 8004370:	4658      	mov	r0, fp
 8004372:	f8cd b014 	str.w	fp, [sp, #20]
 8004376:	f7fc f9e3 	bl	8000740 <strlen>
      while ((c < line + clen) && (c < line + size - 1))
 800437a:	eb09 0b00 	add.w	fp, r9, r0
 800437e:	45d8      	cmp	r8, fp
      clen = strlen(*scmp);
 8004380:	4686      	mov	lr, r0
 8004382:	4601      	mov	r1, r0
      while ((c < line + clen) && (c < line + size - 1))
 8004384:	d245      	bcs.n	8004412 <shellThread+0x5d2>
 8004386:	9b03      	ldr	r3, [sp, #12]
 8004388:	9a05      	ldr	r2, [sp, #20]
 800438a:	eba3 0c08 	sub.w	ip, r3, r8
 800438e:	4643      	mov	r3, r8
 8004390:	e003      	b.n	800439a <shellThread+0x55a>
 8004392:	42b3      	cmp	r3, r6
 8004394:	d08c      	beq.n	80042b0 <shellThread+0x470>
 8004396:	f8da 2000 	ldr.w	r2, [sl]
        *c++ = *(*scmp + i++);
 800439a:	eb03 000c 	add.w	r0, r3, ip
 800439e:	5c12      	ldrb	r2, [r2, r0]
 80043a0:	f803 2b01 	strb.w	r2, [r3], #1
      while ((c < line + clen) && (c < line + size - 1))
 80043a4:	455b      	cmp	r3, fp
 80043a6:	d1f4      	bne.n	8004392 <shellThread+0x552>
      if (c < line + size -1) {
 80043a8:	45b3      	cmp	fp, r6
 80043aa:	d281      	bcs.n	80042b0 <shellThread+0x470>
        clen++;
 80043ac:	f10e 0e01 	add.w	lr, lr, #1
        *c = ' ';
 80043b0:	2320      	movs	r3, #32
 80043b2:	f88b 3000 	strb.w	r3, [fp]
    *(line + clen) = 0;
 80043b6:	9b02      	ldr	r3, [sp, #8]
 80043b8:	f809 300e 	strb.w	r3, [r9, lr]
 80043bc:	eb09 0b0e 	add.w	fp, r9, lr
 80043c0:	e77c      	b.n	80042bc <shellThread+0x47c>
      scp->sc_function(chp, argc, argv);
 80043c2:	9800      	ldr	r0, [sp, #0]
 80043c4:	4631      	mov	r1, r6
 80043c6:	aa11      	add	r2, sp, #68	; 0x44
 80043c8:	f7ff fd2a 	bl	8003e20 <cmd_echo>
      return false;
 80043cc:	e5ec      	b.n	8003fa8 <shellThread+0x168>
  while (scp->sc_name != NULL) {
 80043ce:	9c06      	ldr	r4, [sp, #24]
 80043d0:	6822      	ldr	r2, [r4, #0]
 80043d2:	2a00      	cmp	r2, #0
 80043d4:	f43f af63 	beq.w	800429e <shellThread+0x45e>
    chprintf(chp, "%s ", scp->sc_name);
 80043d8:	4d15      	ldr	r5, [pc, #84]	; (8004430 <shellThread+0x5f0>)
 80043da:	9e00      	ldr	r6, [sp, #0]
 80043dc:	4629      	mov	r1, r5
 80043de:	4630      	mov	r0, r6
 80043e0:	f7ff f926 	bl	8003630 <chprintf>
  while (scp->sc_name != NULL) {
 80043e4:	f854 2f08 	ldr.w	r2, [r4, #8]!
 80043e8:	2a00      	cmp	r2, #0
 80043ea:	d1f7      	bne.n	80043dc <shellThread+0x59c>
        chprintf(chp, SHELL_NEWLINE_STR);
 80043ec:	490d      	ldr	r1, [pc, #52]	; (8004424 <shellThread+0x5e4>)
 80043ee:	9800      	ldr	r0, [sp, #0]
 80043f0:	f7ff f91e 	bl	8003630 <chprintf>
 80043f4:	e5d8      	b.n	8003fa8 <shellThread+0x168>
        chprintf(chp, "%s", cmd);
 80043f6:	9c00      	ldr	r4, [sp, #0]
 80043f8:	4909      	ldr	r1, [pc, #36]	; (8004420 <shellThread+0x5e0>)
 80043fa:	462a      	mov	r2, r5
 80043fc:	4620      	mov	r0, r4
 80043fe:	f7ff f917 	bl	8003630 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 8004402:	490d      	ldr	r1, [pc, #52]	; (8004438 <shellThread+0x5f8>)
 8004404:	4620      	mov	r0, r4
 8004406:	f7ff f913 	bl	8003630 <chprintf>
 800440a:	e5cd      	b.n	8003fa8 <shellThread+0x168>
    *(line + clen) = 0;
 800440c:	f88d c058 	strb.w	ip, [sp, #88]	; 0x58
 8004410:	e54a      	b.n	8003ea8 <shellThread+0x68>
      while ((c < line + clen) && (c < line + size - 1))
 8004412:	46c3      	mov	fp, r8
 8004414:	e7ca      	b.n	80043ac <shellThread+0x56c>
 8004416:	bf00      	nop
 8004418:	0800620c 	.word	0x0800620c
 800441c:	08006218 	.word	0x08006218
 8004420:	0800621c 	.word	0x0800621c
 8004424:	0800618c 	.word	0x0800618c
 8004428:	0800624c 	.word	0x0800624c
 800442c:	08006220 	.word	0x08006220
 8004430:	0800625c 	.word	0x0800625c
 8004434:	08006204 	.word	0x08006204
 8004438:	08006260 	.word	0x08006260
 800443c:	08006228 	.word	0x08006228

08004440 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004440:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8004444:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004446:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800444a:	2300      	movs	r3, #0
 800444c:	f383 8811 	msr	BASEPRI, r3
}
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
	...

08004460 <chThdExit>:
 8004460:	2320      	movs	r3, #32
 8004462:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 8004466:	f7fe b913 	b.w	8002690 <chThdExitS>
 800446a:	bf00      	nop
 800446c:	0000      	movs	r0, r0
	...

08004470 <chSchDoReschedule>:
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;
 8004470:	4a0d      	ldr	r2, [pc, #52]	; (80044a8 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->next;
 8004472:	6810      	ldr	r0, [r2, #0]
 8004474:	6951      	ldr	r1, [r2, #20]
  tqp->next             = tp->queue.next;
 8004476:	6803      	ldr	r3, [r0, #0]
void chSchDoRescheduleAhead(void) {
 8004478:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 800447a:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 800447c:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 800447e:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 8004480:	f880 4020 	strb.w	r4, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8004484:	688c      	ldr	r4, [r1, #8]
  tqp->next             = tp->queue.next;
 8004486:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8004488:	6150      	str	r0, [r2, #20]
  tp->state = CH_STATE_READY;
 800448a:	f881 5020 	strb.w	r5, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 800448e:	e000      	b.n	8004492 <chSchDoReschedule+0x22>
 8004490:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	4294      	cmp	r4, r2
 8004496:	d3fb      	bcc.n	8004490 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8004498:	685a      	ldr	r2, [r3, #4]
  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 800449a:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 800449c:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 80044a0:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 80044a2:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 80044a4:	f7fb bf1c 	b.w	80002e0 <_port_switch>
 80044a8:	2000189c 	.word	0x2000189c
 80044ac:	00000000 	.word	0x00000000

080044b0 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 80044b0:	4b04      	ldr	r3, [pc, #16]	; (80044c4 <chSchRescheduleS+0x14>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
  if (chSchIsRescRequiredI()) {
 80044b6:	6892      	ldr	r2, [r2, #8]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d800      	bhi.n	80044c0 <chSchRescheduleS+0x10>
}
 80044be:	4770      	bx	lr
    chSchDoRescheduleAhead();
 80044c0:	f7ff bfd6 	b.w	8004470 <chSchDoReschedule>
 80044c4:	2000189c 	.word	0x2000189c
	...

080044d0 <cmd_son>:
void cmd_son(BaseSequentialStream *chp, int argc, char *argv[]) {
  (void)* argv;
  (void)argc;
  uint8_t stat;
  stat = serstat;
  if(argc <1){
 80044d0:	2900      	cmp	r1, #0
void cmd_son(BaseSequentialStream *chp, int argc, char *argv[]) {
 80044d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d4:	4604      	mov	r4, r0
  if(argc <1){
 80044d6:	f340 80b9 	ble.w	800464c <cmd_son+0x17c>
    else
      chprintf(chp, "Listeners are now off. %d \r\n", stat);
    chprintf(chp, "Usage: son [0|1]\r\n");
    return;
  }
  stat = (uint8_t)strtol(argv[0], NULL, 0);
 80044da:	4613      	mov	r3, r2
 80044dc:	2200      	movs	r2, #0
 80044de:	4611      	mov	r1, r2
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	f001 fa65 	bl	80059b0 <strtol>
 80044e6:	b2c2      	uxtb	r2, r0
  if (stat > 1){
 80044e8:	2a01      	cmp	r2, #1
 80044ea:	f200 8105 	bhi.w	80046f8 <cmd_son+0x228>
 80044ee:	2320      	movs	r3, #32
    chprintf(chp, "Only 0 or 1 allowed. (%d) \r\n", stat);
    return;
  }
  if (stat){
 80044f0:	2a00      	cmp	r2, #0
 80044f2:	d044      	beq.n	800457e <cmd_son+0xae>
 80044f4:	f383 8811 	msr	BASEPRI, r3
  if (icup->state == ICU_READY) {
 80044f8:	4b82      	ldr	r3, [pc, #520]	; (8004704 <cmd_son+0x234>)
 80044fa:	781a      	ldrb	r2, [r3, #0]
 80044fc:	2a02      	cmp	r2, #2
 80044fe:	f000 80cb 	beq.w	8004698 <cmd_son+0x1c8>

  osalDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
                "invalid state");

  icu_lld_stop(icup);
  icup->config = NULL;
 8004502:	2200      	movs	r2, #0
  icup->state  = ICU_STOP;
 8004504:	2501      	movs	r5, #1
  icup->config = NULL;
 8004506:	605a      	str	r2, [r3, #4]
  icup->state  = ICU_STOP;
 8004508:	701d      	strb	r5, [r3, #0]
 800450a:	f382 8811 	msr	BASEPRI, r2
 800450e:	2620      	movs	r6, #32
 8004510:	f386 8811 	msr	BASEPRI, r6
  icup->tim->CR1   = 0;
 8004514:	68d9      	ldr	r1, [r3, #12]
 8004516:	600a      	str	r2, [r1, #0]
  icup->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8004518:	68c8      	ldr	r0, [r1, #12]

  osalSysLock();
  osalDbgAssert((icup->state == ICU_READY) || (icup->state == ICU_WAITING) ||
                (icup->state == ICU_ACTIVE),
                "invalid state");
  icuStopCaptureI(icup);
 800451a:	2702      	movs	r7, #2
 800451c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004520:	701f      	strb	r7, [r3, #0]
 8004522:	60c8      	str	r0, [r1, #12]
 8004524:	f382 8811 	msr	BASEPRI, r2
    icuStop(&ICUD2);
    icuStopCapture(&ICUD2);
    palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));  // TX2
 8004528:	4877      	ldr	r0, [pc, #476]	; (8004708 <cmd_son+0x238>)
 800452a:	f240 3282 	movw	r2, #898	; 0x382
 800452e:	2104      	movs	r1, #4
 8004530:	f7fd fc76 	bl	8001e20 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));  // RX2
 8004534:	4874      	ldr	r0, [pc, #464]	; (8004708 <cmd_son+0x238>)
 8004536:	f240 3282 	movw	r2, #898	; 0x382
 800453a:	2108      	movs	r1, #8
 800453c:	f7fd fc70 	bl	8001e20 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(7));  // TX1
 8004540:	4871      	ldr	r0, [pc, #452]	; (8004708 <cmd_son+0x238>)
 8004542:	f240 3282 	movw	r2, #898	; 0x382
 8004546:	f44f 7100 	mov.w	r1, #512	; 0x200
 800454a:	f7fd fc69 	bl	8001e20 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(7)); // RX1
 800454e:	486e      	ldr	r0, [pc, #440]	; (8004708 <cmd_son+0x238>)
 8004550:	f240 3282 	movw	r2, #898	; 0x382
 8004554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004558:	f7fd fc62 	bl	8001e20 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 0, PAL_MODE_INPUT_PULLUP);  // Button
 800455c:	4629      	mov	r1, r5
 800455e:	4632      	mov	r2, r6
 8004560:	4869      	ldr	r0, [pc, #420]	; (8004708 <cmd_son+0x238>)
 8004562:	f7fd fc5d 	bl	8001e20 <_pal_lld_setgroupmode>

    sdStart(&SD1, &serial_config);
 8004566:	4869      	ldr	r0, [pc, #420]	; (800470c <cmd_son+0x23c>)
 8004568:	f7fc ff12 	bl	8001390 <sdStart.constprop.0>
    sdStart(&SD2, &serial_config);    
 800456c:	4868      	ldr	r0, [pc, #416]	; (8004710 <cmd_son+0x240>)
 800456e:	f7fc ff0f 	bl	8001390 <sdStart.constprop.0>
    chprintf(chp, "UARTs started.\r\n");
 8004572:	4620      	mov	r0, r4
 8004574:	4967      	ldr	r1, [pc, #412]	; (8004714 <cmd_son+0x244>)
    icuStart(&ICUD2, &icucfg1);
    icuStartCapture(&ICUD2);
    icuEnableNotifications(&ICUD2);
    chprintf(chp, "UARTs stopped.\r\n");
  }
}
 8004576:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    chprintf(chp, "UARTs started.\r\n");
 800457a:	f7ff b859 	b.w	8003630 <chprintf>
 800457e:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void sd_lld_stop(SerialDriver *sdp) {

  if (sdp->state == SD_READY) {
 8004582:	4d62      	ldr	r5, [pc, #392]	; (800470c <cmd_son+0x23c>)
 8004584:	7a29      	ldrb	r1, [r5, #8]
 8004586:	2902      	cmp	r1, #2
 8004588:	f000 809f 	beq.w	80046ca <cmd_son+0x1fa>
  oqp->q_counter = qSizeX(oqp);
 800458c:	e9d5 230f 	ldrd	r2, r3, [r5, #60]	; 0x3c
 8004590:	1a9b      	subs	r3, r3, r2
  sdp->state = SD_STOP;
 8004592:	2101      	movs	r1, #1
  oqp->q_rdptr = oqp->q_buffer;
 8004594:	64aa      	str	r2, [r5, #72]	; 0x48
  oqp->q_wrptr = oqp->q_buffer;
 8004596:	646a      	str	r2, [r5, #68]	; 0x44
  oqp->q_counter = qSizeX(oqp);
 8004598:	63ab      	str	r3, [r5, #56]	; 0x38
  chThdDequeueAllI(tqp, msg);
 800459a:	485f      	ldr	r0, [pc, #380]	; (8004718 <cmd_son+0x248>)
 800459c:	7229      	strb	r1, [r5, #8]
 800459e:	f7fd f997 	bl	80018d0 <chThdDequeueAllI.constprop.0>
  iqp->q_rdptr = iqp->q_buffer;
 80045a2:	69ab      	ldr	r3, [r5, #24]
 80045a4:	485d      	ldr	r0, [pc, #372]	; (800471c <cmd_son+0x24c>)
  iqp->q_counter = 0;
 80045a6:	2600      	movs	r6, #0
  iqp->q_wrptr = iqp->q_buffer;
 80045a8:	e9c5 3308 	strd	r3, r3, [r5, #32]
  iqp->q_counter = 0;
 80045ac:	616e      	str	r6, [r5, #20]
 80045ae:	f7fd f98f 	bl	80018d0 <chThdDequeueAllI.constprop.0>
  chSchRescheduleS();
 80045b2:	f7ff ff7d 	bl	80044b0 <chSchRescheduleS>
 80045b6:	f386 8811 	msr	BASEPRI, r6
 80045ba:	2320      	movs	r3, #32
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	4d53      	ldr	r5, [pc, #332]	; (8004710 <cmd_son+0x240>)
 80045c2:	7a2b      	ldrb	r3, [r5, #8]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d04f      	beq.n	8004668 <cmd_son+0x198>
  oqp->q_counter = qSizeX(oqp);
 80045c8:	e9d5 230f 	ldrd	r2, r3, [r5, #60]	; 0x3c
 80045cc:	1a9b      	subs	r3, r3, r2
  oqp->q_rdptr = oqp->q_buffer;
 80045ce:	64aa      	str	r2, [r5, #72]	; 0x48
  oqp->q_wrptr = oqp->q_buffer;
 80045d0:	646a      	str	r2, [r5, #68]	; 0x44
  oqp->q_counter = qSizeX(oqp);
 80045d2:	63ab      	str	r3, [r5, #56]	; 0x38
  chThdDequeueAllI(tqp, msg);
 80045d4:	4852      	ldr	r0, [pc, #328]	; (8004720 <cmd_son+0x250>)
 80045d6:	2701      	movs	r7, #1
 80045d8:	722f      	strb	r7, [r5, #8]
 80045da:	f7fd f979 	bl	80018d0 <chThdDequeueAllI.constprop.0>
  iqp->q_rdptr = iqp->q_buffer;
 80045de:	69ab      	ldr	r3, [r5, #24]
 80045e0:	4850      	ldr	r0, [pc, #320]	; (8004724 <cmd_son+0x254>)
  iqp->q_counter = 0;
 80045e2:	2600      	movs	r6, #0
  iqp->q_wrptr = iqp->q_buffer;
 80045e4:	e9c5 3308 	strd	r3, r3, [r5, #32]
  iqp->q_counter = 0;
 80045e8:	616e      	str	r6, [r5, #20]
 80045ea:	f7fd f971 	bl	80018d0 <chThdDequeueAllI.constprop.0>
  chSchRescheduleS();
 80045ee:	f7ff ff5f 	bl	80044b0 <chSchRescheduleS>
 80045f2:	f386 8811 	msr	BASEPRI, r6
    palSetPadMode(GPIOA, 0, PAL_MODE_ALTERNATE(1));  // TIM2/1
 80045f6:	4844      	ldr	r0, [pc, #272]	; (8004708 <cmd_son+0x238>)
 80045f8:	4639      	mov	r1, r7
 80045fa:	2282      	movs	r2, #130	; 0x82
 80045fc:	f7fd fc10 	bl	8001e20 <_pal_lld_setgroupmode>
 8004600:	2720      	movs	r7, #32
 8004602:	f387 8811 	msr	BASEPRI, r7
  icup->config = config;
 8004606:	4d3f      	ldr	r5, [pc, #252]	; (8004704 <cmd_son+0x234>)
 8004608:	4b47      	ldr	r3, [pc, #284]	; (8004728 <cmd_son+0x258>)
 800460a:	606b      	str	r3, [r5, #4]
  icu_lld_start(icup);
 800460c:	f7fd fee0 	bl	80023d0 <icu_lld_start.constprop.0>
  icup->state = ICU_READY;
 8004610:	2302      	movs	r3, #2
 8004612:	702b      	strb	r3, [r5, #0]
 8004614:	f386 8811 	msr	BASEPRI, r6
 8004618:	f387 8811 	msr	BASEPRI, r7
  icup->tim->EGR |= STM32_TIM_EGR_UG;
 800461c:	68eb      	ldr	r3, [r5, #12]
 800461e:	695a      	ldr	r2, [r3, #20]
 8004620:	f042 0201 	orr.w	r2, r2, #1
 8004624:	615a      	str	r2, [r3, #20]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8004626:	2105      	movs	r1, #5
  icuStartCaptureI(icup);
 8004628:	2203      	movs	r2, #3
  icup->tim->SR = 0;
 800462a:	611e      	str	r6, [r3, #16]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 800462c:	6019      	str	r1, [r3, #0]
 800462e:	702a      	strb	r2, [r5, #0]
 8004630:	f386 8811 	msr	BASEPRI, r6
 8004634:	f387 8811 	msr	BASEPRI, r7
  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert((icup->state == ICU_WAITING) || (icup->state == ICU_ACTIVE),
                "invalid state");
  icuEnableNotificationsI(icup);
 8004638:	f7fc fe8a 	bl	8001350 <icu_lld_enable_notifications.constprop.0>
 800463c:	f386 8811 	msr	BASEPRI, r6
    chprintf(chp, "UARTs stopped.\r\n");
 8004640:	493a      	ldr	r1, [pc, #232]	; (800472c <cmd_son+0x25c>)
 8004642:	4620      	mov	r0, r4
}
 8004644:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    chprintf(chp, "UARTs stopped.\r\n");
 8004648:	f7fe bff2 	b.w	8003630 <chprintf>
    chprintf(chp, "Turns Listeners on or off.\r\n");
 800464c:	4938      	ldr	r1, [pc, #224]	; (8004730 <cmd_son+0x260>)
 800464e:	f7fe ffef 	bl	8003630 <chprintf>
      chprintf(chp, "Listeners are now on. %d \r\n", stat);
 8004652:	4938      	ldr	r1, [pc, #224]	; (8004734 <cmd_son+0x264>)
 8004654:	4620      	mov	r0, r4
 8004656:	2201      	movs	r2, #1
 8004658:	f7fe ffea 	bl	8003630 <chprintf>
    chprintf(chp, "Usage: son [0|1]\r\n");
 800465c:	4620      	mov	r0, r4
 800465e:	4936      	ldr	r1, [pc, #216]	; (8004738 <cmd_son+0x268>)
}
 8004660:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    chprintf(chp, "Usage: son [0|1]\r\n");
 8004664:	f7fe bfe4 	b.w	8003630 <chprintf>
    usart_deinit(sdp->usart);
 8004668:	f8d5 2254 	ldr.w	r2, [r5, #596]	; 0x254
      return;
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccDisableUSART2();
 800466c:	4b33      	ldr	r3, [pc, #204]	; (800473c <cmd_son+0x26c>)
  u->CR1 = 0;
 800466e:	60d6      	str	r6, [r2, #12]
  u->CR2 = 0;
 8004670:	6116      	str	r6, [r2, #16]
  u->CR3 = 0;
 8004672:	6156      	str	r6, [r2, #20]
      rccDisableUSART2();
 8004674:	6c19      	ldr	r1, [r3, #64]	; 0x40
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->__ICER[n >> 5U] = 1U << (n & 0x1FU);
 8004676:	4a32      	ldr	r2, [pc, #200]	; (8004740 <cmd_son+0x270>)
 8004678:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 800467c:	6419      	str	r1, [r3, #64]	; 0x40
 800467e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004680:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8004684:	6619      	str	r1, [r3, #96]	; 0x60
 8004686:	2140      	movs	r1, #64	; 0x40
 8004688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468a:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800468e:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = 0U;
 8004692:	f882 6326 	strb.w	r6, [r2, #806]	; 0x326
 8004696:	e797      	b.n	80045c8 <cmd_son+0xf8>
    icup->tim->CR1  = 0;                    /* Timer disabled.              */
 8004698:	68dd      	ldr	r5, [r3, #12]
  NVIC->__ICER[n >> 5U] = 1U << (n & 0x1FU);
 800469a:	4829      	ldr	r0, [pc, #164]	; (8004740 <cmd_son+0x270>)
      rccDisableTIM2();
 800469c:	4a27      	ldr	r2, [pc, #156]	; (800473c <cmd_son+0x26c>)
    icup->tim->CR1  = 0;                    /* Timer disabled.              */
 800469e:	2100      	movs	r1, #0
 80046a0:	6029      	str	r1, [r5, #0]
    icup->tim->DIER = 0;                    /* All IRQs disabled.           */
 80046a2:	60e9      	str	r1, [r5, #12]
    icup->tim->SR   = 0;                    /* Clear eventual pending IRQs. */
 80046a4:	6129      	str	r1, [r5, #16]
 80046a6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80046aa:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80046ae:	f8c0 5180 	str.w	r5, [r0, #384]	; 0x180
  NVIC->__IPR[n] = 0U;
 80046b2:	f880 131c 	strb.w	r1, [r0, #796]	; 0x31c
      rccDisableTIM2();
 80046b6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80046b8:	f021 0101 	bic.w	r1, r1, #1
 80046bc:	6411      	str	r1, [r2, #64]	; 0x40
 80046be:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80046c0:	f021 0101 	bic.w	r1, r1, #1
 80046c4:	6611      	str	r1, [r2, #96]	; 0x60
 80046c6:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80046c8:	e71b      	b.n	8004502 <cmd_son+0x32>
    usart_deinit(sdp->usart);
 80046ca:	f8d5 0254 	ldr.w	r0, [r5, #596]	; 0x254
      rccDisableUSART1();
 80046ce:	491b      	ldr	r1, [pc, #108]	; (800473c <cmd_son+0x26c>)
  u->CR1 = 0;
 80046d0:	60c2      	str	r2, [r0, #12]
  u->CR2 = 0;
 80046d2:	6102      	str	r2, [r0, #16]
  u->CR3 = 0;
 80046d4:	6142      	str	r2, [r0, #20]
      rccDisableUSART1();
 80046d6:	6c4e      	ldr	r6, [r1, #68]	; 0x44
  NVIC->__ICER[n >> 5U] = 1U << (n & 0x1FU);
 80046d8:	4819      	ldr	r0, [pc, #100]	; (8004740 <cmd_son+0x270>)
 80046da:	f026 0610 	bic.w	r6, r6, #16
 80046de:	644e      	str	r6, [r1, #68]	; 0x44
 80046e0:	6e4e      	ldr	r6, [r1, #100]	; 0x64
 80046e2:	f026 0610 	bic.w	r6, r6, #16
 80046e6:	664e      	str	r6, [r1, #100]	; 0x64
 80046e8:	6e49      	ldr	r1, [r1, #100]	; 0x64
 80046ea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80046ee:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
  NVIC->__IPR[n] = 0U;
 80046f2:	f880 2325 	strb.w	r2, [r0, #805]	; 0x325
 80046f6:	e749      	b.n	800458c <cmd_son+0xbc>
    chprintf(chp, "Only 0 or 1 allowed. (%d) \r\n", stat);
 80046f8:	4620      	mov	r0, r4
 80046fa:	4912      	ldr	r1, [pc, #72]	; (8004744 <cmd_son+0x274>)
}
 80046fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    chprintf(chp, "Only 0 or 1 allowed. (%d) \r\n", stat);
 8004700:	f7fe bf96 	b.w	8003630 <chprintf>
 8004704:	20000c80 	.word	0x20000c80
 8004708:	40020000 	.word	0x40020000
 800470c:	20000c98 	.word	0x20000c98
 8004710:	20000ef4 	.word	0x20000ef4
 8004714:	080062d8 	.word	0x080062d8
 8004718:	20000cc8 	.word	0x20000cc8
 800471c:	20000ca4 	.word	0x20000ca4
 8004720:	20000f24 	.word	0x20000f24
 8004724:	20000f00 	.word	0x20000f00
 8004728:	20000800 	.word	0x20000800
 800472c:	080062ec 	.word	0x080062ec
 8004730:	08006268 	.word	0x08006268
 8004734:	08006288 	.word	0x08006288
 8004738:	080062a4 	.word	0x080062a4
 800473c:	40023800 	.word	0x40023800
 8004740:	e000e100 	.word	0xe000e100
 8004744:	080062b8 	.word	0x080062b8
	...

08004750 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8004750:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8004752:	4b16      	ldr	r3, [pc, #88]	; (80047ac <chMtxUnlock+0x5c>)
void chMtxUnlock(mutex_t *mp) {
 8004754:	4601      	mov	r1, r0
  thread_t *ctp = currp;
 8004756:	695d      	ldr	r5, [r3, #20]
 8004758:	2320      	movs	r3, #32
 800475a:	f383 8811 	msr	BASEPRI, r3
  return (bool)(tqp->next != (const thread_t *)tqp);
 800475e:	6800      	ldr	r0, [r0, #0]
    chDbgAssert(ctp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8004760:	68cb      	ldr	r3, [r1, #12]
 8004762:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8004764:	4288      	cmp	r0, r1
 8004766:	d01b      	beq.n	80047a0 <chMtxUnlock+0x50>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8004768:	6bec      	ldr	r4, [r5, #60]	; 0x3c
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 800476a:	b14b      	cbz	r3, 8004780 <chMtxUnlock+0x30>
 800476c:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800476e:	4293      	cmp	r3, r2
 8004770:	d003      	beq.n	800477a <chMtxUnlock+0x2a>
 8004772:	6892      	ldr	r2, [r2, #8]
 8004774:	4294      	cmp	r4, r2
 8004776:	bf38      	it	cc
 8004778:	4614      	movcc	r4, r2
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 800477a:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f5      	bne.n	800476c <chMtxUnlock+0x1c>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8004780:	6b82      	ldr	r2, [r0, #56]	; 0x38
  tqp->next             = tp->queue.next;
 8004782:	6803      	ldr	r3, [r0, #0]
      ctp->prio = newprio;
 8004784:	60ac      	str	r4, [r5, #8]
 8004786:	600b      	str	r3, [r1, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004788:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 800478a:	e9c1 0202 	strd	r0, r2, [r1, #8]
      tp->mtxlist = mp;
 800478e:	6381      	str	r1, [r0, #56]	; 0x38

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8004790:	f7fd f886 	bl	80018a0 <chSchReadyI>
      chSchRescheduleS();
 8004794:	f7ff fe8c 	bl	80044b0 <chSchRescheduleS>
 8004798:	2300      	movs	r3, #0
 800479a:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif

  chSysUnlock();
}
 800479e:	bd38      	pop	{r3, r4, r5, pc}
      mp->owner = NULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	6083      	str	r3, [r0, #8]
 80047a4:	2300      	movs	r3, #0
 80047a6:	f383 8811 	msr	BASEPRI, r3
}
 80047aa:	bd38      	pop	{r3, r4, r5, pc}
 80047ac:	2000189c 	.word	0x2000189c

080047b0 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80047b0:	4bb9      	ldr	r3, [pc, #740]	; (8004a98 <main+0x2e8>)
  PWR->CR |= PWR_CR_DBP;
 80047b2:	48ba      	ldr	r0, [pc, #744]	; (8004a9c <main+0x2ec>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	f062 021f 	orn	r2, r2, #31
}

/*
 * Application entry point.
 */
int main(void) {
 80047ba:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80047be:	611a      	str	r2, [r3, #16]
 80047c0:	691a      	ldr	r2, [r3, #16]
 80047c2:	f002 021f 	and.w	r2, r2, #31
 80047c6:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 80047c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80047cc:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 80047ce:	695a      	ldr	r2, [r3, #20]
 80047d0:	615c      	str	r4, [r3, #20]
 80047d2:	2200      	movs	r2, #0
 80047d4:	6959      	ldr	r1, [r3, #20]
 80047d6:	615a      	str	r2, [r3, #20]
 80047d8:	6959      	ldr	r1, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80047da:	6a19      	ldr	r1, [r3, #32]
 80047dc:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 80047e0:	6219      	str	r1, [r3, #32]
 80047e2:	6a19      	ldr	r1, [r3, #32]
 80047e4:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80047e8:	6219      	str	r1, [r3, #32]
 80047ea:	6a19      	ldr	r1, [r3, #32]
  rccResetAPB2(~0);
 80047ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80047ee:	625c      	str	r4, [r3, #36]	; 0x24
 80047f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80047f2:	625a      	str	r2, [r3, #36]	; 0x24
 80047f4:	6a59      	ldr	r1, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 80047f6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80047f8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80047fc:	6419      	str	r1, [r3, #64]	; 0x40
 80047fe:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004800:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004804:	6619      	str	r1, [r3, #96]	; 0x60
 8004806:	6e19      	ldr	r1, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8004808:	6801      	ldr	r1, [r0, #0]
 800480a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800480e:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8004810:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004812:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8004816:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800481a:	b091      	sub	sp, #68	; 0x44
 800481c:	d003      	beq.n	8004826 <main+0x76>
    RCC->BDCR = RCC_BDCR_BDRST;
 800481e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004822:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8004824:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8004826:	f8df c274 	ldr.w	ip, [pc, #628]	; 8004a9c <main+0x2ec>
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800482a:	4e9d      	ldr	r6, [pc, #628]	; (8004aa0 <main+0x2f0>)
 800482c:	f8dc 2004 	ldr.w	r2, [ip, #4]
  icup->state  = ICU_STOP;
 8004830:	4d9c      	ldr	r5, [pc, #624]	; (8004aa4 <main+0x2f4>)
 8004832:	499d      	ldr	r1, [pc, #628]	; (8004aa8 <main+0x2f8>)
  sdObjectInit(&SD1, NULL, notify1);
 8004834:	489d      	ldr	r0, [pc, #628]	; (8004aac <main+0x2fc>)
  sdObjectInit(&SD2, NULL, notify2);
 8004836:	4f9e      	ldr	r7, [pc, #632]	; (8004ab0 <main+0x300>)
  sdObjectInit(&SD6, NULL, notify6);
 8004838:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004b10 <main+0x360>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 800483c:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 8004b14 <main+0x364>
 8004840:	2360      	movs	r3, #96	; 0x60
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004842:	2440      	movs	r4, #64	; 0x40
 8004844:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004848:	f8cc 2004 	str.w	r2, [ip, #4]
 800484c:	f04f 0a80 	mov.w	sl, #128	; 0x80
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004850:	f886 3306 	strb.w	r3, [r6, #774]	; 0x306
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004858:	f8c6 4180 	str.w	r4, [r6, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800485c:	6034      	str	r4, [r6, #0]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800485e:	f44f 7400 	mov.w	r4, #512	; 0x200
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004862:	f886 3307 	strb.w	r3, [r6, #775]	; 0x307
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004866:	f8c6 a180 	str.w	sl, [r6, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800486a:	f8c6 a000 	str.w	sl, [r6]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800486e:	f886 3308 	strb.w	r3, [r6, #776]	; 0x308
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004872:	f8c6 2180 	str.w	r2, [r6, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004876:	6032      	str	r2, [r6, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004878:	f886 3309 	strb.w	r3, [r6, #777]	; 0x309
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800487c:	f8c6 4180 	str.w	r4, [r6, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004880:	6034      	str	r4, [r6, #0]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004882:	f44f 6480 	mov.w	r4, #1024	; 0x400
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004886:	f886 330a 	strb.w	r3, [r6, #778]	; 0x30a
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800488a:	f8c6 4180 	str.w	r4, [r6, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800488e:	6034      	str	r4, [r6, #0]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004890:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004894:	f886 3317 	strb.w	r3, [r6, #791]	; 0x317
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004898:	f8c6 4180 	str.w	r4, [r6, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800489c:	6034      	str	r4, [r6, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800489e:	f886 3328 	strb.w	r3, [r6, #808]	; 0x328
  ICUD1.tim = STM32_TIM1;
 80048a2:	4b84      	ldr	r3, [pc, #528]	; (8004ab4 <main+0x304>)
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80048a4:	f8c6 2184 	str.w	r2, [r6, #388]	; 0x184
  icup->config = NULL;
 80048a8:	2400      	movs	r4, #0
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80048aa:	6072      	str	r2, [r6, #4]
  icup->state  = ICU_STOP;
 80048ac:	f04f 0b01 	mov.w	fp, #1
 80048b0:	60eb      	str	r3, [r5, #12]
  ICUD2.tim = STM32_TIM2;
 80048b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048b6:	60cb      	str	r3, [r1, #12]
 80048b8:	f881 b000 	strb.w	fp, [r1]
  icup->config = NULL;
 80048bc:	604c      	str	r4, [r1, #4]
  sdObjectInit(&SD1, NULL, notify1);
 80048be:	497e      	ldr	r1, [pc, #504]	; (8004ab8 <main+0x308>)
  icup->state  = ICU_STOP;
 80048c0:	f885 b000 	strb.w	fp, [r5]
  icup->config = NULL;
 80048c4:	606c      	str	r4, [r5, #4]
 80048c6:	f7fc fd13 	bl	80012f0 <sdObjectInit.constprop.0>
  SD1.usart = USART1;
 80048ca:	4b7c      	ldr	r3, [pc, #496]	; (8004abc <main+0x30c>)
 80048cc:	f8c0 3254 	str.w	r3, [r0, #596]	; 0x254
  sdObjectInit(&SD2, NULL, notify2);
 80048d0:	497b      	ldr	r1, [pc, #492]	; (8004ac0 <main+0x310>)
  usbp->state        = USB_STOP;
 80048d2:	4d7c      	ldr	r5, [pc, #496]	; (8004ac4 <main+0x314>)
 80048d4:	4638      	mov	r0, r7
 80048d6:	f7fc fd0b 	bl	80012f0 <sdObjectInit.constprop.0>
  SD2.usart = USART2;
 80048da:	4b7b      	ldr	r3, [pc, #492]	; (8004ac8 <main+0x318>)
  sdObjectInit(&SD6, NULL, notify6);
 80048dc:	497b      	ldr	r1, [pc, #492]	; (8004acc <main+0x31c>)
  SD2.usart = USART2;
 80048de:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
  sdObjectInit(&SD6, NULL, notify6);
 80048e2:	4648      	mov	r0, r9
 80048e4:	f7fc fd04 	bl	80012f0 <sdObjectInit.constprop.0>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80048e8:	4b6b      	ldr	r3, [pc, #428]	; (8004a98 <main+0x2e8>)
 80048ea:	f885 b000 	strb.w	fp, [r5]
 80048ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    usbp->in_params[i]  = NULL;
 80048f0:	61ec      	str	r4, [r5, #28]
 80048f2:	f042 0208 	orr.w	r2, r2, #8
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40
 80048f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80048fa:	4975      	ldr	r1, [pc, #468]	; (8004ad0 <main+0x320>)
    usbp->out_params[i] = NULL;
 80048fc:	62ac      	str	r4, [r5, #40]	; 0x28
  ST_ENABLE_CLOCK();
 80048fe:	f042 0208 	orr.w	r2, r2, #8
 8004902:	661a      	str	r2, [r3, #96]	; 0x60
 8004904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  ST_ENABLE_STOP();
 8004906:	688a      	ldr	r2, [r1, #8]
  tqp->next = (thread_t *)tqp;
 8004908:	4f72      	ldr	r7, [pc, #456]	; (8004ad4 <main+0x324>)
    usbp->in_params[i]  = NULL;
 800490a:	622c      	str	r4, [r5, #32]
 800490c:	f042 0208 	orr.w	r2, r2, #8
  usbp->transmitting = 0;
 8004910:	e9c5 4401 	strd	r4, r4, [r5, #4]
    usbp->out_params[i] = NULL;
 8004914:	62ec      	str	r4, [r5, #44]	; 0x2c
    usbp->in_params[i]  = NULL;
 8004916:	626c      	str	r4, [r5, #36]	; 0x24
    usbp->out_params[i] = NULL;
 8004918:	632c      	str	r4, [r5, #48]	; 0x30
 800491a:	608a      	str	r2, [r1, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800491c:	4a6e      	ldr	r2, [pc, #440]	; (8004ad8 <main+0x328>)
  tqp->prev = (thread_t *)tqp;
 800491e:	607f      	str	r7, [r7, #4]
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8004920:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8004924:	f242 01cf 	movw	r1, #8399	; 0x20cf
 8004928:	6291      	str	r1, [r2, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800492a:	f8c2 c02c 	str.w	ip, [r2, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800492e:	6194      	str	r4, [r2, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8004930:	6354      	str	r4, [r2, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 8004932:	60d4      	str	r4, [r2, #12]
  STM32_ST_TIM->CR2    = 0;
 8004934:	6054      	str	r4, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8004936:	f8c2 b014 	str.w	fp, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800493a:	f8c2 b000 	str.w	fp, [r2]
  SD6.usart = USART6;
 800493e:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004942:	f886 a332 	strb.w	sl, [r6, #818]	; 0x332
 8004946:	f8c9 2254 	str.w	r2, [r9, #596]	; 0x254
  USBD1.otgparams = &fsparams;
 800494a:	4a64      	ldr	r2, [pc, #400]	; (8004adc <main+0x32c>)
 800494c:	65aa      	str	r2, [r5, #88]	; 0x58
  USBD1.otg       = OTG_FS;
 800494e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004952:	656a      	str	r2, [r5, #84]	; 0x54
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004954:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  tqp->next = (thread_t *)tqp;
 8004958:	4b61      	ldr	r3, [pc, #388]	; (8004ae0 <main+0x330>)
 800495a:	f8c6 2184 	str.w	r2, [r6, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800495e:	6072      	str	r2, [r6, #4]
 8004960:	4a60      	ldr	r2, [pc, #384]	; (8004ae4 <main+0x334>)
 8004962:	603f      	str	r7, [r7, #0]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8004964:	e9c7 4702 	strd	r4, r7, [r7, #8]
 8004968:	f8c8 2000 	str.w	r2, [r8]
 800496c:	f108 020c 	add.w	r2, r8, #12
  tqp->prev = (thread_t *)tqp;
 8004970:	e9c8 2203 	strd	r2, r2, [r8, #12]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8004974:	f103 0210 	add.w	r2, r3, #16
 8004978:	611a      	str	r2, [r3, #16]
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 800497a:	2214      	movs	r2, #20
 800497c:	619a      	str	r2, [r3, #24]
 800497e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004982:	625a      	str	r2, [r3, #36]	; 0x24
 8004984:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004988:	629a      	str	r2, [r3, #40]	; 0x28
 800498a:	221c      	movs	r2, #28
 800498c:	631a      	str	r2, [r3, #48]	; 0x30
 800498e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004992:	63da      	str	r2, [r3, #60]	; 0x3c
 8004994:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004998:	641a      	str	r2, [r3, #64]	; 0x40
 800499a:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800499e:	645a      	str	r2, [r3, #68]	; 0x44
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80049a0:	f107 0218 	add.w	r2, r7, #24
  mp->align = align;
  mp->provider = provider;
 80049a4:	4850      	ldr	r0, [pc, #320]	; (8004ae8 <main+0x338>)
 80049a6:	6218      	str	r0, [r3, #32]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80049a8:	e9c7 2206 	strd	r2, r2, [r7, #24]
  mp->align = align;
 80049ac:	2204      	movs	r2, #4
  mp->provider = provider;
 80049ae:	6398      	str	r0, [r3, #56]	; 0x38
 80049b0:	e9c3 3300 	strd	r3, r3, [r3]
  ch_memcore.basemem = __heap_base__;
 80049b4:	494d      	ldr	r1, [pc, #308]	; (8004aec <main+0x33c>)
 80049b6:	484e      	ldr	r0, [pc, #312]	; (8004af0 <main+0x340>)
  mp->owner = NULL;
 80049b8:	609c      	str	r4, [r3, #8]
  mp->next = NULL;
 80049ba:	615c      	str	r4, [r3, #20]
 80049bc:	62dc      	str	r4, [r3, #44]	; 0x2c
  mp->align = align;
 80049be:	61da      	str	r2, [r3, #28]
 80049c0:	635a      	str	r2, [r3, #52]	; 0x34
  ch_memcore.topmem  = __heap_end__;
 80049c2:	4b4c      	ldr	r3, [pc, #304]	; (8004af4 <main+0x344>)
  ch.rlist.older = (thread_t *)&ch.rlist;
 80049c4:	613f      	str	r7, [r7, #16]
 80049c6:	e9c1 0300 	strd	r0, r3, [r1]
  tmp->cumulative = (rttime_t)0;
 80049ca:	2000      	movs	r0, #0
 80049cc:	2100      	movs	r1, #0
  ch.vtlist.lasttime = (systime_t)0;
 80049ce:	e9c7 c408 	strd	ip, r4, [r7, #32]
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
 80049d2:	e9c8 4401 	strd	r4, r4, [r8, #4]
  ch.tm.offset = (rtcnt_t)0;
 80049d6:	673c      	str	r4, [r7, #112]	; 0x70
 80049d8:	f8c8 4014 	str.w	r4, [r8, #20]
  tmp->best       = (rtcnt_t)-1;
 80049dc:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
  tmp->cumulative = (rttime_t)0;
 80049e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  tmp->last       = (rtcnt_t)0;
 80049e4:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  tmp->cumulative = (rttime_t)0;
 80049e8:	4691      	mov	r9, r2
  tmp->n          = (ucnt_t)0;
 80049ea:	940d      	str	r4, [sp, #52]	; 0x34
    chTMStartMeasurementX(&tm);
 80049ec:	a80a      	add	r0, sp, #40	; 0x28
 80049ee:	f7fc fed7 	bl	80017a0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 80049f2:	a80a      	add	r0, sp, #40	; 0x28
 80049f4:	f7fc feac 	bl	8001750 <chTMStopMeasurementX>
  } while (i > 0U);
 80049f8:	f1b9 0901 	subs.w	r9, r9, #1
 80049fc:	d1f6      	bne.n	80049ec <main+0x23c>
  REG_INSERT(tp);
 80049fe:	4b3e      	ldr	r3, [pc, #248]	; (8004af8 <main+0x348>)
 8004a00:	6939      	ldr	r1, [r7, #16]
  ch.tm.offset = tm.best;
 8004a02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a04:	673a      	str	r2, [r7, #112]	; 0x70
  tp->prio      = prio;
 8004a06:	2080      	movs	r0, #128	; 0x80
  tp->refs      = (trefs_t)1;
 8004a08:	2401      	movs	r4, #1
  tqp->next = (thread_t *)tqp;
 8004a0a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
  tp->name      = name;
 8004a0e:	f8df c108 	ldr.w	ip, [pc, #264]	; 8004b18 <main+0x368>
  tp->flags     = CH_FLAG_MODE_STATIC;
 8004a12:	f887 904d 	strb.w	r9, [r7, #77]	; 0x4d
  tlp->next = (thread_t *)tlp;
 8004a16:	f103 0628 	add.w	r6, r3, #40	; 0x28
  tp->epending  = (eventmask_t)0;
 8004a1a:	e9c7 9918 	strd	r9, r9, [r7, #96]	; 0x60
  REG_INSERT(tp);
 8004a1e:	e9c7 710e 	strd	r7, r1, [r7, #56]	; 0x38
  tp->prio      = prio;
 8004a22:	6378      	str	r0, [r7, #52]	; 0x34
  tp->realprio  = prio;
 8004a24:	66b8      	str	r0, [r7, #104]	; 0x68
  tp->refs      = (trefs_t)1;
 8004a26:	f887 404e 	strb.w	r4, [r7, #78]	; 0x4e
  tp->name      = name;
 8004a2a:	f8c7 c044 	str.w	ip, [r7, #68]	; 0x44
 8004a2e:	f04f 0a20 	mov.w	sl, #32
  REG_INSERT(tp);
 8004a32:	60cb      	str	r3, [r1, #12]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8004a34:	e9c7 3304 	strd	r3, r3, [r7, #16]
  tqp->next = (thread_t *)tqp;
 8004a38:	e9c7 6215 	strd	r6, r2, [r7, #84]	; 0x54
  currp->state = CH_STATE_CURRENT;
 8004a3c:	f887 404c 	strb.w	r4, [r7, #76]	; 0x4c
  currp->wabase = NULL;
 8004a40:	f8c7 9048 	str.w	r9, [r7, #72]	; 0x48
  tqp->prev = (thread_t *)tqp;
 8004a44:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004a46:	f38a 8811 	msr	BASEPRI, sl
  __ASM volatile ("cpsie i" : : : "memory");
 8004a4a:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a4c:	4b2b      	ldr	r3, [pc, #172]	; (8004afc <main+0x34c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8004a4e:	4a2c      	ldr	r2, [pc, #176]	; (8004b00 <main+0x350>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a50:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a52:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 8004a56:	4001      	ands	r1, r0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004a58:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	f6a0 300f 	subw	r0, r0, #2831	; 0xb0f
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8004a62:	60da      	str	r2, [r3, #12]
 8004a64:	68c2      	ldr	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004a66:	4927      	ldr	r1, [pc, #156]	; (8004b04 <main+0x354>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004a68:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004a6c:	60c2      	str	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004a6e:	680a      	ldr	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a70:	2010      	movs	r0, #16
 8004a72:	4322      	orrs	r2, r4
 8004a74:	600a      	str	r2, [r1, #0]
 8004a76:	77d8      	strb	r0, [r3, #31]
 8004a78:	f883 a022 	strb.w	sl, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004a7c:	f389 8811 	msr	BASEPRI, r9
  __ASM volatile ("cpsie i" : : : "memory");
 8004a80:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004a82:	f38a 8811 	msr	BASEPRI, sl
  tp = chThdCreateSuspendedI(tdp);
 8004a86:	4820      	ldr	r0, [pc, #128]	; (8004b08 <main+0x358>)
 8004a88:	f7fc fe92 	bl	80017b0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 8004a8c:	f7fd fd18 	bl	80024c0 <chSchWakeupS.constprop.0>
 8004a90:	f389 8811 	msr	BASEPRI, r9
   *   RTOS is active.
   */
  halInit();
  chSysInit();

  palSetPadMode(GPIOC, 13, PAL_MODE_OUTPUT_PUSHPULL ); // LED
 8004a94:	481d      	ldr	r0, [pc, #116]	; (8004b0c <main+0x35c>)
 8004a96:	e041      	b.n	8004b1c <main+0x36c>
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	40007000 	.word	0x40007000
 8004aa0:	e000e100 	.word	0xe000e100
 8004aa4:	20000c68 	.word	0x20000c68
 8004aa8:	20000c80 	.word	0x20000c80
 8004aac:	20000c98 	.word	0x20000c98
 8004ab0:	20000ef4 	.word	0x20000ef4
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	080015a1 	.word	0x080015a1
 8004abc:	40011000 	.word	0x40011000
 8004ac0:	080015b1 	.word	0x080015b1
 8004ac4:	2000183c 	.word	0x2000183c
 8004ac8:	40004400 	.word	0x40004400
 8004acc:	080015c1 	.word	0x080015c1
 8004ad0:	e0042000 	.word	0xe0042000
 8004ad4:	2000189c 	.word	0x2000189c
 8004ad8:	40000c00 	.word	0x40000c00
 8004adc:	080063c8 	.word	0x080063c8
 8004ae0:	20001910 	.word	0x20001910
 8004ae4:	08001561 	.word	0x08001561
 8004ae8:	08001721 	.word	0x08001721
 8004aec:	20001a30 	.word	0x20001a30
 8004af0:	200021e0 	.word	0x200021e0
 8004af4:	20010000 	.word	0x20010000
 8004af8:	200018c8 	.word	0x200018c8
 8004afc:	e000ed00 	.word	0xe000ed00
 8004b00:	05fa0300 	.word	0x05fa0300
 8004b04:	e0001000 	.word	0xe0001000
 8004b08:	080063d8 	.word	0x080063d8
 8004b0c:	40020800 	.word	0x40020800
 8004b10:	20001150 	.word	0x20001150
 8004b14:	20001a48 	.word	0x20001a48
 8004b18:	08006324 	.word	0x08006324
  sdup->vmt = &vmt;
 8004b1c:	4ebe      	ldr	r6, [pc, #760]	; (8004e18 <main+0x668>)
 8004b1e:	4622      	mov	r2, r4
 8004b20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b24:	f7fd f97c 	bl	8001e20 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, 14, PAL_MODE_OUTPUT_PUSHPULL ); // Debug
 8004b28:	4622      	mov	r2, r4
 8004b2a:	48bc      	ldr	r0, [pc, #752]	; (8004e1c <main+0x66c>)
 8004b2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b30:	f7fd f976 	bl	8001e20 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, 15, PAL_MODE_OUTPUT_PUSHPULL ); // Debug
 8004b34:	4622      	mov	r2, r4
 8004b36:	48b9      	ldr	r0, [pc, #740]	; (8004e1c <main+0x66c>)
 8004b38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b3c:	f7fd f970 	bl	8001e20 <_pal_lld_setgroupmode>
 8004b40:	4631      	mov	r1, r6
 8004b42:	4bb7      	ldr	r3, [pc, #732]	; (8004e20 <main+0x670>)
 8004b44:	f841 3b04 	str.w	r3, [r1], #4
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8004b48:	f206 438c 	addw	r3, r6, #1164	; 0x48c
  ibqp->notify    = infy;
 8004b4c:	48b5      	ldr	r0, [pc, #724]	; (8004e24 <main+0x674>)
  obqp->notify    = onfy;
 8004b4e:	4ab6      	ldr	r2, [pc, #728]	; (8004e28 <main+0x678>)
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8004b50:	65f3      	str	r3, [r6, #92]	; 0x5c
  ibqp->brdptr    = bp;
 8004b52:	f106 037c 	add.w	r3, r6, #124	; 0x7c
  ibqp->bwrptr    = bp;
 8004b56:	e9c6 3307 	strd	r3, r3, [r6, #28]
  sdup->state = SDU_STOP;
 8004b5a:	7234      	strb	r4, [r6, #8]
  ibqp->suspended = suspended;
 8004b5c:	7534      	strb	r4, [r6, #20]
  obqp->suspended = suspended;
 8004b5e:	f886 404c 	strb.w	r4, [r6, #76]	; 0x4c
  ibqp->notify    = infy;
 8004b62:	63f0      	str	r0, [r6, #60]	; 0x3c
  tqp->next = (thread_t *)tqp;
 8004b64:	f106 040c 	add.w	r4, r6, #12
  obqp->notify    = onfy;
 8004b68:	6772      	str	r2, [r6, #116]	; 0x74
  esp->next = (event_listener_t *)esp;
 8004b6a:	6071      	str	r1, [r6, #4]
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8004b6c:	f506 7221 	add.w	r2, r6, #644	; 0x284
  ibqp->bsize     = size + sizeof (size_t);
 8004b70:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004b74:	f106 0044 	add.w	r0, r6, #68	; 0x44
  ibqp->buffers   = bp;
 8004b78:	6333      	str	r3, [r6, #48]	; 0x30
  ibqp->bn        = n;
 8004b7a:	2302      	movs	r3, #2
  ibqp->bcounter  = 0;
 8004b7c:	f8c6 9018 	str.w	r9, [r6, #24]
  ibqp->top       = NULL;
 8004b80:	e9c6 990d 	strd	r9, r9, [r6, #52]	; 0x34
  obqp->top       = NULL;
 8004b84:	e9c6 991b 	strd	r9, r9, [r6, #108]	; 0x6c
  tqp->prev = (thread_t *)tqp;
 8004b88:	e9c6 4403 	strd	r4, r4, [r6, #12]
  obqp->bwrptr    = bp;
 8004b8c:	e9c6 2215 	strd	r2, r2, [r6, #84]	; 0x54
 8004b90:	e9c6 0011 	strd	r0, r0, [r6, #68]	; 0x44
  ibqp->link      = link;
 8004b94:	6436      	str	r6, [r6, #64]	; 0x40
  obqp->link      = link;
 8004b96:	67b6      	str	r6, [r6, #120]	; 0x78
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8004b98:	6272      	str	r2, [r6, #36]	; 0x24
  obqp->buffers   = bp;
 8004b9a:	66b2      	str	r2, [r6, #104]	; 0x68
  ibqp->bsize     = size + sizeof (size_t);
 8004b9c:	62b1      	str	r1, [r6, #40]	; 0x28
  obqp->bsize     = size + sizeof (size_t);
 8004b9e:	6631      	str	r1, [r6, #96]	; 0x60
  ibqp->bn        = n;
 8004ba0:	62f3      	str	r3, [r6, #44]	; 0x2c
  obqp->bcounter  = n;
 8004ba2:	6533      	str	r3, [r6, #80]	; 0x50
  obqp->bn        = n;
 8004ba4:	6673      	str	r3, [r6, #100]	; 0x64
 8004ba6:	f38a 8811 	msr	BASEPRI, sl
  sdup->config = config;
 8004baa:	4aa0      	ldr	r2, [pc, #640]	; (8004e2c <main+0x67c>)
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 8004bac:	622e      	str	r6, [r5, #32]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 8004bae:	62ee      	str	r6, [r5, #44]	; 0x2c
    usbp->in_params[config->int_in - 1U]  = sdup;
 8004bb0:	61ee      	str	r6, [r5, #28]
  sdup->state = SDU_READY;
 8004bb2:	7233      	strb	r3, [r6, #8]
  sdup->config = config;
 8004bb4:	f8c6 248c 	str.w	r2, [r6, #1164]	; 0x48c
 8004bb8:	f389 8811 	msr	BASEPRI, r9


  sduObjectInit(&SHELLPORT);
  sduStart(&SHELLPORT, &serusbcfg1);

  usbDisconnectBus(serusbcfg1.usbp);
 8004bbc:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8004bbe:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004bc0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004bc4:	6393      	str	r3, [r2, #56]	; 0x38
  chThdSleepMilliseconds(1500);
 8004bc6:	f643 2098 	movw	r0, #15000	; 0x3a98
 8004bca:	f7fd ff69 	bl	8002aa0 <chThdSleep>
 8004bce:	f38a 8811 	msr	BASEPRI, sl
  if (usbp->state == USB_STOP) {
 8004bd2:	782b      	ldrb	r3, [r5, #0]
  usbp->config = config;
 8004bd4:	4a96      	ldr	r2, [pc, #600]	; (8004e30 <main+0x680>)
 8004bd6:	606a      	str	r2, [r5, #4]
 8004bd8:	2b01      	cmp	r3, #1
    usbp->epc[i] = NULL;
 8004bda:	e9c5 9903 	strd	r9, r9, [r5, #12]
 8004bde:	e9c5 9905 	strd	r9, r9, [r5, #20]
 8004be2:	f000 81c6 	beq.w	8004f72 <main+0x7c2>
  usbp->state = USB_READY;
 8004be6:	2302      	movs	r3, #2
 8004be8:	702b      	strb	r3, [r5, #0]
 8004bea:	2400      	movs	r4, #0
 8004bec:	f384 8811 	msr	BASEPRI, r4
  usbStart(serusbcfg1.usbp, &usbcfg);
  usbConnectBus(serusbcfg1.usbp);
 8004bf0:	6d6a      	ldr	r2, [r5, #84]	; 0x54

  //chprintf(dbg, "\r\nSerial Sniffer Programmer: %i.%i \r\nSystem started. (Shell)\r\n", VMAJOR, VMINOR);
  if (serstat){
    //palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));  // TX2
    palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));  // RX2
 8004bf2:	4890      	ldr	r0, [pc, #576]	; (8004e34 <main+0x684>)
  usbConnectBus(serusbcfg1.usbp);
 8004bf4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004bf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bfa:	6393      	str	r3, [r2, #56]	; 0x38
    palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));  // RX2
 8004bfc:	2108      	movs	r1, #8
 8004bfe:	f240 3282 	movw	r2, #898	; 0x382
 8004c02:	f7fd f90d 	bl	8001e20 <_pal_lld_setgroupmode>
    //palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(7));  // TX1
    palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(7)); // RX1
 8004c06:	488b      	ldr	r0, [pc, #556]	; (8004e34 <main+0x684>)
 8004c08:	f240 3282 	movw	r2, #898	; 0x382
 8004c0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c10:	f7fd f906 	bl	8001e20 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOA, 0, PAL_MODE_INPUT_PULLUP);  // Button
 8004c14:	2220      	movs	r2, #32
 8004c16:	2101      	movs	r1, #1
 8004c18:	4886      	ldr	r0, [pc, #536]	; (8004e34 <main+0x684>)
 8004c1a:	f7fd f901 	bl	8001e20 <_pal_lld_setgroupmode>
    sdStart(&SD2, &serial_config);
 8004c1e:	4886      	ldr	r0, [pc, #536]	; (8004e38 <main+0x688>)
 8004c20:	f7fc fbb6 	bl	8001390 <sdStart.constprop.0>
    sdStart(&SD1, &serial_config);
 8004c24:	4885      	ldr	r0, [pc, #532]	; (8004e3c <main+0x68c>)
 8004c26:	f7fc fbb3 	bl	8001390 <sdStart.constprop.0>
 8004c2a:	4b85      	ldr	r3, [pc, #532]	; (8004e40 <main+0x690>)
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	601b      	str	r3, [r3, #0]
 8004c30:	f382 8811 	msr	BASEPRI, r2
  esp->next     = elp;
 8004c34:	a905      	add	r1, sp, #20
  elp->next     = esp->next;
 8004c36:	6818      	ldr	r0, [r3, #0]
  esp->next     = elp;
 8004c38:	6019      	str	r1, [r3, #0]
  elp->listener = currp;
 8004c3a:	697b      	ldr	r3, [r7, #20]
  elp->flags    = (eventflags_t)0;
 8004c3c:	9408      	str	r4, [sp, #32]
  elp->events   = events;
 8004c3e:	2501      	movs	r5, #1
  elp->wflags   = wflags;
 8004c40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  elp->next     = esp->next;
 8004c44:	9005      	str	r0, [sp, #20]
  elp->events   = events;
 8004c46:	e9cd 3506 	strd	r3, r5, [sp, #24]
  elp->wflags   = wflags;
 8004c4a:	9209      	str	r2, [sp, #36]	; 0x24
 8004c4c:	f384 8811 	msr	BASEPRI, r4
   * Shell manager initialization.
   * Event zero is shell exit.
   */
  shellInit();
  chEvtRegister(&shell_terminated, &shell_el, 0);
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8004c50:	497c      	ldr	r1, [pc, #496]	; (8004e44 <main+0x694>)
 8004c52:	487d      	ldr	r0, [pc, #500]	; (8004e48 <main+0x698>)
  chMtxLockS(mp);
 8004c54:	f8df 9214 	ldr.w	r9, [pc, #532]	; 8004e6c <main+0x6bc>
 8004c58:	f8df b214 	ldr.w	fp, [pc, #532]	; 8004e70 <main+0x6c0>
 8004c5c:	f7fd fc60 	bl	8002520 <chThdCreateStatic.constprop.0>
  chThdCreateStatic(waListener1, sizeof(waListener1), NORMALPRIO, Listener1, NULL);
 8004c60:	497a      	ldr	r1, [pc, #488]	; (8004e4c <main+0x69c>)
 8004c62:	487b      	ldr	r0, [pc, #492]	; (8004e50 <main+0x6a0>)
 8004c64:	f7fd fc5c 	bl	8002520 <chThdCreateStatic.constprop.0>
  chThdCreateStatic(waListener2, sizeof(waListener2), NORMALPRIO, Listener2, NULL);
 8004c68:	497a      	ldr	r1, [pc, #488]	; (8004e54 <main+0x6a4>)
 8004c6a:	487b      	ldr	r0, [pc, #492]	; (8004e58 <main+0x6a8>)
 8004c6c:	f7fd fc58 	bl	8002520 <chThdCreateStatic.constprop.0>
  chThdCreateStatic(waListener3, sizeof(waListener3), NORMALPRIO, Listener3, NULL);
 8004c70:	497a      	ldr	r1, [pc, #488]	; (8004e5c <main+0x6ac>)
 8004c72:	487b      	ldr	r0, [pc, #492]	; (8004e60 <main+0x6b0>)
 8004c74:	f7fd fc54 	bl	8002520 <chThdCreateStatic.constprop.0>

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);

  /* Start of the free blocks list.*/
  qp = &heapp->header;
 8004c78:	f1a9 0a08 	sub.w	sl, r9, #8
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
#if USB_SHELL == 1
    if (SHELLPORT.config->usbp->state == USB_ACTIVE) {
 8004c7c:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	f040 80a0 	bne.w	8004dca <main+0x61a>
      /* Starting shells.*/
      if (shelltp == NULL) {
 8004c8a:	b344      	cbz	r4, 8004cde <main+0x52e>
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8004c8c:	697d      	ldr	r5, [r7, #20]
 8004c8e:	2320      	movs	r3, #32
 8004c90:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8004c94:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8004c96:	07da      	lsls	r2, r3, #31
 8004c98:	f140 809c 	bpl.w	8004dd4 <main+0x624>
 8004c9c:	f06f 0201 	mvn.w	r2, #1
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTOREVT);
    m = ctp->epending & events;
  }
  ctp->epending &= ~m;
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	636b      	str	r3, [r5, #52]	; 0x34
 8004ca4:	2500      	movs	r5, #0
 8004ca6:	f385 8811 	msr	BASEPRI, r5
                                       "shell1", NORMALPRIO + 1,
                                       shellThread, (void *)&shell_cfg1);
      }
    //chThdWait(shelltp);               /* Waiting termination.             */
    chEvtWaitAny(EVENT_MASK(0));
    if (chThdTerminatedX(shelltp)) {
 8004caa:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004cae:	2b0f      	cmp	r3, #15
 8004cb0:	d1e4      	bne.n	8004c7c <main+0x4cc>
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f382 8811 	msr	BASEPRI, r2
  tp->refs--;
 8004cb8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8004cc2:	6a23      	ldr	r3, [r4, #32]
 8004cc4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8004cc8:	2b0f      	cmp	r3, #15
 8004cca:	f000 808d 	beq.w	8004de8 <main+0x638>
 8004cce:	f385 8811 	msr	BASEPRI, r5
    if (SHELLPORT.config->usbp->state == USB_ACTIVE) {
 8004cd2:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d156      	bne.n	8004d8c <main+0x5dc>
 8004cde:	2320      	movs	r3, #32
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	4648      	mov	r0, r9
 8004ce6:	f7fd fc73 	bl	80025d0 <chMtxLockS>
 8004cea:	2300      	movs	r3, #0
 8004cec:	f383 8811 	msr	BASEPRI, r3
  while (H_NEXT(qp) != NULL) {
 8004cf0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004cf4:	b1d2      	cbz	r2, 8004d2c <main+0x57c>
  qp = &heapp->header;
 8004cf6:	4650      	mov	r0, sl
 8004cf8:	e000      	b.n	8004cfc <main+0x54c>
  while (H_NEXT(qp) != NULL) {
 8004cfa:	461a      	mov	r2, r3
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004cfc:	6851      	ldr	r1, [r2, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8004cfe:	f102 030f 	add.w	r3, r2, #15
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004d02:	1c4d      	adds	r5, r1, #1
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8004d04:	f023 0307 	bic.w	r3, r3, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004d08:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004d0c:	eba5 0c03 	sub.w	ip, r5, r3
 8004d10:	461c      	mov	r4, r3
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8004d12:	3b08      	subs	r3, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004d14:	42ab      	cmp	r3, r5
 8004d16:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8004d1a:	d203      	bcs.n	8004d24 <main+0x574>
 8004d1c:	f5bc 7f8c 	cmp.w	ip, #280	; 0x118
 8004d20:	f200 80a8 	bhi.w	8004e74 <main+0x6c4>
  while (H_NEXT(qp) != NULL) {
 8004d24:	6813      	ldr	r3, [r2, #0]
 8004d26:	4610      	mov	r0, r2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e6      	bne.n	8004cfa <main+0x54a>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8004d2c:	4648      	mov	r0, r9
 8004d2e:	f7ff fd0f 	bl	8004750 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 8004d32:	f8d8 3000 	ldr.w	r3, [r8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 80b9 	beq.w	8004eae <main+0x6fe>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	4611      	mov	r1, r2
 8004d40:	f640 00c8 	movw	r0, #2248	; 0x8c8
 8004d44:	4798      	blx	r3
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 8004d46:	4604      	mov	r4, r0
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	f000 80b0 	beq.w	8004eae <main+0x6fe>
      hp = ahp - 1U;
      H_HEAP(hp) = heapp;
      H_SIZE(hp) = size;
 8004d4e:	f640 03c8 	movw	r3, #2248	; 0x8c8
 8004d52:	e940 8302 	strd	r8, r3, [r0, #-8]
  }

  thread_descriptor_t td = {
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + size),
 8004d56:	f604 02c8 	addw	r2, r4, #2248	; 0x8c8
  thread_descriptor_t td = {
 8004d5a:	920c      	str	r2, [sp, #48]	; 0x30
 8004d5c:	4a41      	ldr	r2, [pc, #260]	; (8004e64 <main+0x6b4>)
 8004d5e:	920e      	str	r2, [sp, #56]	; 0x38
 8004d60:	2381      	movs	r3, #129	; 0x81
 8004d62:	4a41      	ldr	r2, [pc, #260]	; (8004e68 <main+0x6b8>)
 8004d64:	930d      	str	r3, [sp, #52]	; 0x34
 8004d66:	e9cd b40a 	strd	fp, r4, [sp, #40]	; 0x28
 8004d6a:	920f      	str	r2, [sp, #60]	; 0x3c
 8004d6c:	2320      	movs	r3, #32
 8004d6e:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 8004d72:	a80a      	add	r0, sp, #40	; 0x28
 8004d74:	f7fc fd1c 	bl	80017b0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp = chThdCreateSuspendedI(&td);
 8004d7e:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8004d80:	f7fd fb9e 	bl	80024c0 <chSchWakeupS.constprop.0>
 8004d84:	2300      	movs	r3, #0
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	e77f      	b.n	8004c8c <main+0x4dc>
    }
#endif
    /* Waiting for an exit event then freeing terminated shells.*/
    }
    else{
      chThdSleepMilliseconds(1000);
 8004d8c:	f242 7010 	movw	r0, #10000	; 0x2710
 8004d90:	f7fd fe86 	bl	8002aa0 <chThdSleep>
    if (SHELLPORT.config->usbp->state == USB_ACTIVE) {
 8004d94:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d09e      	beq.n	8004cde <main+0x52e>
      chThdSleepMilliseconds(1000);
 8004da0:	f242 7010 	movw	r0, #10000	; 0x2710
 8004da4:	f7fd fe7c 	bl	8002aa0 <chThdSleep>
    if (SHELLPORT.config->usbp->state == USB_ACTIVE) {
 8004da8:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d094      	beq.n	8004cde <main+0x52e>
      chThdSleepMilliseconds(1000);
 8004db4:	f242 7010 	movw	r0, #10000	; 0x2710
 8004db8:	f7fd fe72 	bl	8002aa0 <chThdSleep>
    if (SHELLPORT.config->usbp->state == USB_ACTIVE) {
 8004dbc:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d08a      	beq.n	8004cde <main+0x52e>
      shelltp = NULL;
 8004dc8:	2400      	movs	r4, #0
      chThdSleepMilliseconds(1000);
 8004dca:	f242 7010 	movw	r0, #10000	; 0x2710
 8004dce:	f7fd fe67 	bl	8002aa0 <chThdSleep>
 8004dd2:	e753      	b.n	8004c7c <main+0x4cc>
    ctp->u.ewmask = events;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	626b      	str	r3, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8004dd8:	200a      	movs	r0, #10
 8004dda:	f7fd fbe1 	bl	80025a0 <chSchGoSleepS>
    m = ctp->epending & events;
 8004dde:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004de0:	f003 0201 	and.w	r2, r3, #1
 8004de4:	43d2      	mvns	r2, r2
 8004de6:	e75b      	b.n	8004ca0 <main+0x4f0>
    REG_REMOVE(tp);
 8004de8:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 8004dec:	60d9      	str	r1, [r3, #12]
 8004dee:	68e1      	ldr	r1, [r4, #12]
 8004df0:	610b      	str	r3, [r1, #16]
 8004df2:	f385 8811 	msr	BASEPRI, r5
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8004df6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d06b      	beq.n	8004eda <main+0x72a>
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	f47f af65 	bne.w	8004cd2 <main+0x522>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8004e08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e0a:	69e1      	ldr	r1, [r4, #28]
 8004e0c:	f382 8811 	msr	BASEPRI, r2
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	600a      	str	r2, [r1, #0]
  mp->next = php;
 8004e14:	6019      	str	r1, [r3, #0]
 8004e16:	e75a      	b.n	8004cce <main+0x51e>
 8004e18:	200013ac 	.word	0x200013ac
 8004e1c:	40020800 	.word	0x40020800
 8004e20:	080065c0 	.word	0x080065c0
 8004e24:	080021a1 	.word	0x080021a1
 8004e28:	08002241 	.word	0x08002241
 8004e2c:	08006470 	.word	0x08006470
 8004e30:	0800648c 	.word	0x0800648c
 8004e34:	40020000 	.word	0x40020000
 8004e38:	20000ef4 	.word	0x20000ef4
 8004e3c:	20000c98 	.word	0x20000c98
 8004e40:	20001cb8 	.word	0x20001cb8
 8004e44:	08003ae1 	.word	0x08003ae1
 8004e48:	20002098 	.word	0x20002098
 8004e4c:	08003c81 	.word	0x08003c81
 8004e50:	20001cc0 	.word	0x20001cc0
 8004e54:	08003cc1 	.word	0x08003cc1
 8004e58:	20001e08 	.word	0x20001e08
 8004e5c:	08003d01 	.word	0x08003d01
 8004e60:	20001f50 	.word	0x20001f50
 8004e64:	08003e41 	.word	0x08003e41
 8004e68:	08006478 	.word	0x08006478
 8004e6c:	20001a54 	.word	0x20001a54
 8004e70:	08006300 	.word	0x08006300
      if (ahp > hp) {
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d91c      	bls.n	8004eb2 <main+0x702>
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004e78:	f102 0108 	add.w	r1, r2, #8
 8004e7c:	1a59      	subs	r1, r3, r1
        if (bpages > pages) {
 8004e7e:	f240 1019 	movw	r0, #281	; 0x119
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004e82:	10c9      	asrs	r1, r1, #3
        if (bpages > pages) {
 8004e84:	4584      	cmp	ip, r0
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 8004e86:	6051      	str	r1, [r2, #4]
        if (bpages > pages) {
 8004e88:	d009      	beq.n	8004e9e <main+0x6ee>
          H_PAGES(fp) = (bpages - pages) - 1U;
 8004e8a:	f5ac 718d 	sub.w	r1, ip, #282	; 0x11a
          H_NEXT(fp) = H_NEXT(hp);
 8004e8e:	6810      	ldr	r0, [r2, #0]
          H_PAGES(fp) = (bpages - pages) - 1U;
 8004e90:	f8c3 18d4 	str.w	r1, [r3, #2260]	; 0x8d4
          fp = H_BLOCK(ahp) + pages;
 8004e94:	f604 01c8 	addw	r1, r4, #2248	; 0x8c8
          H_NEXT(fp) = H_NEXT(hp);
 8004e98:	f8c3 08d0 	str.w	r0, [r3, #2256]	; 0x8d0
          H_NEXT(hp) = fp;
 8004e9c:	6011      	str	r1, [r2, #0]
      H_SIZE(hp) = size;
 8004e9e:	f640 02c8 	movw	r2, #2248	; 0x8c8
 8004ea2:	e9c3 8200 	strd	r8, r2, [r3]
      H_UNLOCK(heapp);
 8004ea6:	4648      	mov	r0, r9
 8004ea8:	f7ff fc52 	bl	8004750 <chMtxUnlock>
 8004eac:	e753      	b.n	8004d56 <main+0x5a6>
    return NULL;
 8004eae:	2400      	movs	r4, #0
 8004eb0:	e6ec      	b.n	8004c8c <main+0x4dc>
        if (H_PAGES(hp) == pages) {
 8004eb2:	f240 1319 	movw	r3, #281	; 0x119
 8004eb6:	4299      	cmp	r1, r3
 8004eb8:	d046      	beq.n	8004f48 <main+0x798>
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8004eba:	f602 03d8 	addw	r3, r2, #2264	; 0x8d8
 8004ebe:	1aeb      	subs	r3, r5, r3
 8004ec0:	10db      	asrs	r3, r3, #3
          H_NEXT(fp) = H_NEXT(hp);
 8004ec2:	6811      	ldr	r1, [r2, #0]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 8004ec4:	f8c2 38d4 	str.w	r3, [r2, #2260]	; 0x8d4
          fp = H_BLOCK(hp) + pages;
 8004ec8:	f502 630d 	add.w	r3, r2, #2256	; 0x8d0
          H_NEXT(fp) = H_NEXT(hp);
 8004ecc:	f8c2 18d0 	str.w	r1, [r2, #2256]	; 0x8d0
 8004ed0:	f102 0408 	add.w	r4, r2, #8
          H_NEXT(qp) = fp;
 8004ed4:	6003      	str	r3, [r0, #0]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	e7e1      	b.n	8004e9e <main+0x6ee>
      chHeapFree(chThdGetWorkingAreaX(tp));
 8004eda:	69e1      	ldr	r1, [r4, #28]
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
 8004edc:	9102      	str	r1, [sp, #8]
  /*lint -restore*/
  heapp = H_HEAP(hp);
 8004ede:	e951 0302 	ldrd	r0, r3, [r1, #-8]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8004ee2:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8004ee4:	08db      	lsrs	r3, r3, #3
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8004ee6:	f841 3c04 	str.w	r3, [r1, #-4]
  qp = &heapp->header;
 8004eea:	1d03      	adds	r3, r0, #4
 8004eec:	9303      	str	r3, [sp, #12]

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8004eee:	300c      	adds	r0, #12
  hp = (heap_header_t *)p - 1U;
 8004ef0:	f1a1 0408 	sub.w	r4, r1, #8
 8004ef4:	f382 8811 	msr	BASEPRI, r2
 8004ef8:	9001      	str	r0, [sp, #4]
 8004efa:	f7fd fb69 	bl	80025d0 <chMtxLockS>
 8004efe:	f385 8811 	msr	BASEPRI, r5
  qp = &heapp->header;
 8004f02:	9b03      	ldr	r3, [sp, #12]
 8004f04:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
 8004f08:	461a      	mov	r2, r3

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 8004f0a:	4293      	cmp	r3, r2
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8004f0c:	6815      	ldr	r5, [r2, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 8004f0e:	d001      	beq.n	8004f14 <main+0x764>
 8004f10:	4294      	cmp	r4, r2
 8004f12:	d902      	bls.n	8004f1a <main+0x76a>
 8004f14:	b11d      	cbz	r5, 8004f1e <main+0x76e>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8004f16:	42ac      	cmp	r4, r5
 8004f18:	d301      	bcc.n	8004f1e <main+0x76e>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
        H_NEXT(qp) = H_NEXT(hp);
      }
      break;
    }
    qp = H_NEXT(qp);
 8004f1a:	462a      	mov	r2, r5
 8004f1c:	e7f5      	b.n	8004f0a <main+0x75a>
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8004f1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
      H_NEXT(hp) = H_NEXT(qp);
 8004f22:	f841 5c08 	str.w	r5, [r1, #-8]
      H_NEXT(qp) = hp;
 8004f26:	6014      	str	r4, [r2, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8004f28:	f851 5c08 	ldr.w	r5, [r1, #-8]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	eb04 0cc3 	add.w	ip, r4, r3, lsl #3
 8004f32:	4565      	cmp	r5, ip
 8004f34:	d015      	beq.n	8004f62 <main+0x7b2>
      if ((H_LIMIT(qp) == hp)) {
 8004f36:	6855      	ldr	r5, [r2, #4]
 8004f38:	1c6b      	adds	r3, r5, #1
 8004f3a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f3e:	429c      	cmp	r4, r3
 8004f40:	d008      	beq.n	8004f54 <main+0x7a4>
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8004f42:	f7ff fc05 	bl	8004750 <chMtxUnlock>
    if (SHELLPORT.config->usbp->state == USB_ACTIVE) {
 8004f46:	e6c4      	b.n	8004cd2 <main+0x522>
          H_NEXT(qp) = H_NEXT(hp);
 8004f48:	4614      	mov	r4, r2
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	f854 2b08 	ldr.w	r2, [r4], #8
 8004f50:	6002      	str	r2, [r0, #0]
 8004f52:	e7a4      	b.n	8004e9e <main+0x6ee>
        H_NEXT(qp) = H_NEXT(hp);
 8004f54:	e951 1302 	ldrd	r1, r3, [r1, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8004f58:	3301      	adds	r3, #1
 8004f5a:	441d      	add	r5, r3
        H_NEXT(qp) = H_NEXT(hp);
 8004f5c:	6011      	str	r1, [r2, #0]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8004f5e:	6055      	str	r5, [r2, #4]
        H_NEXT(qp) = H_NEXT(hp);
 8004f60:	e7ef      	b.n	8004f42 <main+0x792>
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8004f62:	e9d5 5c00 	ldrd	r5, ip, [r5]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8004f66:	4463      	add	r3, ip
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8004f68:	f841 5c08 	str.w	r5, [r1, #-8]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8004f6c:	f841 3c04 	str.w	r3, [r1, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8004f70:	e7e1      	b.n	8004f36 <main+0x786>
      rccEnableOTG_FS(true);
 8004f72:	4b3f      	ldr	r3, [pc, #252]	; (8005070 <main+0x8c0>)
  stm32_otg_t *otgp = usbp->otg;
 8004f74:	6d6c      	ldr	r4, [r5, #84]	; 0x54
      rccEnableOTG_FS(true);
 8004f76:	6b59      	ldr	r1, [r3, #52]	; 0x34
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004f78:	4a3e      	ldr	r2, [pc, #248]	; (8005074 <main+0x8c4>)
 8004f7a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004f7e:	6359      	str	r1, [r3, #52]	; 0x34
 8004f80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f82:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004f86:	6559      	str	r1, [r3, #84]	; 0x54
 8004f88:	6d59      	ldr	r1, [r3, #84]	; 0x54
      rccResetOTG_FS();
 8004f8a:	6959      	ldr	r1, [r3, #20]
 8004f8c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004f90:	6159      	str	r1, [r3, #20]
 8004f92:	6959      	ldr	r1, [r3, #20]
 8004f94:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004f98:	6159      	str	r1, [r3, #20]
 8004f9a:	695b      	ldr	r3, [r3, #20]
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8004f9c:	4936      	ldr	r1, [pc, #216]	; (8005078 <main+0x8c8>)
 8004f9e:	23e0      	movs	r3, #224	; 0xe0
 8004fa0:	f882 3343 	strb.w	r3, [r2, #835]	; 0x343
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004faa:	6093      	str	r3, [r2, #8]
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 8004fac:	4b33      	ldr	r3, [pc, #204]	; (800507c <main+0x8cc>)
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8004fae:	60e1      	str	r1, [r4, #12]
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8004fb0:	22c0      	movs	r2, #192	; 0xc0
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 8004fb2:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8004fb6:	f44f 1334 	mov.w	r3, #2949120	; 0x2d0000
    otgp->PCGCCTL = 0;
 8004fba:	f8c4 9e00 	str.w	r9, [r4, #3584]	; 0xe00
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8004fbe:	6022      	str	r2, [r4, #0]
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8004fc0:	63a3      	str	r3, [r4, #56]	; 0x38
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8004fc2:	6923      	ldr	r3, [r4, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	dafc      	bge.n	8004fc2 <main+0x812>
  otgp->GRSTCTL = GRSTCTL_CSRST;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	6123      	str	r3, [r4, #16]
  chSysPolledDelayX(cycles);
 8004fcc:	200c      	movs	r0, #12
 8004fce:	f7fc fcd7 	bl	8001980 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 8004fd2:	6923      	ldr	r3, [r4, #16]
 8004fd4:	f013 0901 	ands.w	r9, r3, #1
 8004fd8:	d1fb      	bne.n	8004fd2 <main+0x822>
 8004fda:	2012      	movs	r0, #18
 8004fdc:	f7fc fcd0 	bl	8001980 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8004fe0:	6923      	ldr	r3, [r4, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	dafc      	bge.n	8004fe0 <main+0x830>
    otg_disable_ep(usbp);
 8004fe6:	e9d5 1315 	ldrd	r1, r3, [r5, #84]	; 0x54
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004fea:	f8d3 e008 	ldr.w	lr, [r3, #8]
    otgp->GAHBCFG = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60a3      	str	r3, [r4, #8]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004ff2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8004ff6:	e000      	b.n	8004ffa <main+0x84a>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004ff8:	46d1      	mov	r9, sl
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004ffa:	eb01 1249 	add.w	r2, r1, r9, lsl #5
 8004ffe:	4613      	mov	r3, r2
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8005000:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8005004:	2800      	cmp	r0, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005006:	f109 0a01 	add.w	sl, r9, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 800500a:	da05      	bge.n	8005018 <main+0x868>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 800500c:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8005010:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005014:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 8005018:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 800501c:	2800      	cmp	r0, #0
 800501e:	da05      	bge.n	800502c <main+0x87c>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 8005020:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 8005024:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005028:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800502c:	45ce      	cmp	lr, r9
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800502e:	f8c3 c908 	str.w	ip, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8005032:	f8c3 cb08 	str.w	ip, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005036:	d1df      	bne.n	8004ff8 <main+0x848>
    if (usbp->config->sof_cb == NULL)
 8005038:	686b      	ldr	r3, [r5, #4]
 800503a:	68da      	ldr	r2, [r3, #12]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800503c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8005040:	f8c1 381c 	str.w	r3, [r1, #2076]	; 0x81c
    otgp->DIEPMSK  = 0;
 8005044:	2300      	movs	r3, #0
 8005046:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
 800504a:	f8c4 3814 	str.w	r3, [r4, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 800504e:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 8005052:	b14a      	cbz	r2, 8005068 <main+0x8b8>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8005054:	4b0a      	ldr	r3, [pc, #40]	; (8005080 <main+0x8d0>)
 8005056:	61a3      	str	r3, [r4, #24]
    otgp->GINTSTS  = 0xFFFFFFFF;
 8005058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800505c:	6163      	str	r3, [r4, #20]
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 800505e:	68a3      	ldr	r3, [r4, #8]
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	60a3      	str	r3, [r4, #8]
 8005066:	e5be      	b.n	8004be6 <main+0x436>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8005068:	4b06      	ldr	r3, [pc, #24]	; (8005084 <main+0x8d4>)
 800506a:	61a3      	str	r3, [r4, #24]
 800506c:	e7f4      	b.n	8005058 <main+0x8a8>
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800
 8005074:	e000e100 	.word	0xe000e100
 8005078:	40001440 	.word	0x40001440
 800507c:	02200003 	.word	0x02200003
 8005080:	c0303c08 	.word	0xc0303c08
 8005084:	c0303c00 	.word	0xc0303c00
	...

08005090 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8005090:	4b68      	ldr	r3, [pc, #416]	; (8005234 <__early_init+0x1a4>)
  gpiop->PUPDR   = config->pupdr;
 8005092:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 800527c <__early_init+0x1ec>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8005096:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8005098:	4867      	ldr	r0, [pc, #412]	; (8005238 <__early_init+0x1a8>)
 800509a:	4968      	ldr	r1, [pc, #416]	; (800523c <__early_init+0x1ac>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 800509c:	f042 021f 	orr.w	r2, r2, #31
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 80050a0:	b4f0      	push	{r4, r5, r6, r7}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80050a2:	611a      	str	r2, [r3, #16]
 80050a4:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 80050a6:	4d66      	ldr	r5, [pc, #408]	; (8005240 <__early_init+0x1b0>)
  gpiop->AFRL    = config->afrl;
 80050a8:	4f66      	ldr	r7, [pc, #408]	; (8005244 <__early_init+0x1b4>)
  gpiop->OTYPER  = config->otyper;
 80050aa:	4c67      	ldr	r4, [pc, #412]	; (8005248 <__early_init+0x1b8>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80050ac:	f022 021f 	bic.w	r2, r2, #31
 80050b0:	611a      	str	r2, [r3, #16]
 80050b2:	691a      	ldr	r2, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80050b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b6:	f042 021f 	orr.w	r2, r2, #31
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30
 80050bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050be:	f042 021f 	orr.w	r2, r2, #31
 80050c2:	651a      	str	r2, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 80050c4:	f44f 7280 	mov.w	r2, #256	; 0x100
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80050c8:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 80050ca:	606a      	str	r2, [r5, #4]
  gpiop->ODR     = config->odr;
 80050cc:	f64f 76ff 	movw	r6, #65535	; 0xffff
  gpiop->OSPEEDR = config->ospeedr;
 80050d0:	f06f 0250 	mvn.w	r2, #80	; 0x50
 80050d4:	60aa      	str	r2, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 80050d6:	f8c5 c00c 	str.w	ip, [r5, #12]
  gpiop->AFRH    = config->afrh;
 80050da:	f44f 222a 	mov.w	r2, #696320	; 0xaa000
  gpiop->ODR     = config->odr;
 80050de:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 80050e0:	622f      	str	r7, [r5, #32]
  gpiop->MODER   = config->moder;
 80050e2:	4f5a      	ldr	r7, [pc, #360]	; (800524c <__early_init+0x1bc>)
  gpiop->AFRH    = config->afrh;
 80050e4:	626a      	str	r2, [r5, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
 80050e6:	2200      	movs	r2, #0
  gpiop->MODER   = config->moder;
 80050e8:	602f      	str	r7, [r5, #0]
  gpiop->OSPEEDR = config->ospeedr;
 80050ea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  gpiop->PUPDR   = config->pupdr;
 80050ee:	4f58      	ldr	r7, [pc, #352]	; (8005250 <__early_init+0x1c0>)
  gpiop->OTYPER  = config->otyper;
 80050f0:	6042      	str	r2, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80050f2:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80050f4:	60c7      	str	r7, [r0, #12]
  gpiop->MODER   = config->moder;
 80050f6:	2780      	movs	r7, #128	; 0x80
  gpiop->ODR     = config->odr;
 80050f8:	6146      	str	r6, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80050fa:	6202      	str	r2, [r0, #32]
  gpiop->AFRH    = config->afrh;
 80050fc:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80050fe:	6007      	str	r7, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
 8005100:	4f54      	ldr	r7, [pc, #336]	; (8005254 <__early_init+0x1c4>)
  gpiop->OTYPER  = config->otyper;
 8005102:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005104:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8005106:	60cf      	str	r7, [r1, #12]
  gpiop->MODER   = config->moder;
 8005108:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
  gpiop->ODR     = config->odr;
 800510c:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 800510e:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8005110:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005112:	600f      	str	r7, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8005114:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
  gpiop->PUPDR   = config->pupdr;
 8005118:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
  gpiop->OTYPER  = config->otyper;
 800511c:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800511e:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8005120:	60e7      	str	r7, [r4, #12]
  gpiop->ODR     = config->odr;
 8005122:	6166      	str	r6, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8005124:	6222      	str	r2, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8005126:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005128:	6022      	str	r2, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 800512a:	f8c0 2c04 	str.w	r2, [r0, #3076]	; 0xc04
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800512e:	f5a4 34ce 	sub.w	r4, r4, #105472	; 0x19c00
  gpiop->OSPEEDR = config->ospeedr;
 8005132:	f8c0 5c08 	str.w	r5, [r0, #3080]	; 0xc08
  gpiop->PUPDR   = config->pupdr;
 8005136:	f8c0 7c0c 	str.w	r7, [r0, #3084]	; 0xc0c
  gpiop->ODR     = config->odr;
 800513a:	f8c0 6c14 	str.w	r6, [r0, #3092]	; 0xc14
  gpiop->AFRL    = config->afrl;
 800513e:	f8c0 2c20 	str.w	r2, [r0, #3104]	; 0xc20
  gpiop->AFRH    = config->afrh;
 8005142:	f8c0 2c24 	str.w	r2, [r0, #3108]	; 0xc24
  gpiop->MODER   = config->moder;
 8005146:	f8c0 2c00 	str.w	r2, [r0, #3072]	; 0xc00
  gpiop->PUPDR   = config->pupdr;
 800514a:	4843      	ldr	r0, [pc, #268]	; (8005258 <__early_init+0x1c8>)
  gpiop->OTYPER  = config->otyper;
 800514c:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800514e:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8005150:	60c8      	str	r0, [r1, #12]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8005152:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 8005156:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  gpiop->ODR     = config->odr;
 800515a:	614e      	str	r6, [r1, #20]
  gpiop->AFRL    = config->afrl;
 800515c:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800515e:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005160:	600a      	str	r2, [r1, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8005162:	641d      	str	r5, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8005164:	6020      	str	r0, [r4, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	f042 0201 	orr.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	0796      	lsls	r6, r2, #30
 8005172:	d5fc      	bpl.n	800516e <__early_init+0xde>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8005174:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8005176:	4a2f      	ldr	r2, [pc, #188]	; (8005234 <__early_init+0x1a4>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8005178:	f021 0103 	bic.w	r1, r1, #3
 800517c:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800517e:	6893      	ldr	r3, [r2, #8]
 8005180:	f013 030c 	ands.w	r3, r3, #12
 8005184:	d1fb      	bne.n	800517e <__early_init+0xee>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8005186:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8005188:	492a      	ldr	r1, [pc, #168]	; (8005234 <__early_init+0x1a4>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800518a:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 800518e:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8005190:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON;
 8005192:	6813      	ldr	r3, [r2, #0]
 8005194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005198:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800519a:	680b      	ldr	r3, [r1, #0]
 800519c:	039d      	lsls	r5, r3, #14
 800519e:	d5fc      	bpl.n	800519a <__early_init+0x10a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80051a0:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80051a2:	4b24      	ldr	r3, [pc, #144]	; (8005234 <__early_init+0x1a4>)
  RCC->CSR |= RCC_CSR_LSION;
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	674a      	str	r2, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80051aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80051ac:	0794      	lsls	r4, r2, #30
 80051ae:	d5fc      	bpl.n	80051aa <__early_init+0x11a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80051b0:	4a2a      	ldr	r2, [pc, #168]	; (800525c <__early_init+0x1cc>)
 80051b2:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80051b4:	681a      	ldr	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80051b6:	492a      	ldr	r1, [pc, #168]	; (8005260 <__early_init+0x1d0>)
  RCC->CR |= RCC_CR_PLLON;
 80051b8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80051bc:	601a      	str	r2, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80051be:	684b      	ldr	r3, [r1, #4]
 80051c0:	0458      	lsls	r0, r3, #17
 80051c2:	d5fc      	bpl.n	80051be <__early_init+0x12e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80051c4:	4b1b      	ldr	r3, [pc, #108]	; (8005234 <__early_init+0x1a4>)
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	0192      	lsls	r2, r2, #6
 80051ca:	d5fc      	bpl.n	80051c6 <__early_init+0x136>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80051cc:	4925      	ldr	r1, [pc, #148]	; (8005264 <__early_init+0x1d4>)
 80051ce:	6099      	str	r1, [r3, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80051d0:	4a25      	ldr	r2, [pc, #148]	; (8005268 <__early_init+0x1d8>)
    RCC->DCKCFGR = dckcfgr |
 80051d2:	2103      	movs	r1, #3
 80051d4:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80051d8:	6812      	ldr	r2, [r2, #0]
 80051da:	4b24      	ldr	r3, [pc, #144]	; (800526c <__early_init+0x1dc>)
 80051dc:	429a      	cmp	r2, r3
 80051de:	d01e      	beq.n	800521e <__early_init+0x18e>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80051e0:	4b23      	ldr	r3, [pc, #140]	; (8005270 <__early_init+0x1e0>)
 80051e2:	f240 7202 	movw	r2, #1794	; 0x702
 80051e6:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 80051e8:	4a21      	ldr	r2, [pc, #132]	; (8005270 <__early_init+0x1e0>)
 80051ea:	6813      	ldr	r3, [r2, #0]
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d1fa      	bne.n	80051ea <__early_init+0x15a>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80051f4:	4b0f      	ldr	r3, [pc, #60]	; (8005234 <__early_init+0x1a4>)
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	f042 0202 	orr.w	r2, r2, #2
 80051fc:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	f002 020c 	and.w	r2, r2, #12
 8005204:	2a08      	cmp	r2, #8
 8005206:	d1fa      	bne.n	80051fe <__early_init+0x16e>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8005208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800520a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800520e:	645a      	str	r2, [r3, #68]	; 0x44
 8005210:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005216:	665a      	str	r2, [r3, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8005218:	bcf0      	pop	{r4, r5, r6, r7}
 800521a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800521c:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800521e:	4a15      	ldr	r2, [pc, #84]	; (8005274 <__early_init+0x1e4>)
 8005220:	4b15      	ldr	r3, [pc, #84]	; (8005278 <__early_init+0x1e8>)
 8005222:	6812      	ldr	r2, [r2, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d1db      	bne.n	80051e0 <__early_init+0x150>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8005228:	4b11      	ldr	r3, [pc, #68]	; (8005270 <__early_init+0x1e0>)
 800522a:	f44f 7281 	mov.w	r2, #258	; 0x102
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	e7da      	b.n	80051e8 <__early_init+0x158>
 8005232:	bf00      	nop
 8005234:	40023800 	.word	0x40023800
 8005238:	40020400 	.word	0x40020400
 800523c:	40020800 	.word	0x40020800
 8005240:	40020000 	.word	0x40020000
 8005244:	55507700 	.word	0x55507700
 8005248:	40020c00 	.word	0x40020c00
 800524c:	2a80a9a0 	.word	0x2a80a9a0
 8005250:	55555455 	.word	0x55555455
 8005254:	01555555 	.word	0x01555555
 8005258:	55555550 	.word	0x55555550
 800525c:	07415419 	.word	0x07415419
 8005260:	40007000 	.word	0x40007000
 8005264:	38881000 	.word	0x38881000
 8005268:	e0042000 	.word	0xe0042000
 800526c:	20006411 	.word	0x20006411
 8005270:	40023c00 	.word	0x40023c00
 8005274:	e000ed00 	.word	0xe000ed00
 8005278:	410fc241 	.word	0x410fc241
 800527c:	64150005 	.word	0x64150005

08005280 <Vector15C>:
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 8005280:	b508      	push	{r3, lr}
  serve_interrupt(&SD6);
 8005282:	4803      	ldr	r0, [pc, #12]	; (8005290 <Vector15C+0x10>)
 8005284:	f7fc fb94 	bl	80019b0 <serve_interrupt>
}
 8005288:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800528c:	f7fc ba20 	b.w	80016d0 <_port_irq_epilogue>
 8005290:	20001150 	.word	0x20001150
	...

080052a0 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80052a0:	b508      	push	{r3, lr}
  serve_interrupt(&SD2);
 80052a2:	4803      	ldr	r0, [pc, #12]	; (80052b0 <VectorD8+0x10>)
 80052a4:	f7fc fb84 	bl	80019b0 <serve_interrupt>
}
 80052a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80052ac:	f7fc ba10 	b.w	80016d0 <_port_irq_epilogue>
 80052b0:	20000ef4 	.word	0x20000ef4
	...

080052c0 <VectorD4>:
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 80052c0:	b508      	push	{r3, lr}
  serve_interrupt(&SD1);
 80052c2:	4803      	ldr	r0, [pc, #12]	; (80052d0 <VectorD4+0x10>)
 80052c4:	f7fc fb74 	bl	80019b0 <serve_interrupt>
}
 80052c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80052cc:	f7fc ba00 	b.w	80016d0 <_port_irq_epilogue>
 80052d0:	20000c98 	.word	0x20000c98
	...

080052e0 <VectorB0>:
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 80052e0:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD2);
 80052e2:	4803      	ldr	r0, [pc, #12]	; (80052f0 <VectorB0+0x10>)
 80052e4:	f7fc fc2c 	bl	8001b40 <icu_lld_serve_interrupt>
}
 80052e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80052ec:	f7fc b9f0 	b.w	80016d0 <_port_irq_epilogue>
 80052f0:	20000c80 	.word	0x20000c80
	...

08005300 <VectorA4>:
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8005300:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD1);
 8005302:	4803      	ldr	r0, [pc, #12]	; (8005310 <VectorA4+0x10>)
 8005304:	f7fc fc1c 	bl	8001b40 <icu_lld_serve_interrupt>
}
 8005308:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800530c:	f7fc b9e0 	b.w	80016d0 <_port_irq_epilogue>
 8005310:	20000c68 	.word	0x20000c68
	...

08005320 <VectorAC>:
 8005320:	f7ff bfee 	b.w	8005300 <VectorA4>
	...

08005330 <Vector108>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8005330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8005334:	4c28      	ldr	r4, [pc, #160]	; (80053d8 <Vector108+0xa8>)
 8005336:	6923      	ldr	r3, [r4, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8005338:	68e2      	ldr	r2, [r4, #12]
 800533a:	4013      	ands	r3, r2
 800533c:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 800533e:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8005340:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8005342:	6122      	str	r2, [r4, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8005344:	d403      	bmi.n	800534e <Vector108+0x1e>
}
 8005346:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800534a:	f7fc b9c1 	b.w	80016d0 <_port_irq_epilogue>
 800534e:	2320      	movs	r3, #32
 8005350:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8005354:	4d21      	ldr	r5, [pc, #132]	; (80053dc <Vector108+0xac>)
 8005356:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005358:	69ab      	ldr	r3, [r5, #24]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 800535a:	6a6a      	ldr	r2, [r5, #36]	; 0x24

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 800535c:	6899      	ldr	r1, [r3, #8]
  return (sysinterval_t)((systime_t)(end - start));
 800535e:	1abe      	subs	r6, r7, r2
 8005360:	42b1      	cmp	r1, r6
 8005362:	f105 0918 	add.w	r9, r5, #24
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8005366:	bf98      	it	ls
 8005368:	f04f 0800 	movls.w	r8, #0
    if (nowdelta < vtp->delta) {
 800536c:	d820      	bhi.n	80053b0 <Vector108+0x80>
 800536e:	2720      	movs	r7, #32
 8005370:	e000      	b.n	8005374 <Vector108+0x44>
 8005372:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8005374:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 8005376:	440a      	add	r2, r1

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8005378:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 800537a:	626a      	str	r2, [r5, #36]	; 0x24
      nowdelta -= vtp->delta;
 800537c:	eba6 0601 	sub.w	r6, r6, r1
      fn = vtp->func;
 8005380:	68da      	ldr	r2, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8005382:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 8005386:	61a8      	str	r0, [r5, #24]
      vtp->func = NULL;
 8005388:	f8c3 800c 	str.w	r8, [r3, #12]
  STM32_ST_TIM->DIER = 0U;
 800538c:	bf08      	it	eq
 800538e:	f8c4 800c 	streq.w	r8, [r4, #12]
 8005392:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8005396:	6918      	ldr	r0, [r3, #16]
 8005398:	4790      	blx	r2
 800539a:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 800539e:	69ab      	ldr	r3, [r5, #24]
    }
    while (vtp->delta <= nowdelta);
 80053a0:	6899      	ldr	r1, [r3, #8]
 80053a2:	428e      	cmp	r6, r1
 80053a4:	d2e5      	bcs.n	8005372 <Vector108+0x42>
  return (systime_t)STM32_ST_TIM->CNT;
 80053a6:	6a67      	ldr	r7, [r4, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80053a8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80053aa:	1abe      	subs	r6, r7, r2
    if (nowdelta < vtp->delta) {
 80053ac:	428e      	cmp	r6, r1
 80053ae:	d2de      	bcs.n	800536e <Vector108+0x3e>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80053b0:	454b      	cmp	r3, r9
 80053b2:	d00a      	beq.n	80053ca <Vector108+0x9a>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 80053b4:	6899      	ldr	r1, [r3, #8]
  ch.vtlist.lasttime += nowdelta;
 80053b6:	626f      	str	r7, [r5, #36]	; 0x24
  ch.vtlist.next->delta -= nowdelta;
 80053b8:	1bc9      	subs	r1, r1, r7
 80053ba:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80053bc:	4906      	ldr	r1, [pc, #24]	; (80053d8 <Vector108+0xa8>)
 80053be:	609a      	str	r2, [r3, #8]
  return systime + (systime_t)interval;
 80053c0:	2a02      	cmp	r2, #2
 80053c2:	bf2c      	ite	cs
 80053c4:	18bf      	addcs	r7, r7, r2
 80053c6:	3702      	addcc	r7, #2
 80053c8:	634f      	str	r7, [r1, #52]	; 0x34
 80053ca:	2300      	movs	r3, #0
 80053cc:	f383 8811 	msr	BASEPRI, r3
}
 80053d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 80053d4:	f7fc b97c 	b.w	80016d0 <_port_irq_epilogue>
 80053d8:	40000c00 	.word	0x40000c00
 80053dc:	2000189c 	.word	0x2000189c

080053e0 <Vector14C>:
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 80053e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  stm32_otg_t *otgp = usbp->otg;
 80053e4:	4c9f      	ldr	r4, [pc, #636]	; (8005664 <Vector14C+0x284>)
 80053e6:	6d66      	ldr	r6, [r4, #84]	; 0x54
  sts  = otgp->GINTSTS;
 80053e8:	6975      	ldr	r5, [r6, #20]
  sts &= otgp->GINTMSK;
 80053ea:	69b3      	ldr	r3, [r6, #24]
 80053ec:	401d      	ands	r5, r3
  if (sts & GINTSTS_USBRST) {
 80053ee:	f415 5880 	ands.w	r8, r5, #4096	; 0x1000
  otgp->GINTSTS = sts;
 80053f2:	6175      	str	r5, [r6, #20]
  if (sts & GINTSTS_USBRST) {
 80053f4:	f040 8138 	bne.w	8005668 <Vector14C+0x288>
  if (sts & GINTSTS_WKUPINT) {
 80053f8:	2d00      	cmp	r5, #0
 80053fa:	f2c0 80c2 	blt.w	8005582 <Vector14C+0x1a2>
  if (sts & GINTSTS_USBSUSP) {
 80053fe:	0529      	lsls	r1, r5, #20
 8005400:	d538      	bpl.n	8005474 <Vector14C+0x94>
    otg_disable_ep(usbp);
 8005402:	e9d4 7315 	ldrd	r7, r3, [r4, #84]	; 0x54
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005406:	2100      	movs	r1, #0
 8005408:	f8d3 9008 	ldr.w	r9, [r3, #8]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800540c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005410:	e000      	b.n	8005414 <Vector14C+0x34>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005412:	4671      	mov	r1, lr
 8005414:	eb07 1241 	add.w	r2, r7, r1, lsl #5
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8005418:	4613      	mov	r3, r2
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 800541a:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 800541e:	2800      	cmp	r0, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005420:	f101 0e01 	add.w	lr, r1, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8005424:	da05      	bge.n	8005432 <Vector14C+0x52>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 8005426:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 800542a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800542e:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 8005432:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 8005436:	2800      	cmp	r0, #0
 8005438:	da05      	bge.n	8005446 <Vector14C+0x66>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 800543a:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 800543e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8005442:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005446:	4589      	cmp	r9, r1
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8005448:	f8c3 c908 	str.w	ip, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800544c:	f8c3 cb08 	str.w	ip, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005450:	d1df      	bne.n	8005412 <Vector14C+0x32>
  usbp->saved_state = usbp->state;
 8005452:	7822      	ldrb	r2, [r4, #0]
 8005454:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8005458:	6863      	ldr	r3, [r4, #4]
  usbp->state       = USB_SUSPENDED;
 800545a:	2205      	movs	r2, #5
 800545c:	7022      	strb	r2, [r4, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800545e:	681b      	ldr	r3, [r3, #0]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8005460:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8005464:	f8c7 281c 	str.w	r2, [r7, #2076]	; 0x81c
 8005468:	b113      	cbz	r3, 8005470 <Vector14C+0x90>
 800546a:	487e      	ldr	r0, [pc, #504]	; (8005664 <Vector14C+0x284>)
 800546c:	2104      	movs	r1, #4
 800546e:	4798      	blx	r3
  usbp->transmitting  = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	60a3      	str	r3, [r4, #8]
  if (sts & GINTSTS_ENUMDNE) {
 8005474:	04aa      	lsls	r2, r5, #18
 8005476:	d50c      	bpl.n	8005492 <Vector14C+0xb2>
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 8005478:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 800547c:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8005480:	68f3      	ldr	r3, [r6, #12]
 8005482:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8005486:	bf0c      	ite	eq
 8005488:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 800548c:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
 8005490:	60f3      	str	r3, [r6, #12]
  if (sts & GINTSTS_SOF) {
 8005492:	072b      	lsls	r3, r5, #28
 8005494:	d429      	bmi.n	80054ea <Vector14C+0x10a>
  if (sts & GINTSTS_IISOIXFR) {
 8005496:	02ef      	lsls	r7, r5, #11
 8005498:	d42f      	bmi.n	80054fa <Vector14C+0x11a>
  if (sts & GINTSTS_IISOOXFR) {
 800549a:	02a8      	lsls	r0, r5, #10
 800549c:	f100 80b6 	bmi.w	800560c <Vector14C+0x22c>
  if ((sts & GINTSTS_RXFLVL) != 0U) {
 80054a0:	06eb      	lsls	r3, r5, #27
 80054a2:	f100 8088 	bmi.w	80055b6 <Vector14C+0x1d6>
  if (sts & GINTSTS_OEPINT) {
 80054a6:	0329      	lsls	r1, r5, #12
  src = otgp->DAINT;
 80054a8:	f8d6 4818 	ldr.w	r4, [r6, #2072]	; 0x818
  if (sts & GINTSTS_OEPINT) {
 80054ac:	d50b      	bpl.n	80054c6 <Vector14C+0xe6>
    if (src & (1 << 16))
 80054ae:	03e2      	lsls	r2, r4, #15
 80054b0:	f100 8194 	bmi.w	80057dc <Vector14C+0x3fc>
    if (src & (1 << 17))
 80054b4:	03a3      	lsls	r3, r4, #14
 80054b6:	f100 8187 	bmi.w	80057c8 <Vector14C+0x3e8>
    if (src & (1 << 18))
 80054ba:	0367      	lsls	r7, r4, #13
 80054bc:	f100 818a 	bmi.w	80057d4 <Vector14C+0x3f4>
    if (src & (1 << 19))
 80054c0:	0326      	lsls	r6, r4, #12
 80054c2:	f100 8149 	bmi.w	8005758 <Vector14C+0x378>
  if (sts & GINTSTS_IEPINT) {
 80054c6:	036d      	lsls	r5, r5, #13
 80054c8:	d50b      	bpl.n	80054e2 <Vector14C+0x102>
    if (src & (1 << 0))
 80054ca:	07e0      	lsls	r0, r4, #31
 80054cc:	f100 8192 	bmi.w	80057f4 <Vector14C+0x414>
    if (src & (1 << 1))
 80054d0:	07a1      	lsls	r1, r4, #30
 80054d2:	f100 818b 	bmi.w	80057ec <Vector14C+0x40c>
    if (src & (1 << 2))
 80054d6:	0762      	lsls	r2, r4, #29
 80054d8:	f100 8184 	bmi.w	80057e4 <Vector14C+0x404>
    if (src & (1 << 3))
 80054dc:	0723      	lsls	r3, r4, #28
 80054de:	f100 8142 	bmi.w	8005766 <Vector14C+0x386>
}
 80054e2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 80054e6:	f7fc b8f3 	b.w	80016d0 <_port_irq_epilogue>
    _usb_isr_invoke_sof_cb(usbp);
 80054ea:	6863      	ldr	r3, [r4, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0d1      	beq.n	8005496 <Vector14C+0xb6>
 80054f2:	485c      	ldr	r0, [pc, #368]	; (8005664 <Vector14C+0x284>)
 80054f4:	4798      	blx	r3
  if (sts & GINTSTS_IISOIXFR) {
 80054f6:	02ef      	lsls	r7, r5, #11
 80054f8:	d5cf      	bpl.n	800549a <Vector14C+0xba>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 80054fa:	2100      	movs	r1, #0
  stm32_otg_t *otgp = usbp->otg;
 80054fc:	f8d4 b054 	ldr.w	fp, [r4, #84]	; 0x54
      _usb_isr_invoke_in_cb(usbp, ep);
 8005500:	f8df a160 	ldr.w	sl, [pc, #352]	; 8005664 <Vector14C+0x284>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8005504:	460f      	mov	r7, r1
      _usb_isr_invoke_in_cb(usbp, ep);
 8005506:	f04f 0901 	mov.w	r9, #1
 800550a:	e006      	b.n	800551a <Vector14C+0x13a>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800550c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800550e:	3701      	adds	r7, #1
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	b2ff      	uxtb	r7, r7
 8005514:	429f      	cmp	r7, r3
 8005516:	4639      	mov	r1, r7
 8005518:	d8bf      	bhi.n	800549a <Vector14C+0xba>
 800551a:	eb0b 1347 	add.w	r3, fp, r7, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 800551e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005522:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8005526:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800552a:	d1ef      	bne.n	800550c <Vector14C+0x12c>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 800552c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8005530:	2a00      	cmp	r2, #0
 8005532:	daeb      	bge.n	800550c <Vector14C+0x12c>
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 8005534:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005538:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
 800553c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 8005540:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005544:	2a00      	cmp	r2, #0
 8005546:	dbfb      	blt.n	8005540 <Vector14C+0x160>
      otg_txfifo_flush(usbp, ep);
 8005548:	6d62      	ldr	r2, [r4, #84]	; 0x54
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800554a:	0189      	lsls	r1, r1, #6
 800554c:	f041 0120 	orr.w	r1, r1, #32
 8005550:	6111      	str	r1, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8005552:	6913      	ldr	r3, [r2, #16]
 8005554:	0699      	lsls	r1, r3, #26
 8005556:	d4fc      	bmi.n	8005552 <Vector14C+0x172>
 8005558:	2012      	movs	r0, #18
 800555a:	f7fc fa11 	bl	8001980 <chSysPolledDelayX>
      _usb_isr_invoke_in_cb(usbp, ep);
 800555e:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8005562:	8921      	ldrh	r1, [r4, #8]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	fa09 f307 	lsl.w	r3, r9, r7
 800556a:	6892      	ldr	r2, [r2, #8]
 800556c:	ea21 0303 	bic.w	r3, r1, r3
 8005570:	8123      	strh	r3, [r4, #8]
 8005572:	b112      	cbz	r2, 800557a <Vector14C+0x19a>
 8005574:	4639      	mov	r1, r7
 8005576:	4650      	mov	r0, sl
 8005578:	4790      	blx	r2
      otg_txfifo_handler(usbp, ep);
 800557a:	4638      	mov	r0, r7
 800557c:	f7fb ffa8 	bl	80014d0 <otg_txfifo_handler.constprop.0>
 8005580:	e7c4      	b.n	800550c <Vector14C+0x12c>
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 8005582:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
 8005586:	0798      	lsls	r0, r3, #30
 8005588:	f040 80df 	bne.w	800574a <Vector14C+0x36a>
  usbp->state = usbp->saved_state;
 800558c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8005590:	6862      	ldr	r2, [r4, #4]
  usbp->state = usbp->saved_state;
 8005592:	7023      	strb	r3, [r4, #0]
    otgp->DCTL &= ~DCTL_RWUSIG;
 8005594:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8005598:	6812      	ldr	r2, [r2, #0]
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
 80055a2:	2a00      	cmp	r2, #0
 80055a4:	f43f af2b 	beq.w	80053fe <Vector14C+0x1e>
 80055a8:	2105      	movs	r1, #5
 80055aa:	482e      	ldr	r0, [pc, #184]	; (8005664 <Vector14C+0x284>)
 80055ac:	4790      	blx	r2
  if (sts & GINTSTS_USBSUSP) {
 80055ae:	0529      	lsls	r1, r5, #20
 80055b0:	f57f af60 	bpl.w	8005474 <Vector14C+0x94>
 80055b4:	e725      	b.n	8005402 <Vector14C+0x22>
  sts = usbp->otg->GRXSTSP;
 80055b6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80055b8:	6a0b      	ldr	r3, [r1, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 80055ba:	f403 10f0 	and.w	r0, r3, #1966080	; 0x1e0000
 80055be:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
  cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 80055c2:	f3c3 120a 	ubfx	r2, r3, #4, #11
  ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 80055c6:	f003 030f 	and.w	r3, r3, #15
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 80055ca:	f000 80d3 	beq.w	8005774 <Vector14C+0x394>
 80055ce:	f5b0 2f40 	cmp.w	r0, #786432	; 0xc0000
 80055d2:	f47f af68 	bne.w	80054a6 <Vector14C+0xc6>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 80055d6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	6a18      	ldr	r0, [r3, #32]
  while (i < n) {
 80055de:	2a00      	cmp	r2, #0
 80055e0:	f43f af61 	beq.w	80054a6 <Vector14C+0xc6>
      w = *fifop;
 80055e4:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
  size_t i = 0;
 80055e8:	2300      	movs	r3, #0
    if ((i & 3) == 0) {
 80055ea:	079f      	lsls	r7, r3, #30
      w = *fifop;
 80055ec:	bf08      	it	eq
 80055ee:	f8d4 8000 	ldreq.w	r8, [r4]
    if (i < max) {
 80055f2:	2b07      	cmp	r3, #7
      *buf++ = (uint8_t)w;
 80055f4:	4601      	mov	r1, r0
    i++;
 80055f6:	f103 0301 	add.w	r3, r3, #1
    if (i < max) {
 80055fa:	d804      	bhi.n	8005606 <Vector14C+0x226>
      *buf++ = (uint8_t)w;
 80055fc:	f801 8b01 	strb.w	r8, [r1], #1
      w >>= 8;
 8005600:	ea4f 2818 	mov.w	r8, r8, lsr #8
      *buf++ = (uint8_t)w;
 8005604:	4608      	mov	r0, r1
  while (i < n) {
 8005606:	429a      	cmp	r2, r3
 8005608:	d1ef      	bne.n	80055ea <Vector14C+0x20a>
 800560a:	e74c      	b.n	80054a6 <Vector14C+0xc6>
  stm32_otg_t *otgp = usbp->otg;
 800560c:	f8d4 9054 	ldr.w	r9, [r4, #84]	; 0x54
      _usb_isr_invoke_out_cb(usbp, ep);
 8005610:	f8df b050 	ldr.w	fp, [pc, #80]	; 8005664 <Vector14C+0x284>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8005614:	2700      	movs	r7, #0
      _usb_isr_invoke_out_cb(usbp, ep);
 8005616:	f04f 0a01 	mov.w	sl, #1
 800561a:	e006      	b.n	800562a <Vector14C+0x24a>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 800561c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800561e:	3701      	adds	r7, #1
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	b2ff      	uxtb	r7, r7
 8005624:	429f      	cmp	r7, r3
 8005626:	f63f af3b 	bhi.w	80054a0 <Vector14C+0xc0>
 800562a:	eb09 1247 	add.w	r2, r9, r7, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 800562e:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8005632:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005636:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800563a:	d1ef      	bne.n	800561c <Vector14C+0x23c>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 800563c:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8005640:	2b00      	cmp	r3, #0
      _usb_isr_invoke_out_cb(usbp, ep);
 8005642:	eb04 0087 	add.w	r0, r4, r7, lsl #2
 8005646:	fa0a f107 	lsl.w	r1, sl, r7
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 800564a:	dae7      	bge.n	800561c <Vector14C+0x23c>
      _usb_isr_invoke_out_cb(usbp, ep);
 800564c:	68c2      	ldr	r2, [r0, #12]
 800564e:	8963      	ldrh	r3, [r4, #10]
 8005650:	68d2      	ldr	r2, [r2, #12]
 8005652:	ea23 0301 	bic.w	r3, r3, r1
 8005656:	4658      	mov	r0, fp
 8005658:	4639      	mov	r1, r7
 800565a:	8163      	strh	r3, [r4, #10]
 800565c:	2a00      	cmp	r2, #0
 800565e:	d0dd      	beq.n	800561c <Vector14C+0x23c>
 8005660:	4790      	blx	r2
 8005662:	e7db      	b.n	800561c <Vector14C+0x23c>
 8005664:	2000183c 	.word	0x2000183c
  usbp->status        = 0;
 8005668:	2300      	movs	r3, #0
  usbp->state         = USB_READY;
 800566a:	2102      	movs	r1, #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800566c:	2220      	movs	r2, #32
    usbp->epc[i] = NULL;
 800566e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8005672:	e9c4 3305 	strd	r3, r3, [r4, #20]
  usbp->status        = 0;
 8005676:	64e3      	str	r3, [r4, #76]	; 0x4c
  usbp->ep0state = USB_EP0_STP_WAITING;
 8005678:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  usbp->transmitting  = 0;
 800567c:	60a3      	str	r3, [r4, #8]
  usbp->state         = USB_READY;
 800567e:	7021      	strb	r1, [r4, #0]
 8005680:	6132      	str	r2, [r6, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8005682:	6935      	ldr	r5, [r6, #16]
 8005684:	f015 0520 	ands.w	r5, r5, #32
 8005688:	d1fb      	bne.n	8005682 <Vector14C+0x2a2>
 800568a:	2012      	movs	r0, #18
 800568c:	f7fc f978 	bl	8001980 <chSysPolledDelayX>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8005690:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
  otgp->DIEPEMPMSK = 0;
 8005694:	f8c6 5834 	str.w	r5, [r6, #2100]	; 0x834
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8005698:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800569c:	f8dc 7008 	ldr.w	r7, [ip, #8]
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80056a0:	f8c6 381c 	str.w	r3, [r6, #2076]	; 0x81c
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80056a4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80056a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80056ac:	eb06 1345 	add.w	r3, r6, r5, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80056b0:	42af      	cmp	r7, r5
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80056b2:	f8c3 0900 	str.w	r0, [r3, #2304]	; 0x900
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80056b6:	f105 0501 	add.w	r5, r5, #1
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80056ba:	f8c3 0b00 	str.w	r0, [r3, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80056be:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80056c2:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80056c6:	d1f1      	bne.n	80056ac <Vector14C+0x2cc>
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 80056c8:	f8dc 3000 	ldr.w	r3, [ip]
 80056cc:	65e3      	str	r3, [r4, #92]	; 0x5c
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 80056ce:	f8dc 2000 	ldr.w	r2, [ip]
  otg_rxfifo_flush(usbp);
 80056d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 80056d4:	6272      	str	r2, [r6, #36]	; 0x24
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 80056d6:	2210      	movs	r2, #16
 80056d8:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 80056da:	691d      	ldr	r5, [r3, #16]
 80056dc:	f015 0510 	ands.w	r5, r5, #16
 80056e0:	d1fb      	bne.n	80056da <Vector14C+0x2fa>
 80056e2:	2012      	movs	r0, #18
 80056e4:	f7fc f94c 	bl	8001980 <chSysPolledDelayX>
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 80056e8:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 80056ec:	6861      	ldr	r1, [r4, #4]
  next = usbp->pmnext;
 80056ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80056f0:	680f      	ldr	r7, [r1, #0]
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 80056f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056f6:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 80056fa:	69b3      	ldr	r3, [r6, #24]
 80056fc:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8005700:	f043 0310 	orr.w	r3, r3, #16
 8005704:	61b3      	str	r3, [r6, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8005706:	2309      	movs	r3, #9
 8005708:	f8c6 3810 	str.w	r3, [r6, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 800570c:	f8c6 3814 	str.w	r3, [r6, #2068]	; 0x814
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 8005710:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005714:	f8c6 3b10 	str.w	r3, [r6, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8005718:	4b38      	ldr	r3, [pc, #224]	; (80057fc <Vector14C+0x41c>)
 800571a:	f8c6 3b00 	str.w	r3, [r6, #2816]	; 0xb00
  otgp->ie[0].DIEPTSIZ = 0;
 800571e:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 8005722:	f8c6 3900 	str.w	r3, [r6, #2304]	; 0x900
  usbp->pmnext += size;
 8005726:	f102 0310 	add.w	r3, r2, #16
 800572a:	65e3      	str	r3, [r4, #92]	; 0x5c
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800572c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  usbp->epc[0] = &ep0config;
 8005730:	4b33      	ldr	r3, [pc, #204]	; (8005800 <Vector14C+0x420>)
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8005732:	62b2      	str	r2, [r6, #40]	; 0x28
  usbp->epc[0] = &ep0config;
 8005734:	60e3      	str	r3, [r4, #12]
 8005736:	2f00      	cmp	r7, #0
 8005738:	f43f aed3 	beq.w	80054e2 <Vector14C+0x102>
 800573c:	4629      	mov	r1, r5
 800573e:	4831      	ldr	r0, [pc, #196]	; (8005804 <Vector14C+0x424>)
 8005740:	47b8      	blx	r7
}
 8005742:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8005746:	f7fb bfc3 	b.w	80016d0 <_port_irq_epilogue>
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 800574a:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
 800574e:	f023 0303 	bic.w	r3, r3, #3
 8005752:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00
 8005756:	e719      	b.n	800558c <Vector14C+0x1ac>
      otg_epout_handler(usbp, 3);
 8005758:	2003      	movs	r0, #3
 800575a:	f7fc fb11 	bl	8001d80 <otg_epout_handler.constprop.0>
  if (sts & GINTSTS_IEPINT) {
 800575e:	036d      	lsls	r5, r5, #13
 8005760:	f57f aebf 	bpl.w	80054e2 <Vector14C+0x102>
 8005764:	e6b1      	b.n	80054ca <Vector14C+0xea>
      otg_epin_handler(usbp, 3);
 8005766:	2003      	movs	r0, #3
 8005768:	f7fc fa82 	bl	8001c70 <otg_epin_handler.constprop.0>
}
 800576c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8005770:	f7fb bfae 	b.w	80016d0 <_port_irq_epilogue>
                            usbp->epc[ep]->out_state->rxbuf,
 8005774:	f103 0a02 	add.w	sl, r3, #2
 8005778:	eb04 038a 	add.w	r3, r4, sl, lsl #2
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	699b      	ldr	r3, [r3, #24]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 8005780:	e9d3 9701 	ldrd	r9, r7, [r3, #4]
 8005784:	6818      	ldr	r0, [r3, #0]
 8005786:	eba0 0e09 	sub.w	lr, r0, r9
  while (i < n) {
 800578a:	b1c2      	cbz	r2, 80057be <Vector14C+0x3de>
      w = *fifop;
 800578c:	f501 5c80 	add.w	ip, r1, #4096	; 0x1000
  size_t i = 0;
 8005790:	2300      	movs	r3, #0
    if ((i & 3) == 0) {
 8005792:	0798      	lsls	r0, r3, #30
      w = *fifop;
 8005794:	bf08      	it	eq
 8005796:	f8dc 8000 	ldreq.w	r8, [ip]
    if (i < max) {
 800579a:	459e      	cmp	lr, r3
      *buf++ = (uint8_t)w;
 800579c:	4639      	mov	r1, r7
    i++;
 800579e:	f103 0301 	add.w	r3, r3, #1
    if (i < max) {
 80057a2:	d904      	bls.n	80057ae <Vector14C+0x3ce>
      *buf++ = (uint8_t)w;
 80057a4:	f801 8b01 	strb.w	r8, [r1], #1
      w >>= 8;
 80057a8:	ea4f 2818 	mov.w	r8, r8, lsr #8
      *buf++ = (uint8_t)w;
 80057ac:	460f      	mov	r7, r1
  while (i < n) {
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d1ef      	bne.n	8005792 <Vector14C+0x3b2>
 80057b2:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 80057b6:	6863      	ldr	r3, [r4, #4]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	e9d3 9701 	ldrd	r9, r7, [r3, #4]
    usbp->epc[ep]->out_state->rxbuf += cnt;
 80057be:	4417      	add	r7, r2
    usbp->epc[ep]->out_state->rxcnt += cnt;
 80057c0:	444a      	add	r2, r9
 80057c2:	e9c3 2701 	strd	r2, r7, [r3, #4]
 80057c6:	e66e      	b.n	80054a6 <Vector14C+0xc6>
      otg_epout_handler(usbp, 1);
 80057c8:	2001      	movs	r0, #1
 80057ca:	f7fc fad9 	bl	8001d80 <otg_epout_handler.constprop.0>
    if (src & (1 << 18))
 80057ce:	0367      	lsls	r7, r4, #13
 80057d0:	f57f ae76 	bpl.w	80054c0 <Vector14C+0xe0>
      otg_epout_handler(usbp, 2);
 80057d4:	2002      	movs	r0, #2
 80057d6:	f7fc fad3 	bl	8001d80 <otg_epout_handler.constprop.0>
 80057da:	e671      	b.n	80054c0 <Vector14C+0xe0>
      otg_epout_handler(usbp, 0);
 80057dc:	2000      	movs	r0, #0
 80057de:	f7fc facf 	bl	8001d80 <otg_epout_handler.constprop.0>
 80057e2:	e667      	b.n	80054b4 <Vector14C+0xd4>
      otg_epin_handler(usbp, 2);
 80057e4:	2002      	movs	r0, #2
 80057e6:	f7fc fa43 	bl	8001c70 <otg_epin_handler.constprop.0>
 80057ea:	e677      	b.n	80054dc <Vector14C+0xfc>
      otg_epin_handler(usbp, 1);
 80057ec:	2001      	movs	r0, #1
 80057ee:	f7fc fa3f 	bl	8001c70 <otg_epin_handler.constprop.0>
 80057f2:	e670      	b.n	80054d6 <Vector14C+0xf6>
      otg_epin_handler(usbp, 0);
 80057f4:	2000      	movs	r0, #0
 80057f6:	f7fc fa3b 	bl	8001c70 <otg_epin_handler.constprop.0>
 80057fa:	e669      	b.n	80054d0 <Vector14C+0xf0>
 80057fc:	10008040 	.word	0x10008040
 8005800:	0800635c 	.word	0x0800635c
 8005804:	2000183c 	.word	0x2000183c
	...

08005810 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8005810:	b4f0      	push	{r4, r5, r6, r7}
 8005812:	4f14      	ldr	r7, [pc, #80]	; (8005864 <__init_ram_areas+0x54>)
 8005814:	4d14      	ldr	r5, [pc, #80]	; (8005868 <__init_ram_areas+0x58>)
 8005816:	4815      	ldr	r0, [pc, #84]	; (800586c <__init_ram_areas+0x5c>)
 8005818:	4b15      	ldr	r3, [pc, #84]	; (8005870 <__init_ram_areas+0x60>)
 800581a:	4916      	ldr	r1, [pc, #88]	; (8005874 <__init_ram_areas+0x64>)
 800581c:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8005820:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8005822:	4298      	cmp	r0, r3
 8005824:	d911      	bls.n	800584a <__init_ram_areas+0x3a>
 8005826:	3904      	subs	r1, #4
 8005828:	461a      	mov	r2, r3
      *p = *tp;
 800582a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 800582e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8005832:	4290      	cmp	r0, r2
 8005834:	d8f9      	bhi.n	800582a <__init_ram_areas+0x1a>
 8005836:	1e42      	subs	r2, r0, #1
 8005838:	1ad2      	subs	r2, r2, r3
 800583a:	f022 0203 	bic.w	r2, r2, #3
 800583e:	3204      	adds	r2, #4
 8005840:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8005842:	429d      	cmp	r5, r3
 8005844:	d903      	bls.n	800584e <__init_ram_areas+0x3e>
      *p = 0;
 8005846:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 800584a:	429d      	cmp	r5, r3
 800584c:	d8fb      	bhi.n	8005846 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800584e:	4567      	cmp	r7, ip
 8005850:	d005      	beq.n	800585e <__init_ram_areas+0x4e>
 8005852:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8005856:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 800585a:	3710      	adds	r7, #16
 800585c:	e7e1      	b.n	8005822 <__init_ram_areas+0x12>
#endif
}
 800585e:	bcf0      	pop	{r4, r5, r6, r7}
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	080063f0 	.word	0x080063f0
 8005868:	200021e0 	.word	0x200021e0
 800586c:	200021e0 	.word	0x200021e0
 8005870:	200021e0 	.word	0x200021e0
 8005874:	08006b60 	.word	0x08006b60
	...

08005880 <__default_exit>:
  while (true) {
 8005880:	e7fe      	b.n	8005880 <__default_exit>
 8005882:	bf00      	nop
	...

08005890 <__late_init>:
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
	...

080058a0 <__core_init>:
}
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop

080058a4 <_strtol_l.isra.0>:
 80058a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a8:	4f40      	ldr	r7, [pc, #256]	; (80059ac <_strtol_l.isra.0+0x108>)
 80058aa:	4681      	mov	r9, r0
 80058ac:	460d      	mov	r5, r1
 80058ae:	4628      	mov	r0, r5
 80058b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058b4:	5d3e      	ldrb	r6, [r7, r4]
 80058b6:	f016 0608 	ands.w	r6, r6, #8
 80058ba:	d1f8      	bne.n	80058ae <_strtol_l.isra.0+0xa>
 80058bc:	2c2d      	cmp	r4, #45	; 0x2d
 80058be:	d04f      	beq.n	8005960 <_strtol_l.isra.0+0xbc>
 80058c0:	2c2b      	cmp	r4, #43	; 0x2b
 80058c2:	bf0a      	itet	eq
 80058c4:	f895 b000 	ldrbeq.w	fp, [r5]
 80058c8:	46a3      	movne	fp, r4
 80058ca:	1c85      	addeq	r5, r0, #2
 80058cc:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 80058d0:	b11b      	cbz	r3, 80058da <_strtol_l.isra.0+0x36>
 80058d2:	2b10      	cmp	r3, #16
 80058d4:	d04b      	beq.n	800596e <_strtol_l.isra.0+0xca>
 80058d6:	469e      	mov	lr, r3
 80058d8:	e004      	b.n	80058e4 <_strtol_l.isra.0+0x40>
 80058da:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 80058de:	d050      	beq.n	8005982 <_strtol_l.isra.0+0xde>
 80058e0:	230a      	movs	r3, #10
 80058e2:	469e      	mov	lr, r3
 80058e4:	2700      	movs	r7, #0
 80058e6:	fbb8 fcfe 	udiv	ip, r8, lr
 80058ea:	4638      	mov	r0, r7
 80058ec:	fb0e 8a1c 	mls	sl, lr, ip, r8
 80058f0:	e005      	b.n	80058fe <_strtol_l.isra.0+0x5a>
 80058f2:	d029      	beq.n	8005948 <_strtol_l.isra.0+0xa4>
 80058f4:	fb0e 4000 	mla	r0, lr, r0, r4
 80058f8:	2701      	movs	r7, #1
 80058fa:	f815 bb01 	ldrb.w	fp, [r5], #1
 80058fe:	f1ab 0430 	sub.w	r4, fp, #48	; 0x30
 8005902:	2c09      	cmp	r4, #9
 8005904:	d905      	bls.n	8005912 <_strtol_l.isra.0+0x6e>
 8005906:	f1ab 0441 	sub.w	r4, fp, #65	; 0x41
 800590a:	2c19      	cmp	r4, #25
 800590c:	d80b      	bhi.n	8005926 <_strtol_l.isra.0+0x82>
 800590e:	f1ab 0437 	sub.w	r4, fp, #55	; 0x37
 8005912:	42a3      	cmp	r3, r4
 8005914:	dd0f      	ble.n	8005936 <_strtol_l.isra.0+0x92>
 8005916:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800591a:	d0ee      	beq.n	80058fa <_strtol_l.isra.0+0x56>
 800591c:	4584      	cmp	ip, r0
 800591e:	d2e8      	bcs.n	80058f2 <_strtol_l.isra.0+0x4e>
 8005920:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005924:	e7e9      	b.n	80058fa <_strtol_l.isra.0+0x56>
 8005926:	f1ab 0461 	sub.w	r4, fp, #97	; 0x61
 800592a:	2c19      	cmp	r4, #25
 800592c:	d803      	bhi.n	8005936 <_strtol_l.isra.0+0x92>
 800592e:	f1ab 0457 	sub.w	r4, fp, #87	; 0x57
 8005932:	42a3      	cmp	r3, r4
 8005934:	dcef      	bgt.n	8005916 <_strtol_l.isra.0+0x72>
 8005936:	1c7b      	adds	r3, r7, #1
 8005938:	d00b      	beq.n	8005952 <_strtol_l.isra.0+0xae>
 800593a:	b106      	cbz	r6, 800593e <_strtol_l.isra.0+0x9a>
 800593c:	4240      	negs	r0, r0
 800593e:	b10a      	cbz	r2, 8005944 <_strtol_l.isra.0+0xa0>
 8005940:	bb77      	cbnz	r7, 80059a0 <_strtol_l.isra.0+0xfc>
 8005942:	6011      	str	r1, [r2, #0]
 8005944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005948:	45a2      	cmp	sl, r4
 800594a:	dad3      	bge.n	80058f4 <_strtol_l.isra.0+0x50>
 800594c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005950:	e7d3      	b.n	80058fa <_strtol_l.isra.0+0x56>
 8005952:	2322      	movs	r3, #34	; 0x22
 8005954:	f8c9 3000 	str.w	r3, [r9]
 8005958:	b1fa      	cbz	r2, 800599a <_strtol_l.isra.0+0xf6>
 800595a:	1e69      	subs	r1, r5, #1
 800595c:	4640      	mov	r0, r8
 800595e:	e7f0      	b.n	8005942 <_strtol_l.isra.0+0x9e>
 8005960:	f895 b000 	ldrb.w	fp, [r5]
 8005964:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005968:	1c85      	adds	r5, r0, #2
 800596a:	2601      	movs	r6, #1
 800596c:	e7b0      	b.n	80058d0 <_strtol_l.isra.0+0x2c>
 800596e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8005972:	d1b0      	bne.n	80058d6 <_strtol_l.isra.0+0x32>
 8005974:	7828      	ldrb	r0, [r5, #0]
 8005976:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800597a:	2858      	cmp	r0, #88	; 0x58
 800597c:	d006      	beq.n	800598c <_strtol_l.isra.0+0xe8>
 800597e:	469e      	mov	lr, r3
 8005980:	e7b0      	b.n	80058e4 <_strtol_l.isra.0+0x40>
 8005982:	782b      	ldrb	r3, [r5, #0]
 8005984:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005988:	2b58      	cmp	r3, #88	; 0x58
 800598a:	d10b      	bne.n	80059a4 <_strtol_l.isra.0+0x100>
 800598c:	f04f 0e10 	mov.w	lr, #16
 8005990:	f895 b001 	ldrb.w	fp, [r5, #1]
 8005994:	4673      	mov	r3, lr
 8005996:	3502      	adds	r5, #2
 8005998:	e7a4      	b.n	80058e4 <_strtol_l.isra.0+0x40>
 800599a:	4640      	mov	r0, r8
 800599c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a0:	4680      	mov	r8, r0
 80059a2:	e7da      	b.n	800595a <_strtol_l.isra.0+0xb6>
 80059a4:	2308      	movs	r3, #8
 80059a6:	469e      	mov	lr, r3
 80059a8:	e79c      	b.n	80058e4 <_strtol_l.isra.0+0x40>
 80059aa:	bf00      	nop
 80059ac:	080065ed 	.word	0x080065ed

080059b0 <strtol>:
 80059b0:	b430      	push	{r4, r5}
 80059b2:	4c04      	ldr	r4, [pc, #16]	; (80059c4 <strtol+0x14>)
 80059b4:	460d      	mov	r5, r1
 80059b6:	4613      	mov	r3, r2
 80059b8:	4601      	mov	r1, r0
 80059ba:	462a      	mov	r2, r5
 80059bc:	6820      	ldr	r0, [r4, #0]
 80059be:	bc30      	pop	{r4, r5}
 80059c0:	f7ff bf70 	b.w	80058a4 <_strtol_l.isra.0>
 80059c4:	20000838 	.word	0x20000838

080059c8 <memset>:
 80059c8:	b4f0      	push	{r4, r5, r6, r7}
 80059ca:	0786      	lsls	r6, r0, #30
 80059cc:	d046      	beq.n	8005a5c <memset+0x94>
 80059ce:	1e54      	subs	r4, r2, #1
 80059d0:	2a00      	cmp	r2, #0
 80059d2:	d03c      	beq.n	8005a4e <memset+0x86>
 80059d4:	b2ca      	uxtb	r2, r1
 80059d6:	4603      	mov	r3, r0
 80059d8:	e001      	b.n	80059de <memset+0x16>
 80059da:	3c01      	subs	r4, #1
 80059dc:	d337      	bcc.n	8005a4e <memset+0x86>
 80059de:	f803 2b01 	strb.w	r2, [r3], #1
 80059e2:	079d      	lsls	r5, r3, #30
 80059e4:	d1f9      	bne.n	80059da <memset+0x12>
 80059e6:	2c03      	cmp	r4, #3
 80059e8:	d92a      	bls.n	8005a40 <memset+0x78>
 80059ea:	b2cd      	uxtb	r5, r1
 80059ec:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80059f0:	2c0f      	cmp	r4, #15
 80059f2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80059f6:	d934      	bls.n	8005a62 <memset+0x9a>
 80059f8:	f1a4 0210 	sub.w	r2, r4, #16
 80059fc:	f022 0c0f 	bic.w	ip, r2, #15
 8005a00:	f103 0720 	add.w	r7, r3, #32
 8005a04:	0916      	lsrs	r6, r2, #4
 8005a06:	4467      	add	r7, ip
 8005a08:	f103 0210 	add.w	r2, r3, #16
 8005a0c:	e942 5504 	strd	r5, r5, [r2, #-16]
 8005a10:	e942 5502 	strd	r5, r5, [r2, #-8]
 8005a14:	3210      	adds	r2, #16
 8005a16:	42ba      	cmp	r2, r7
 8005a18:	d1f8      	bne.n	8005a0c <memset+0x44>
 8005a1a:	1c72      	adds	r2, r6, #1
 8005a1c:	f014 0f0c 	tst.w	r4, #12
 8005a20:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8005a24:	f004 060f 	and.w	r6, r4, #15
 8005a28:	d013      	beq.n	8005a52 <memset+0x8a>
 8005a2a:	1f33      	subs	r3, r6, #4
 8005a2c:	f023 0303 	bic.w	r3, r3, #3
 8005a30:	3304      	adds	r3, #4
 8005a32:	4413      	add	r3, r2
 8005a34:	f842 5b04 	str.w	r5, [r2], #4
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d1fb      	bne.n	8005a34 <memset+0x6c>
 8005a3c:	f006 0403 	and.w	r4, r6, #3
 8005a40:	b12c      	cbz	r4, 8005a4e <memset+0x86>
 8005a42:	b2ca      	uxtb	r2, r1
 8005a44:	441c      	add	r4, r3
 8005a46:	f803 2b01 	strb.w	r2, [r3], #1
 8005a4a:	429c      	cmp	r4, r3
 8005a4c:	d1fb      	bne.n	8005a46 <memset+0x7e>
 8005a4e:	bcf0      	pop	{r4, r5, r6, r7}
 8005a50:	4770      	bx	lr
 8005a52:	4634      	mov	r4, r6
 8005a54:	4613      	mov	r3, r2
 8005a56:	2c00      	cmp	r4, #0
 8005a58:	d1f3      	bne.n	8005a42 <memset+0x7a>
 8005a5a:	e7f8      	b.n	8005a4e <memset+0x86>
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	4603      	mov	r3, r0
 8005a60:	e7c1      	b.n	80059e6 <memset+0x1e>
 8005a62:	461a      	mov	r2, r3
 8005a64:	4626      	mov	r6, r4
 8005a66:	e7e0      	b.n	8005a2a <memset+0x62>

08005a68 <strchr>:
 8005a68:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	d044      	beq.n	8005afa <strchr+0x92>
 8005a70:	0782      	lsls	r2, r0, #30
 8005a72:	d132      	bne.n	8005ada <strchr+0x72>
 8005a74:	b470      	push	{r4, r5, r6}
 8005a76:	6804      	ldr	r4, [r0, #0]
 8005a78:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8005a7c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8005a80:	ea86 0504 	eor.w	r5, r6, r4
 8005a84:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 8005a88:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8005a8c:	ea23 0305 	bic.w	r3, r3, r5
 8005a90:	ea22 0204 	bic.w	r2, r2, r4
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8005a9a:	d10f      	bne.n	8005abc <strchr+0x54>
 8005a9c:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8005aa0:	ea84 0506 	eor.w	r5, r4, r6
 8005aa4:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 8005aa8:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 8005aac:	ea22 0205 	bic.w	r2, r2, r5
 8005ab0:	ea23 0304 	bic.w	r3, r3, r4
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8005aba:	d0ef      	beq.n	8005a9c <strchr+0x34>
 8005abc:	7803      	ldrb	r3, [r0, #0]
 8005abe:	b923      	cbnz	r3, 8005aca <strchr+0x62>
 8005ac0:	e036      	b.n	8005b30 <strchr+0xc8>
 8005ac2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d032      	beq.n	8005b30 <strchr+0xc8>
 8005aca:	4299      	cmp	r1, r3
 8005acc:	d1f9      	bne.n	8005ac2 <strchr+0x5a>
 8005ace:	e030      	b.n	8005b32 <strchr+0xca>
 8005ad0:	428a      	cmp	r2, r1
 8005ad2:	d011      	beq.n	8005af8 <strchr+0x90>
 8005ad4:	079a      	lsls	r2, r3, #30
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	d0cc      	beq.n	8005a74 <strchr+0xc>
 8005ada:	4618      	mov	r0, r3
 8005adc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ae0:	2a00      	cmp	r2, #0
 8005ae2:	d1f5      	bne.n	8005ad0 <strchr+0x68>
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	4770      	bx	lr
 8005ae8:	0799      	lsls	r1, r3, #30
 8005aea:	4618      	mov	r0, r3
 8005aec:	d007      	beq.n	8005afe <strchr+0x96>
 8005aee:	4618      	mov	r0, r3
 8005af0:	3301      	adds	r3, #1
 8005af2:	7802      	ldrb	r2, [r0, #0]
 8005af4:	2a00      	cmp	r2, #0
 8005af6:	d1f7      	bne.n	8005ae8 <strchr+0x80>
 8005af8:	4770      	bx	lr
 8005afa:	0782      	lsls	r2, r0, #30
 8005afc:	d1f7      	bne.n	8005aee <strchr+0x86>
 8005afe:	6802      	ldr	r2, [r0, #0]
 8005b00:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8005b04:	ea23 0302 	bic.w	r3, r3, r2
 8005b08:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8005b0c:	d108      	bne.n	8005b20 <strchr+0xb8>
 8005b0e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8005b12:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8005b16:	ea23 0302 	bic.w	r3, r3, r2
 8005b1a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8005b1e:	d0f6      	beq.n	8005b0e <strchr+0xa6>
 8005b20:	7803      	ldrb	r3, [r0, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0e8      	beq.n	8005af8 <strchr+0x90>
 8005b26:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1fb      	bne.n	8005b26 <strchr+0xbe>
 8005b2e:	4770      	bx	lr
 8005b30:	4618      	mov	r0, r3
 8005b32:	bc70      	pop	{r4, r5, r6}
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop

08005b38 <strpbrk>:
 8005b38:	b430      	push	{r4, r5}
 8005b3a:	7804      	ldrb	r4, [r0, #0]
 8005b3c:	b1a4      	cbz	r4, 8005b68 <strpbrk+0x30>
 8005b3e:	780d      	ldrb	r5, [r1, #0]
 8005b40:	460a      	mov	r2, r1
 8005b42:	462b      	mov	r3, r5
 8005b44:	b91d      	cbnz	r5, 8005b4e <strpbrk+0x16>
 8005b46:	e00a      	b.n	8005b5e <strpbrk+0x26>
 8005b48:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8005b4c:	b13b      	cbz	r3, 8005b5e <strpbrk+0x26>
 8005b4e:	429c      	cmp	r4, r3
 8005b50:	d1fa      	bne.n	8005b48 <strpbrk+0x10>
 8005b52:	7813      	ldrb	r3, [r2, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	bf08      	it	eq
 8005b58:	2000      	moveq	r0, #0
 8005b5a:	bc30      	pop	{r4, r5}
 8005b5c:	4770      	bx	lr
 8005b5e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8005b62:	2c00      	cmp	r4, #0
 8005b64:	d1ec      	bne.n	8005b40 <strpbrk+0x8>
 8005b66:	e7f4      	b.n	8005b52 <strpbrk+0x1a>
 8005b68:	4620      	mov	r0, r4
 8005b6a:	bc30      	pop	{r4, r5}
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop

08005b70 <strspn>:
 8005b70:	b470      	push	{r4, r5, r6}
 8005b72:	7804      	ldrb	r4, [r0, #0]
 8005b74:	b18c      	cbz	r4, 8005b9a <strspn+0x2a>
 8005b76:	780e      	ldrb	r6, [r1, #0]
 8005b78:	4605      	mov	r5, r0
 8005b7a:	b15e      	cbz	r6, 8005b94 <strspn+0x24>
 8005b7c:	460a      	mov	r2, r1
 8005b7e:	4633      	mov	r3, r6
 8005b80:	e002      	b.n	8005b88 <strspn+0x18>
 8005b82:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8005b86:	b12b      	cbz	r3, 8005b94 <strspn+0x24>
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	d1fa      	bne.n	8005b82 <strspn+0x12>
 8005b8c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8005b90:	2c00      	cmp	r4, #0
 8005b92:	d1f2      	bne.n	8005b7a <strspn+0xa>
 8005b94:	1a28      	subs	r0, r5, r0
 8005b96:	bc70      	pop	{r4, r5, r6}
 8005b98:	4770      	bx	lr
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	e7fb      	b.n	8005b96 <strspn+0x26>
 8005b9e:	bf00      	nop

08005ba0 <two_way_long_needle>:
 8005ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	461d      	mov	r5, r3
 8005ba8:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 8005bac:	4681      	mov	r9, r0
 8005bae:	460f      	mov	r7, r1
 8005bb0:	4690      	mov	r8, r2
 8005bb2:	f04f 0301 	mov.w	r3, #1
 8005bb6:	f240 8144 	bls.w	8005e42 <two_way_long_needle+0x2a2>
 8005bba:	4619      	mov	r1, r3
 8005bbc:	469c      	mov	ip, r3
 8005bbe:	2400      	movs	r4, #0
 8005bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bc4:	e006      	b.n	8005bd4 <two_way_long_needle+0x34>
 8005bc6:	eba3 0c00 	sub.w	ip, r3, r0
 8005bca:	461c      	mov	r4, r3
 8005bcc:	2101      	movs	r1, #1
 8005bce:	1863      	adds	r3, r4, r1
 8005bd0:	429d      	cmp	r5, r3
 8005bd2:	d910      	bls.n	8005bf6 <two_way_long_needle+0x56>
 8005bd4:	eb08 0200 	add.w	r2, r8, r0
 8005bd8:	f818 6003 	ldrb.w	r6, [r8, r3]
 8005bdc:	5c52      	ldrb	r2, [r2, r1]
 8005bde:	4296      	cmp	r6, r2
 8005be0:	d3f1      	bcc.n	8005bc6 <two_way_long_needle+0x26>
 8005be2:	f000 8082 	beq.w	8005cea <two_way_long_needle+0x14a>
 8005be6:	f04f 0c01 	mov.w	ip, #1
 8005bea:	4661      	mov	r1, ip
 8005bec:	4620      	mov	r0, r4
 8005bee:	4464      	add	r4, ip
 8005bf0:	1863      	adds	r3, r4, r1
 8005bf2:	429d      	cmp	r5, r3
 8005bf4:	d8ee      	bhi.n	8005bd4 <two_way_long_needle+0x34>
 8005bf6:	f8cd c008 	str.w	ip, [sp, #8]
 8005bfa:	f04f 0c01 	mov.w	ip, #1
 8005bfe:	4661      	mov	r1, ip
 8005c00:	4663      	mov	r3, ip
 8005c02:	2400      	movs	r4, #0
 8005c04:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005c08:	e006      	b.n	8005c18 <two_way_long_needle+0x78>
 8005c0a:	eba3 0c06 	sub.w	ip, r3, r6
 8005c0e:	461c      	mov	r4, r3
 8005c10:	2101      	movs	r1, #1
 8005c12:	1863      	adds	r3, r4, r1
 8005c14:	429d      	cmp	r5, r3
 8005c16:	d90f      	bls.n	8005c38 <two_way_long_needle+0x98>
 8005c18:	eb08 0201 	add.w	r2, r8, r1
 8005c1c:	f818 e003 	ldrb.w	lr, [r8, r3]
 8005c20:	5d92      	ldrb	r2, [r2, r6]
 8005c22:	4596      	cmp	lr, r2
 8005c24:	d8f1      	bhi.n	8005c0a <two_way_long_needle+0x6a>
 8005c26:	d066      	beq.n	8005cf6 <two_way_long_needle+0x156>
 8005c28:	f04f 0c01 	mov.w	ip, #1
 8005c2c:	4661      	mov	r1, ip
 8005c2e:	4626      	mov	r6, r4
 8005c30:	4464      	add	r4, ip
 8005c32:	1863      	adds	r3, r4, r1
 8005c34:	429d      	cmp	r5, r3
 8005c36:	d8ef      	bhi.n	8005c18 <two_way_long_needle+0x78>
 8005c38:	3601      	adds	r6, #1
 8005c3a:	f100 0b01 	add.w	fp, r0, #1
 8005c3e:	455e      	cmp	r6, fp
 8005c40:	d302      	bcc.n	8005c48 <two_way_long_needle+0xa8>
 8005c42:	f8cd c008 	str.w	ip, [sp, #8]
 8005c46:	46b3      	mov	fp, r6
 8005c48:	ab05      	add	r3, sp, #20
 8005c4a:	f20d 4214 	addw	r2, sp, #1044	; 0x414
 8005c4e:	f843 5f04 	str.w	r5, [r3, #4]!
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d1fb      	bne.n	8005c4e <two_way_long_needle+0xae>
 8005c56:	2d00      	cmp	r5, #0
 8005c58:	f000 80f7 	beq.w	8005e4a <two_way_long_needle+0x2aa>
 8005c5c:	1e6c      	subs	r4, r5, #1
 8005c5e:	ae06      	add	r6, sp, #24
 8005c60:	eb08 0004 	add.w	r0, r8, r4
 8005c64:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8005c68:	9601      	str	r6, [sp, #4]
 8005c6a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8005c6e:	43d3      	mvns	r3, r2
 8005c70:	442b      	add	r3, r5
 8005c72:	4443      	add	r3, r8
 8005c74:	4290      	cmp	r0, r2
 8005c76:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
 8005c7a:	d1f6      	bne.n	8005c6a <two_way_long_needle+0xca>
 8005c7c:	9b02      	ldr	r3, [sp, #8]
 8005c7e:	465a      	mov	r2, fp
 8005c80:	eb08 0103 	add.w	r1, r8, r3
 8005c84:	4640      	mov	r0, r8
 8005c86:	f000 f997 	bl	8005fb8 <memcmp>
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	f040 8081 	bne.w	8005d92 <two_way_long_needle+0x1f2>
 8005c90:	9b02      	ldr	r3, [sp, #8]
 8005c92:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8005c96:	1aeb      	subs	r3, r5, r3
 8005c98:	4682      	mov	sl, r0
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	9205      	str	r2, [sp, #20]
 8005c9e:	9303      	str	r3, [sp, #12]
 8005ca0:	eb09 0e06 	add.w	lr, r9, r6
 8005ca4:	9a01      	ldr	r2, [sp, #4]
 8005ca6:	f81e 3004 	ldrb.w	r3, [lr, r4]
 8005caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cae:	b343      	cbz	r3, 8005d02 <two_way_long_needle+0x162>
 8005cb0:	f1ba 0f00 	cmp.w	sl, #0
 8005cb4:	d004      	beq.n	8005cc0 <two_way_long_needle+0x120>
 8005cb6:	9a02      	ldr	r2, [sp, #8]
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	9a03      	ldr	r2, [sp, #12]
 8005cbc:	bf38      	it	cc
 8005cbe:	4613      	movcc	r3, r2
 8005cc0:	441e      	add	r6, r3
 8005cc2:	f04f 0a00 	mov.w	sl, #0
 8005cc6:	1b7b      	subs	r3, r7, r5
 8005cc8:	42b3      	cmp	r3, r6
 8005cca:	d2e9      	bcs.n	8005ca0 <two_way_long_needle+0x100>
 8005ccc:	eb09 0007 	add.w	r0, r9, r7
 8005cd0:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
 8005cd4:	f000 f9a0 	bl	8006018 <strnlen>
 8005cd8:	4407      	add	r7, r0
 8005cda:	1b7b      	subs	r3, r7, r5
 8005cdc:	42b3      	cmp	r3, r6
 8005cde:	d2df      	bcs.n	8005ca0 <two_way_long_needle+0x100>
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 8005ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cea:	458c      	cmp	ip, r1
 8005cec:	bf12      	itee	ne
 8005cee:	3101      	addne	r1, #1
 8005cf0:	4464      	addeq	r4, ip
 8005cf2:	2101      	moveq	r1, #1
 8005cf4:	e76b      	b.n	8005bce <two_way_long_needle+0x2e>
 8005cf6:	4561      	cmp	r1, ip
 8005cf8:	bf0a      	itet	eq
 8005cfa:	1864      	addeq	r4, r4, r1
 8005cfc:	3101      	addne	r1, #1
 8005cfe:	2101      	moveq	r1, #1
 8005d00:	e787      	b.n	8005c12 <two_way_long_needle+0x72>
 8005d02:	45d3      	cmp	fp, sl
 8005d04:	465b      	mov	r3, fp
 8005d06:	bf38      	it	cc
 8005d08:	4653      	movcc	r3, sl
 8005d0a:	42a3      	cmp	r3, r4
 8005d0c:	d211      	bcs.n	8005d32 <two_way_long_needle+0x192>
 8005d0e:	1e59      	subs	r1, r3, #1
 8005d10:	199a      	adds	r2, r3, r6
 8005d12:	4441      	add	r1, r8
 8005d14:	444a      	add	r2, r9
 8005d16:	e002      	b.n	8005d1e <two_way_long_needle+0x17e>
 8005d18:	3301      	adds	r3, #1
 8005d1a:	42a3      	cmp	r3, r4
 8005d1c:	d209      	bcs.n	8005d32 <two_way_long_needle+0x192>
 8005d1e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8005d22:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8005d26:	4584      	cmp	ip, r0
 8005d28:	d0f6      	beq.n	8005d18 <two_way_long_needle+0x178>
 8005d2a:	f1cb 0201 	rsb	r2, fp, #1
 8005d2e:	4416      	add	r6, r2
 8005d30:	e7c6      	b.n	8005cc0 <two_way_long_needle+0x120>
 8005d32:	45d3      	cmp	fp, sl
 8005d34:	9b05      	ldr	r3, [sp, #20]
 8005d36:	d97d      	bls.n	8005e34 <two_way_long_needle+0x294>
 8005d38:	eb0b 0206 	add.w	r2, fp, r6
 8005d3c:	444a      	add	r2, r9
 8005d3e:	eb08 010b 	add.w	r1, r8, fp
 8005d42:	f8cd b010 	str.w	fp, [sp, #16]
 8005d46:	e002      	b.n	8005d4e <two_way_long_needle+0x1ae>
 8005d48:	4553      	cmp	r3, sl
 8005d4a:	d016      	beq.n	8005d7a <two_way_long_needle+0x1da>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 8005d52:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 8005d56:	4584      	cmp	ip, r0
 8005d58:	f103 0b01 	add.w	fp, r3, #1
 8005d5c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8005d60:	d0f2      	beq.n	8005d48 <two_way_long_needle+0x1a8>
 8005d62:	465b      	mov	r3, fp
 8005d64:	f8dd b010 	ldr.w	fp, [sp, #16]
 8005d68:	f10a 0a01 	add.w	sl, sl, #1
 8005d6c:	459a      	cmp	sl, r3
 8005d6e:	d80b      	bhi.n	8005d88 <two_way_long_needle+0x1e8>
 8005d70:	9b02      	ldr	r3, [sp, #8]
 8005d72:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8005d76:	441e      	add	r6, r3
 8005d78:	e7a5      	b.n	8005cc6 <two_way_long_needle+0x126>
 8005d7a:	4653      	mov	r3, sl
 8005d7c:	f10a 0a01 	add.w	sl, sl, #1
 8005d80:	459a      	cmp	sl, r3
 8005d82:	f8dd b010 	ldr.w	fp, [sp, #16]
 8005d86:	d9f3      	bls.n	8005d70 <two_way_long_needle+0x1d0>
 8005d88:	4670      	mov	r0, lr
 8005d8a:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 8005d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d92:	eba5 030b 	sub.w	r3, r5, fp
 8005d96:	455b      	cmp	r3, fp
 8005d98:	bf38      	it	cc
 8005d9a:	465b      	movcc	r3, fp
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	9304      	str	r3, [sp, #16]
 8005da0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8005da4:	9302      	str	r3, [sp, #8]
 8005da6:	f1cb 0301 	rsb	r3, fp, #1
 8005daa:	2600      	movs	r6, #0
 8005dac:	9303      	str	r3, [sp, #12]
 8005dae:	f445 6a00 	orr.w	sl, r5, #2048	; 0x800
 8005db2:	eb09 0e06 	add.w	lr, r9, r6
 8005db6:	9a01      	ldr	r2, [sp, #4]
 8005db8:	f81e 3004 	ldrb.w	r3, [lr, r4]
 8005dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc0:	b16b      	cbz	r3, 8005dde <two_way_long_needle+0x23e>
 8005dc2:	441e      	add	r6, r3
 8005dc4:	1b7b      	subs	r3, r7, r5
 8005dc6:	429e      	cmp	r6, r3
 8005dc8:	d9f3      	bls.n	8005db2 <two_way_long_needle+0x212>
 8005dca:	eb09 0007 	add.w	r0, r9, r7
 8005dce:	4651      	mov	r1, sl
 8005dd0:	f000 f922 	bl	8006018 <strnlen>
 8005dd4:	4407      	add	r7, r0
 8005dd6:	1b7b      	subs	r3, r7, r5
 8005dd8:	429e      	cmp	r6, r3
 8005dda:	d9ea      	bls.n	8005db2 <two_way_long_needle+0x212>
 8005ddc:	e780      	b.n	8005ce0 <two_way_long_needle+0x140>
 8005dde:	45a3      	cmp	fp, r4
 8005de0:	d214      	bcs.n	8005e0c <two_way_long_needle+0x26c>
 8005de2:	9b02      	ldr	r3, [sp, #8]
 8005de4:	eb0b 0206 	add.w	r2, fp, r6
 8005de8:	eb08 0103 	add.w	r1, r8, r3
 8005dec:	444a      	add	r2, r9
 8005dee:	465b      	mov	r3, fp
 8005df0:	e002      	b.n	8005df8 <two_way_long_needle+0x258>
 8005df2:	3301      	adds	r3, #1
 8005df4:	42a3      	cmp	r3, r4
 8005df6:	d209      	bcs.n	8005e0c <two_way_long_needle+0x26c>
 8005df8:	f812 0b01 	ldrb.w	r0, [r2], #1
 8005dfc:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8005e00:	4584      	cmp	ip, r0
 8005e02:	d0f6      	beq.n	8005df2 <two_way_long_needle+0x252>
 8005e04:	9a03      	ldr	r2, [sp, #12]
 8005e06:	4416      	add	r6, r2
 8005e08:	441e      	add	r6, r3
 8005e0a:	e7db      	b.n	8005dc4 <two_way_long_needle+0x224>
 8005e0c:	f1bb 0f00 	cmp.w	fp, #0
 8005e10:	d012      	beq.n	8005e38 <two_way_long_needle+0x298>
 8005e12:	eb0b 0106 	add.w	r1, fp, r6
 8005e16:	4449      	add	r1, r9
 8005e18:	eb08 020b 	add.w	r2, r8, fp
 8005e1c:	e001      	b.n	8005e22 <two_way_long_needle+0x282>
 8005e1e:	4543      	cmp	r3, r8
 8005e20:	d00a      	beq.n	8005e38 <two_way_long_needle+0x298>
 8005e22:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
 8005e26:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8005e2a:	4584      	cmp	ip, r0
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	d0f6      	beq.n	8005e1e <two_way_long_needle+0x27e>
 8005e30:	9b04      	ldr	r3, [sp, #16]
 8005e32:	e7c6      	b.n	8005dc2 <two_way_long_needle+0x222>
 8005e34:	465b      	mov	r3, fp
 8005e36:	e797      	b.n	8005d68 <two_way_long_needle+0x1c8>
 8005e38:	4670      	mov	r0, lr
 8005e3a:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 8005e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e42:	9302      	str	r3, [sp, #8]
 8005e44:	f04f 0b00 	mov.w	fp, #0
 8005e48:	e6fe      	b.n	8005c48 <two_way_long_needle+0xa8>
 8005e4a:	ab06      	add	r3, sp, #24
 8005e4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005e50:	9301      	str	r3, [sp, #4]
 8005e52:	e713      	b.n	8005c7c <two_way_long_needle+0xdc>

08005e54 <strstr>:
 8005e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e58:	460e      	mov	r6, r1
 8005e5a:	7809      	ldrb	r1, [r1, #0]
 8005e5c:	b090      	sub	sp, #64	; 0x40
 8005e5e:	4604      	mov	r4, r0
 8005e60:	2900      	cmp	r1, #0
 8005e62:	d050      	beq.n	8005f06 <strstr+0xb2>
 8005e64:	7872      	ldrb	r2, [r6, #1]
 8005e66:	2a00      	cmp	r2, #0
 8005e68:	f000 8082 	beq.w	8005f70 <strstr+0x11c>
 8005e6c:	78b3      	ldrb	r3, [r6, #2]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d04d      	beq.n	8005f0e <strstr+0xba>
 8005e72:	78f0      	ldrb	r0, [r6, #3]
 8005e74:	2800      	cmp	r0, #0
 8005e76:	f000 8082 	beq.w	8005f7e <strstr+0x12a>
 8005e7a:	7933      	ldrb	r3, [r6, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d054      	beq.n	8005f2a <strstr+0xd6>
 8005e80:	4630      	mov	r0, r6
 8005e82:	f7fa fc5d 	bl	8000740 <strlen>
 8005e86:	4607      	mov	r7, r0
 8005e88:	f440 7100 	orr.w	r1, r0, #512	; 0x200
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f000 f8c3 	bl	8006018 <strnlen>
 8005e92:	4287      	cmp	r7, r0
 8005e94:	d867      	bhi.n	8005f66 <strstr+0x112>
 8005e96:	2ffe      	cmp	r7, #254	; 0xfe
 8005e98:	f200 8085 	bhi.w	8005fa6 <strstr+0x152>
 8005e9c:	eba0 0807 	sub.w	r8, r0, r7
 8005ea0:	2240      	movs	r2, #64	; 0x40
 8005ea2:	1c79      	adds	r1, r7, #1
 8005ea4:	4668      	mov	r0, sp
 8005ea6:	44a0      	add	r8, r4
 8005ea8:	f7ff fd8e 	bl	80059c8 <memset>
 8005eac:	b177      	cbz	r7, 8005ecc <strstr+0x78>
 8005eae:	1e72      	subs	r2, r6, #1
 8005eb0:	19d5      	adds	r5, r2, r7
 8005eb2:	b2f8      	uxtb	r0, r7
 8005eb4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8005eb8:	a910      	add	r1, sp, #64	; 0x40
 8005eba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ebe:	440b      	add	r3, r1
 8005ec0:	1ab1      	subs	r1, r6, r2
 8005ec2:	4401      	add	r1, r0
 8005ec4:	42aa      	cmp	r2, r5
 8005ec6:	f803 1c40 	strb.w	r1, [r3, #-64]
 8005eca:	d1f3      	bne.n	8005eb4 <strstr+0x60>
 8005ecc:	3c01      	subs	r4, #1
 8005ece:	aa10      	add	r2, sp, #64	; 0x40
 8005ed0:	5de3      	ldrb	r3, [r4, r7]
 8005ed2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f813 0c40 	ldrb.w	r0, [r3, #-64]
 8005edc:	4404      	add	r4, r0
 8005ede:	45a0      	cmp	r8, r4
 8005ee0:	d203      	bcs.n	8005eea <strstr+0x96>
 8005ee2:	e034      	b.n	8005f4e <strstr+0xfa>
 8005ee4:	442c      	add	r4, r5
 8005ee6:	45a0      	cmp	r8, r4
 8005ee8:	d331      	bcc.n	8005f4e <strstr+0xfa>
 8005eea:	5de5      	ldrb	r5, [r4, r7]
 8005eec:	ab10      	add	r3, sp, #64	; 0x40
 8005eee:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8005ef2:	441d      	add	r5, r3
 8005ef4:	463a      	mov	r2, r7
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f815 5c40 	ldrb.w	r5, [r5, #-64]
 8005efe:	f000 f85b 	bl	8005fb8 <memcmp>
 8005f02:	2800      	cmp	r0, #0
 8005f04:	d1ee      	bne.n	8005ee4 <strstr+0x90>
 8005f06:	4620      	mov	r0, r4
 8005f08:	b010      	add	sp, #64	; 0x40
 8005f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f0e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8005f12:	7802      	ldrb	r2, [r0, #0]
 8005f14:	e000      	b.n	8005f18 <strstr+0xc4>
 8005f16:	4604      	mov	r4, r0
 8005f18:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8005f1c:	1c60      	adds	r0, r4, #1
 8005f1e:	b312      	cbz	r2, 8005f66 <strstr+0x112>
 8005f20:	4299      	cmp	r1, r3
 8005f22:	7862      	ldrb	r2, [r4, #1]
 8005f24:	d1f7      	bne.n	8005f16 <strstr+0xc2>
 8005f26:	3c01      	subs	r4, #1
 8005f28:	e7ed      	b.n	8005f06 <strstr+0xb2>
 8005f2a:	7822      	ldrb	r2, [r4, #0]
 8005f2c:	b1da      	cbz	r2, 8005f66 <strstr+0x112>
 8005f2e:	6831      	ldr	r1, [r6, #0]
 8005f30:	ba09      	rev	r1, r1
 8005f32:	e001      	b.n	8005f38 <strstr+0xe4>
 8005f34:	4299      	cmp	r1, r3
 8005f36:	d008      	beq.n	8005f4a <strstr+0xf6>
 8005f38:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8005f42:	2a00      	cmp	r2, #0
 8005f44:	d1f6      	bne.n	8005f34 <strstr+0xe0>
 8005f46:	4299      	cmp	r1, r3
 8005f48:	d10d      	bne.n	8005f66 <strstr+0x112>
 8005f4a:	1ec4      	subs	r4, r0, #3
 8005f4c:	e7db      	b.n	8005f06 <strstr+0xb2>
 8005f4e:	f818 3007 	ldrb.w	r3, [r8, r7]
 8005f52:	eb08 0007 	add.w	r0, r8, r7
 8005f56:	b133      	cbz	r3, 8005f66 <strstr+0x112>
 8005f58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f5c:	f000 f85c 	bl	8006018 <strnlen>
 8005f60:	4480      	add	r8, r0
 8005f62:	4544      	cmp	r4, r8
 8005f64:	d9b2      	bls.n	8005ecc <strstr+0x78>
 8005f66:	2400      	movs	r4, #0
 8005f68:	4620      	mov	r0, r4
 8005f6a:	b010      	add	sp, #64	; 0x40
 8005f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f70:	f7ff fd7a 	bl	8005a68 <strchr>
 8005f74:	4604      	mov	r4, r0
 8005f76:	4620      	mov	r0, r4
 8005f78:	b010      	add	sp, #64	; 0x40
 8005f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f7e:	0412      	lsls	r2, r2, #16
 8005f80:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005f84:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005f88:	7822      	ldrb	r2, [r4, #0]
 8005f8a:	e000      	b.n	8005f8e <strstr+0x13a>
 8005f8c:	462c      	mov	r4, r5
 8005f8e:	ea42 0100 	orr.w	r1, r2, r0
 8005f92:	1c65      	adds	r5, r4, #1
 8005f94:	0208      	lsls	r0, r1, #8
 8005f96:	2a00      	cmp	r2, #0
 8005f98:	d0e5      	beq.n	8005f66 <strstr+0x112>
 8005f9a:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 8005f9e:	7862      	ldrb	r2, [r4, #1]
 8005fa0:	d1f4      	bne.n	8005f8c <strstr+0x138>
 8005fa2:	3c02      	subs	r4, #2
 8005fa4:	e7af      	b.n	8005f06 <strstr+0xb2>
 8005fa6:	4601      	mov	r1, r0
 8005fa8:	463b      	mov	r3, r7
 8005faa:	4620      	mov	r0, r4
 8005fac:	4632      	mov	r2, r6
 8005fae:	f7ff fdf7 	bl	8005ba0 <two_way_long_needle>
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	e7a7      	b.n	8005f06 <strstr+0xb2>
 8005fb6:	bf00      	nop

08005fb8 <memcmp>:
 8005fb8:	2a03      	cmp	r2, #3
 8005fba:	b470      	push	{r4, r5, r6}
 8005fbc:	d912      	bls.n	8005fe4 <memcmp+0x2c>
 8005fbe:	ea40 0501 	orr.w	r5, r0, r1
 8005fc2:	07ad      	lsls	r5, r5, #30
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	d11e      	bne.n	8006008 <memcmp+0x50>
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fd2:	f854 6b04 	ldr.w	r6, [r4], #4
 8005fd6:	42ae      	cmp	r6, r5
 8005fd8:	d116      	bne.n	8006008 <memcmp+0x50>
 8005fda:	3a04      	subs	r2, #4
 8005fdc:	2a03      	cmp	r2, #3
 8005fde:	4620      	mov	r0, r4
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	d8f2      	bhi.n	8005fca <memcmp+0x12>
 8005fe4:	1e56      	subs	r6, r2, #1
 8005fe6:	b1a2      	cbz	r2, 8006012 <memcmp+0x5a>
 8005fe8:	3901      	subs	r1, #1
 8005fea:	1e44      	subs	r4, r0, #1
 8005fec:	e001      	b.n	8005ff2 <memcmp+0x3a>
 8005fee:	18c3      	adds	r3, r0, r3
 8005ff0:	d00c      	beq.n	800600c <memcmp+0x54>
 8005ff2:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8005ff6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005ffa:	4295      	cmp	r5, r2
 8005ffc:	eba6 0304 	sub.w	r3, r6, r4
 8006000:	d0f5      	beq.n	8005fee <memcmp+0x36>
 8006002:	1aa8      	subs	r0, r5, r2
 8006004:	bc70      	pop	{r4, r5, r6}
 8006006:	4770      	bx	lr
 8006008:	1e56      	subs	r6, r2, #1
 800600a:	e7ed      	b.n	8005fe8 <memcmp+0x30>
 800600c:	4618      	mov	r0, r3
 800600e:	bc70      	pop	{r4, r5, r6}
 8006010:	4770      	bx	lr
 8006012:	4610      	mov	r0, r2
 8006014:	e7f6      	b.n	8006004 <memcmp+0x4c>
 8006016:	bf00      	nop

08006018 <strnlen>:
 8006018:	b181      	cbz	r1, 800603c <strnlen+0x24>
 800601a:	b410      	push	{r4}
 800601c:	4603      	mov	r3, r0
 800601e:	1844      	adds	r4, r0, r1
 8006020:	e001      	b.n	8006026 <strnlen+0xe>
 8006022:	42a3      	cmp	r3, r4
 8006024:	d007      	beq.n	8006036 <strnlen+0x1e>
 8006026:	461a      	mov	r2, r3
 8006028:	3301      	adds	r3, #1
 800602a:	7811      	ldrb	r1, [r2, #0]
 800602c:	2900      	cmp	r1, #0
 800602e:	d1f8      	bne.n	8006022 <strnlen+0xa>
 8006030:	1a10      	subs	r0, r2, r0
 8006032:	bc10      	pop	{r4}
 8006034:	4770      	bx	lr
 8006036:	1a18      	subs	r0, r3, r0
 8006038:	bc10      	pop	{r4}
 800603a:	4770      	bx	lr
 800603c:	4608      	mov	r0, r1
 800603e:	4770      	bx	lr
